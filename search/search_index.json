{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SPIRE Local Development Environment","text":"<p>Welcome to the SPIRE Local Development Environment - your gateway to learning and experimenting with SPIFFE/SPIRE identity infrastructure! </p>"},{"location":"#what-is-this-project","title":"\ud83c\udfaf What is this project?","text":"<p>This project is designed to help you learn, test, and experiment with SPIFFE/SPIRE on your local machine. Whether you're new to zero-trust identity concepts or want to understand how SPIRE works in practice, this environment provides:</p> <ul> <li>\ud83d\udcda Learning-focused setup - Perfect for understanding SPIFFE/SPIRE concepts</li> <li>\ud83e\uddea Local testing environment - Safe sandbox for experimentation</li> <li>\ud83d\udd27 Development workflow - Rapid iteration and testing</li> <li>\ud83d\udcd6 Educational examples - Real workload integration scenarios</li> </ul>"},{"location":"#get-started-in-minutes","title":"\ud83d\ude80 Get Started in Minutes","text":"<p>The fastest way to start learning SPIRE:</p> <ol> <li>Quick Start Workload Integration - Get your first workloads talking with SPIFFE identities</li> <li>Fresh Install Script - One command to set up everything locally</li> <li>Troubleshooting Guide - Solutions to common learning hurdles</li> </ol>"},{"location":"#learning-path","title":"\ud83c\udf93 Learning Path","text":""},{"location":"#beginner-understanding-spire","title":"Beginner - Understanding SPIRE","text":"<ul> <li>SPIFFE Service Integration Guide - Learn how services get SPIFFE identities</li> <li>Workload Integration Guide - Hands-on workload integration</li> <li>Architecture Diagrams - Visual understanding of SPIRE components</li> </ul>"},{"location":"#intermediate-local-development","title":"Intermediate - Local Development","text":"<ul> <li>Project Structure - Navigate the codebase and scripts</li> <li>Architecture Validation - Verify your local setup</li> <li>Namespace Labeling Fix - Understanding Kubernetes integration</li> </ul>"},{"location":"#advanced-enterprise-concepts","title":"\ud83c\udfe2 Advanced: Enterprise Concepts","text":"<p>Once you're comfortable with SPIRE basics, explore enterprise patterns:</p> <ul> <li>Enterprise Architecture - Multi-cluster and production patterns</li> <li>Enterprise Deployment Guide - Production deployment strategies</li> <li>Helm Deployment Guide - GitOps-ready deployments</li> <li>Enterprise CRD Requirements - Kubernetes operator patterns</li> </ul>"},{"location":"#development-workflow","title":"\ud83d\udee0\ufe0f Development Workflow","text":"<p>This environment supports rapid development and testing:</p> <pre><code># Fresh setup - tears down everything and rebuilds\n./scripts/fresh-install.sh\n\n# Quick workload registration for testing\n./scripts/register-workload.sh\n\n# Validate your setup is working\n./scripts/verify-setup.sh\n</code></pre>"},{"location":"#perfect-for","title":"\ud83d\udca1 Perfect for...","text":"<ul> <li>Learning SPIFFE/SPIRE concepts without complex infrastructure</li> <li>Testing identity policies and workload attestation</li> <li>Prototyping zero-trust architectures before production</li> <li>Understanding mTLS and SVID rotation in practice</li> <li>Developing SPIRE integrations with real examples</li> </ul>"},{"location":"#what-youll-learn","title":"\ud83c\udfaf What you'll learn","text":"<p>By working through this environment, you'll understand: - How SPIRE Servers and Agents work together - Workload attestation and SVID issuance - Service-to-service mTLS with automatic certificate rotation - Kubernetes integration patterns - Federation and trust domain concepts</p>"},{"location":"#resources-for-learning","title":"\ud83d\udcda Resources for Learning","text":"<ul> <li>SPIFFE Official Website - Concepts and specifications</li> <li>SPIRE GitHub Repository - Source code and issues</li> <li>SPIFFE Community - Get help and share experiences</li> </ul> <p>This learning environment is designed for local development and testing. Ready to dive deeper into production patterns? Check out the Advanced section above!</p>"},{"location":"architecture_diagrams/","title":"SPIRE Architecture Diagrams","text":"<p>This document provides visual representations of both basic and enterprise SPIRE deployments available in this project.</p>"},{"location":"architecture_diagrams/#basic-development-architecture","title":"Basic Development Architecture","text":""},{"location":"architecture_diagrams/#minikube-cluster-layout","title":"Minikube Cluster Layout","text":"graph TB     SS[SPIRE Server]     PG[(MySQL Database)]     RE[Registration Entries]     SA[SPIRE Agent]     WA[Workload Attestation]     US[User Service]     PA[Payment API]     IS[Inventory Service]      SS --&gt; PG     SS --&gt; RE     SA --&gt; WA     US --&gt; PA     PA --&gt; IS      SA -.-&gt; SS     US -.-&gt; SA     PA -.-&gt; SA       IS -.-&gt; SA"},{"location":"architecture_diagrams/#component-interaction-flow","title":"Component Interaction Flow","text":"flowchart TD     SA[\"SPIRE Agent\"]     SS[\"SPIRE Server\"]     WP[\"Workload Pod\"]     US[\"User Service\"]     PA[\"Payment API\"]     IS[\"Inventory Service\"]      subgraph REG[\"1. Agent Registration\"]         SA --&gt;|\"k8s_psat Token\"| SS         SS --&gt;|\"Validates Token\"| SS         SS --&gt;|\"Agent SVID\"| SA     end      subgraph ATT[\"2. Workload Attestation\"]         WP --&gt;|\"Request SVID\"| SA         SA --&gt;|\"Attestation Request\"| SS         SS --&gt;|\"Issues SVID\"| SA         SA --&gt;|\"Deliver SVID\"| WP     end      subgraph COMM[\"3. Service Communication\"]         US --&gt;|\"mTLS with SPIFFE ID\"| PA         PA --&gt;|\"mTLS with SPIFFE ID\"| IS         IS --&gt;|\"Response\"| PA         PA --&gt;|\"Response\"| US     end      subgraph LIFE[\"4. Certificate Lifecycle\"]         SS --&gt;|\"Auto-rotation Signal\"| SA         SA --&gt;|\"Updates SVIDs\"| WP         WP --&gt;|\"Refresh Certificates\"| WP     end"},{"location":"architecture_diagrams/#enterprise-multi-cluster-architecture","title":"Enterprise Multi-Cluster Architecture","text":""},{"location":"architecture_diagrams/#upstream-and-downstream-topology","title":"Upstream and Downstream Topology","text":"graph TB     USS[SPIRE Server Upstream]     UDB[(MySQL Database Upstream)]     UFE[Federation Endpoint]     UCM[Controller Manager Upstream]      DSS[SPIRE Server Downstream]     DDB[(MySQL Database Downstream)]     DSA[SPIRE Agents]     DCM[Controller Manager Downstream]      EA[Enterprise API]     DP[Data Processor]     SG[Security Gateway]      USS --&gt; UDB     USS --&gt; UFE     UCM --&gt; USS      DSS --&gt; DDB     DCM --&gt; DSS     DSA --&gt; DSS      UFE -.-&gt; DSS     DSS -.-&gt; UFE      DSA -.-&gt; EA     DSA -.-&gt; DP     DSA -.-&gt; SG"},{"location":"architecture_diagrams/#trust-hierarchy-and-certificate-chain","title":"Trust Hierarchy and Certificate Chain","text":"graph TD     ECA[External Enterprise CA] --&gt; USS     USS[Upstream SPIRE Server]     DSS[Downstream SPIRE Server]     EA[enterprise-api]     DP[data-processor]     SG[security-gateway]      USS --&gt; DSS     DSS --&gt; EA     DSS --&gt; DP     DSS --&gt; SG"},{"location":"architecture_diagrams/#minikube-cluster-details","title":"Minikube Cluster Details","text":""},{"location":"architecture_diagrams/#basic-development-clusters","title":"Basic Development Clusters","text":"Cluster Profile Resources Purpose workload-cluster Default 2 CPU, 2GB RAM Development and testing"},{"location":"architecture_diagrams/#enterprise-clusters","title":"Enterprise Clusters","text":"Cluster Profile Resources Purpose upstream-spire-cluster upstream-spire-cluster 2 CPU, 3GB RAM Root Certificate Authority downstream-spire-cluster downstream-spire-cluster 2 CPU, 3GB RAM Regional Authority + Workloads"},{"location":"architecture_diagrams/#network-architecture","title":"Network Architecture","text":"graph TB     USS_GRPC[spire-upstream-server gRPC]     USS_FED[spire-upstream-server Federation]       USS_DB[spire-upstream-db]     NP_31081[NodePort 31081]     NP_31443[NodePort 31443]      DSS_GRPC[spire-downstream-server gRPC]     DSS_FED[spire-downstream-server Federation]     DSS_DB[spire-downstream-db]     EA_SVC[enterprise-api]     DP_SVC[data-processor]     SG_SVC[security-gateway]     NP_32081[NodePort 32081]     NP_32443[NodePort 32443]     NP_30080[NodePort 30080]      DASH[Dashboard Server]      USS_GRPC --&gt; NP_31081     USS_FED --&gt; NP_31443     DSS_GRPC --&gt; NP_32081     DSS_FED --&gt; NP_32443     SG_SVC --&gt; NP_30080      USS_FED -.-&gt; DSS_FED     DSS_FED -.-&gt; USS_FED      DASH -.-&gt; USS_GRPC     DASH -.-&gt; DSS_GRPC"},{"location":"architecture_diagrams/#service-mesh-integration-points","title":"Service Mesh Integration Points","text":""},{"location":"architecture_diagrams/#spiffe-integration-locations","title":"SPIFFE Integration Locations","text":"graph TD     SM[Service Mesh]     SWA[SPIRE Workload API]     ES[Envoy Sidecars]     AC[Application Containers]     IC[Init Containers]     SA[Service Accounts]     SOCKET[Unix Domain Socket]      SM --&gt; SWA     SWA --&gt; SOCKET     SOCKET --&gt; ES     SOCKET --&gt; AC     SOCKET --&gt; IC     SOCKET --&gt; SA"},{"location":"architecture_diagrams/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"architecture_diagrams/#dashboard-architecture","title":"Dashboard Architecture","text":"graph TD     WB[Web Browser]     DS[Dashboard Server]     UAS[upstream-spire-cluster]     DAS[downstream-spire-cluster]     WAS[workload-cluster]     CM[kubectl Contexts]      UAS -.-&gt; CM     DAS -.-&gt; CM       WAS -.-&gt; CM      WB --&gt; DS     DS --&gt; UAS     DS --&gt; DAS     DS --&gt; WAS"},{"location":"architecture_diagrams/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture_diagrams/#identity-and-access-flow","title":"Identity and Access Flow","text":"graph TD     KN[K8s Node]     C[Container]     W[Workload]     SA[SPIRE Agent]     SS[SPIRE Server]     SVA[Service A]     SVB[Service B]     DS[Downstream]     US[Upstream]      KN --&gt; SS     SS --&gt; KN     C --&gt; SA     SA --&gt; C     W --&gt; SA     SA --&gt; SS     SS --&gt; SA     SA --&gt; W     SVA --&gt; SVB     SVB --&gt; SVA     DS --&gt; US     US --&gt; DS <p>These diagrams provide a comprehensive view of the SPIRE architecture implementations available in this project, from basic development setups to enterprise-grade multi-cluster deployments.</p>"},{"location":"architecture_validation/","title":"SPIRE Enterprise Architecture Validation","text":"<p>This document validates our enterprise SPIRE deployment architecture against industry best practices and SPIFFE/SPIRE recommendations for production environments.</p>"},{"location":"architecture_validation/#architecture-assessment-summary","title":"Architecture Assessment Summary","text":"<p>\u2705 COMPLIANT - Meets production standards \u26a0\ufe0f PARTIAL - Meets basic requirements with room for enhancement \u274c NON-COMPLIANT - Requires modification for production use  </p>"},{"location":"architecture_validation/#1-trust-domain-design-and-federation","title":"1. Trust Domain Design and Federation","text":""},{"location":"architecture_validation/#compliant-multi-trust-domain-architecture","title":"\u2705 COMPLIANT: Multi-Trust Domain Architecture","text":"<p>Our Implementation: - Upstream Trust Domain: <code>enterprise-root.org</code> (Root CA) - Downstream Trust Domain: <code>downstream.example.org</code> (Regional CA) - Clear separation of concerns between root and regional authorities</p> <p>Best Practice Alignment:</p> <p>\"A mental model that helps understand the functionality of Nested topologies is to think about the top-level SPIRE Server as being a global server (or set of servers for high availability), and downstream SPIRE Servers as regional or cluster level servers.\" - SPIFFE Documentation</p> <p>Implementation Evidence: <pre><code># Upstream Server Config\nserver {\n  trust_domain = \"enterprise-root.org\"\n  # Acts as Root CA\n}\n\n# Downstream Server Config  \nserver {\n  trust_domain = \"downstream.example.org\"\n  # Acts as Regional CA\n}\n</code></pre></p>"},{"location":"architecture_validation/#compliant-federation-configuration","title":"\u2705 COMPLIANT: Federation Configuration","text":"<p>Our Implementation: - Bidirectional trust bundle exchange between domains - Federation endpoints properly configured on both clusters - HTTPS SPIFFE authentication between trust domains</p> <p>Configuration Validation: <pre><code># Federation setup in both servers\nfederation {\n  bundle_endpoint {\n    address = \"0.0.0.0\"\n    port = 8443\n  }\n  federates_with \"other-trust-domain\" {\n    bundle_endpoint_url = \"https://remote-server:8443\"\n    bundle_endpoint_profile \"https_spiffe\" {\n      endpoint_spiffe_id = \"spiffe://remote-domain/spire/server\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"architecture_validation/#2-high-availability-and-scalability","title":"2. High Availability and Scalability","text":""},{"location":"architecture_validation/#partial-database-high-availability","title":"\u26a0\ufe0f PARTIAL: Database High Availability","text":"<p>Current Implementation: - MySQL database per cluster - Single database instance (development setup)</p> <p>Production Enhancement Required: <pre><code># Current (Development)\ndatabase_type = \"mysql\"\nconnection_string = \"mysql://root:mysql@spire-db:3306/spire\"\n\n# Recommended (Production)\ndatabase_type = \"mysql\"\nconnection_string = \"mysql://spire_user:secure_password@mysql-ha-cluster:3306/spire\"\n# + MySQL clustering (Primary/Replica)\n# + Connection pooling\n# + SSL/TLS encryption\n</code></pre></p> <p>Recommendation: - Implement MySQL High Availability cluster - Add connection pooling (PgBouncer) - Enable SSL/TLS for database connections - Configure automatic failover</p>"},{"location":"architecture_validation/#partial-spire-server-high-availability","title":"\u26a0\ufe0f PARTIAL: SPIRE Server High Availability","text":"<p>Current Implementation: - Single SPIRE Server instance per cluster (learning environment) - StatefulSet deployment (correct approach)</p> <p>Production Enhancement Required: <pre><code># Current (Development)\nreplicas: 1\n\n# Recommended (Production)\nreplicas: 3  # Odd number for leader election\n# + Shared datastore configuration\n# + Load balancer for server endpoints\n# + Anti-affinity rules for pod distribution\n</code></pre></p> <p>Recommendation: <pre><code>spec:\n  replicas: 3\n  template:\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                app: spire-server\n            topologyKey: kubernetes.io/hostname\n</code></pre></p>"},{"location":"architecture_validation/#3-kubernetes-integration","title":"3. Kubernetes Integration","text":""},{"location":"architecture_validation/#compliant-agent-deployment-strategy","title":"\u2705 COMPLIANT: Agent Deployment Strategy","text":"<p>Our Implementation: - DaemonSet deployment for SPIRE Agents - Proper node coverage across all worker nodes - Multiple namespace support</p> <p>Configuration Validation: <pre><code>apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: spire-downstream-agent\nspec:\n  selector:\n    matchLabels:\n      app: spire-downstream-agent\n  template:\n    spec:\n      hostPID: true\n      hostNetwork: true\n      dnsPolicy: ClusterFirstWithHostNet\n</code></pre></p>"},{"location":"architecture_validation/#compliant-rbac-and-security","title":"\u2705 COMPLIANT: RBAC and Security","text":"<p>Our Implementation: - Dedicated ServiceAccounts per component - Minimal privilege ClusterRoles - Proper ClusterRoleBindings</p> <p>Security Validation: <pre><code># Minimal privileges for SPIRE Server\nrules:\n- apiGroups: [\"\"]\n  resources: [\"nodes\"]\n  verbs: [\"get\", \"list\"]\n- apiGroups: [\"authentication.k8s.io\"]\n  resources: [\"tokenreviews\"]\n  verbs: [\"create\"]\n</code></pre></p>"},{"location":"architecture_validation/#compliant-workload-attestation","title":"\u2705 COMPLIANT: Workload Attestation","text":"<p>Our Implementation: - k8s_psat node attestation - k8s workload attestation - Unix domain socket communication</p>"},{"location":"architecture_validation/#4-production-readiness","title":"4. Production Readiness","text":""},{"location":"architecture_validation/#compliant-data-directory-configuration","title":"\u2705 COMPLIANT: Data Directory Configuration","text":"<p>Our Implementation: <pre><code>server {\n  data_dir = \"/run/spire/data\"\n  # Persistent storage via StatefulSet volumeClaimTemplates\n}\n</code></pre></p>"},{"location":"architecture_validation/#partial-resource-management","title":"\u26a0\ufe0f PARTIAL: Resource Management","text":"<p>Current Implementation: <pre><code>resources:\n  requests:\n    memory: \"512Mi\"\n    cpu: \"500m\"\n  limits:\n    memory: \"1Gi\"\n    cpu: \"1\"\n</code></pre></p> <p>Production Enhancement Required: - Fine-tune resource requests/limits based on workload - Add resource quotas per namespace - Implement pod priority classes</p> <p>Recommended Enhancement: <pre><code>apiVersion: scheduling.k8s.io/v1\nkind: PriorityClass\nmetadata:\n  name: spire-critical\nvalue: 1000000\nglobalDefault: false\ndescription: \"Critical SPIRE infrastructure components\"\n</code></pre></p>"},{"location":"architecture_validation/#partial-monitoring-and-observability","title":"\u26a0\ufe0f PARTIAL: Monitoring and Observability","text":"<p>Current Implementation: - Basic health checks (liveness/readiness probes) - Dashboard monitoring</p> <p>Production Enhancement Required: <pre><code># Add telemetry configuration\ntelemetry {\n  Prometheus {\n    host = \"0.0.0.0\"\n    port = 9988\n  }\n}\n</code></pre></p>"},{"location":"architecture_validation/#5-security-best-practices","title":"5. Security Best Practices","text":""},{"location":"architecture_validation/#compliant-certificate-management","title":"\u2705 COMPLIANT: Certificate Management","text":"<p>Our Implementation: - Automatic certificate rotation - Proper SVID lifecycle management - Secure trust bundle distribution</p>"},{"location":"architecture_validation/#compliant-network-security","title":"\u2705 COMPLIANT: Network Security","text":"<p>Our Implementation: - TLS for all server communication - Federation over HTTPS - Unix domain sockets for agent communication</p>"},{"location":"architecture_validation/#partial-secrets-management","title":"\u26a0\ufe0f PARTIAL: Secrets Management","text":"<p>Current Implementation: - Database passwords in ConfigMaps (development)</p> <p>Production Enhancement Required: <pre><code># Use Kubernetes Secrets instead of ConfigMaps\napiVersion: v1\nkind: Secret\nmetadata:\n  name: spire-db-credentials\ntype: Opaque\ndata:\n  username: &lt;base64-encoded&gt;\n  password: &lt;base64-encoded&gt;\n</code></pre></p>"},{"location":"architecture_validation/#6-enterprise-architecture-patterns","title":"6. Enterprise Architecture Patterns","text":""},{"location":"architecture_validation/#compliant-upstream-authority-chain","title":"\u2705 COMPLIANT: Upstream Authority Chain","text":"<p>Our Implementation: <pre><code># Downstream server connects to upstream\nUpstreamAuthority \"spiffe\" {\n  plugin_data {\n    server_address = \"spire-upstream-server-external.spire-upstream\"\n    server_port = \"8081\"\n    server_id = \"spiffe://enterprise-root.org/spire/server\"\n  }\n}\n</code></pre></p> <p>Alignment with Best Practice:</p> <p>\"The downstream SPIRE Server obtains credentials over the Workload API that it uses to directly authenticate with the upstream SPIRE Server to obtain an intermediate CA.\"</p>"},{"location":"architecture_validation/#compliant-regional-deployment-pattern","title":"\u2705 COMPLIANT: Regional Deployment Pattern","text":"<p>Our Implementation: - Upstream cluster: Centralized root authority - Downstream cluster: Regional workload management - Proper separation of control plane and data plane</p>"},{"location":"architecture_validation/#architecture-compliance-score","title":"Architecture Compliance Score","text":"Category Score Status Trust Domain Design 100% \u2705 Fully Compliant Federation Setup 100% \u2705 Fully Compliant Kubernetes Integration 95% \u2705 Fully Compliant High Availability 60% \u26a0\ufe0f Partially Compliant Security 85% \u26a0\ufe0f Partially Compliant Monitoring 50% \u26a0\ufe0f Partially Compliant Overall 82% \u26a0\ufe0f Production Ready with Enhancements"},{"location":"architecture_validation/#production-readiness-recommendations","title":"Production Readiness Recommendations","text":""},{"location":"architecture_validation/#immediate-high-priority","title":"Immediate (High Priority)","text":"<ol> <li> <p>Database High Availability <pre><code># Implement MySQL clustering\nhelm install mysql-ha bitnami/mysql \\\n  --set persistence.enabled=true \\\n  --set metrics.enabled=true\n</code></pre></p> </li> <li> <p>SPIRE Server Scaling <pre><code>spec:\n  replicas: 3\n  # Add shared datastore configuration\n</code></pre></p> </li> <li> <p>Secrets Management <pre><code># Convert to Kubernetes Secrets\nkubectl create secret generic spire-db-credentials \\\n  --from-literal=username=spire_user \\\n  --from-literal=password=secure_random_password\n</code></pre></p> </li> </ol>"},{"location":"architecture_validation/#medium-term-medium-priority","title":"Medium Term (Medium Priority)","text":"<ol> <li> <p>Monitoring Integration <pre><code># Add Prometheus metrics\ntelemetry {\n  Prometheus {\n    host = \"0.0.0.0\"\n    port = 9988\n  }\n}\n</code></pre></p> </li> <li> <p>Resource Optimization</p> </li> <li>Pod priority classes</li> <li>Resource quotas</li> <li>Horizontal Pod Autoscaling for workloads</li> </ol>"},{"location":"architecture_validation/#long-term-low-priority","title":"Long Term (Low Priority)","text":"<ol> <li>Multi-Region Expansion</li> <li>Additional downstream clusters</li> <li>Geographic distribution</li> <li>Disaster recovery planning</li> </ol>"},{"location":"architecture_validation/#validation-against-industry-standards","title":"Validation Against Industry Standards","text":""},{"location":"architecture_validation/#cncf-graduation-requirements","title":"\u2705 CNCF Graduation Requirements","text":"<ul> <li>Security: Proper RBAC, TLS, certificate management</li> <li>Scalability: Horizontal scaling capabilities</li> <li>Production Usage: Architecture supports enterprise deployment</li> </ul>"},{"location":"architecture_validation/#zero-trust-architecture-principles","title":"\u2705 Zero Trust Architecture Principles","text":"<ul> <li>Identity-Based Security: SPIFFE identity for all workloads</li> <li>Least Privilege: Minimal RBAC permissions</li> <li>Verify Everything: Mutual TLS between services</li> </ul>"},{"location":"architecture_validation/#enterprise-architecture-principles","title":"\u2705 Enterprise Architecture Principles","text":"<ul> <li>Separation of Concerns: Clear upstream/downstream responsibilities</li> <li>Defense in Depth: Multiple security layers</li> <li>Resilience: Failure domain isolation</li> </ul>"},{"location":"architecture_validation/#conclusion","title":"Conclusion","text":"<p>Our enterprise SPIRE architecture demonstrates strong alignment with industry best practices and SPIFFE/SPIRE recommendations. The design successfully implements:</p> <ul> <li>\u2705 Proper trust domain hierarchy</li> <li>\u2705 Federation between trust domains</li> <li>\u2705 Kubernetes-native deployment patterns</li> <li>\u2705 Security best practices</li> </ul> <p>Production Readiness: The architecture is 82% production-ready with clear enhancement paths for high availability, monitoring, and secrets management.</p> <p>Recommendation: Suitable for enterprise deployment with the identified enhancements for full production readiness.</p>"},{"location":"enterprise_architecture_diagram/","title":"Enterprise SPIRE Architecture Diagram","text":"<p>This document provides a detailed Mermaid diagram of the enterprise SPIRE deployment architecture, showing the relationship between SPIRE servers, agents, databases, and workloads across upstream and downstream clusters.</p>"},{"location":"enterprise_architecture_diagram/#enterprise-multi-cluster-architecture","title":"Enterprise Multi-Cluster Architecture","text":"graph TB     US[SPIRE Server Upstream]     UDB[(MySQL Database Upstream)]     UCM[Controller Manager Upstream]     UFE[Federation Endpoint Upstream]     UNP[NodePort 31081]     UNFP[NodePort 31443]      DS[SPIRE Server Downstream]     DDB[(MySQL Database Downstream)]     DCM[Controller Manager Downstream]     DFE[Federation Endpoint Downstream]     DA1[SPIRE Agent 1]     DA2[SPIRE Agent 2]     DA3[SPIRE Agent 3]     WDA1[Workload Agent 1]     WDA2[Workload Agent 2]     WDA3[Workload Agent 3]      EA[Enterprise API]     DP[Data Processor]     SG[Security Gateway]      DNP[NodePort 32081]     DNFP[NodePort 32443]     DSGP[NodePort 30080]      EXT[External Clients]     DEV[Developers]     DASH[Dashboard]     SM[Service Mesh]     CI[CI/CD Pipeline]     MON[Monitoring]      US --&gt; UDB     US --&gt; UFE     UCM --&gt; US     US --&gt; UNP     UFE --&gt; UNFP      DS --&gt; DDB     DS --&gt; DFE     DCM --&gt; DS     DS --&gt; DNP     DFE --&gt; DNFP     SG --&gt; DSGP      DA1 --&gt; DS     DA2 --&gt; DS     DA3 --&gt; DS     WDA1 --&gt; DS     WDA2 --&gt; DS     WDA3 --&gt; DS      EA --&gt; WDA1     EA --&gt; WDA2     DP --&gt; WDA1     SG --&gt; WDA3      UFE -.-&gt; DFE     DFE -.-&gt; UFE     DS -.-&gt; US      EXT --&gt; DSGP     DEV --&gt; DASH     DASH -.-&gt; US     DASH -.-&gt; DS      SM -.-&gt; WDA1     SM -.-&gt; WDA2     SM -.-&gt; WDA3     CI -.-&gt; DS     MON -.-&gt; US     MON -.-&gt; DS"},{"location":"enterprise_architecture_diagram/#component-interaction-flow","title":"Component Interaction Flow","text":"graph TD     K8s[Kubernetes Node]     DA[SPIRE Agent]     DS[SPIRE Server Downstream]       US[SPIRE Server Upstream]     W[Workload Pod]     API[Enterprise API]      K8s --&gt; DA     DA --&gt; DS     DS --&gt; DA     DS --&gt; US     US --&gt; DS     W --&gt; DA     DA --&gt; DS     DS --&gt; DA     DA --&gt; W     US --&gt; DS     DS --&gt; US     API --&gt; DA     DA --&gt; API     API --&gt; W     W --&gt; API     DS --&gt; DA     DA --&gt; W     W --&gt; W"},{"location":"enterprise_architecture_diagram/#trust-domain-architecture","title":"Trust Domain Architecture","text":"graph TD     ROOT[Enterprise Root CA]     US_TD[Upstream SPIRE Server]     DS_TD[Downstream SPIRE Server]     EA_ID[Enterprise API]     DP_ID[Data Processor]     SG_ID[Security Gateway]     FB[Trust Bundle Exchange]      ROOT --&gt; US_TD     US_TD --&gt; DS_TD     DS_TD --&gt; EA_ID     DS_TD --&gt; DP_ID       DS_TD --&gt; SG_ID     US_TD --&gt; FB     DS_TD --&gt; FB     FB --&gt; US_TD     FB --&gt; DS_TD"},{"location":"enterprise_architecture_diagram/#data-flow-architecture","title":"Data Flow Architecture","text":"graph LR     US_API[SPIRE Server API Upstream]     US_FED[Federation API Upstream]     US_DB[(MySQL Upstream)]      DS_API[SPIRE Server API Downstream]     DS_FED[Federation API Downstream]     DS_DB[(MySQL Downstream)]      AG1[Agent 1]     AG2[Agent 2]     AG3[Agent 3]      WL1[Enterprise API]     WL2[Data Processor]     WL3[Security Gateway]      CLIENT[External Client]     DASHBOARD[Enterprise Dashboard]      US_API --&gt; US_DB     US_API --&gt; US_FED     DS_API --&gt; DS_DB     DS_API --&gt; DS_FED      DS_API --&gt; AG1     DS_API --&gt; AG2     DS_API --&gt; AG3      AG1 -.-&gt; WL1     AG2 -.-&gt; WL2     AG3 -.-&gt; WL3      US_FED -.-&gt; DS_FED     DS_FED -.-&gt; US_FED     DS_API -.-&gt; US_API      CLIENT --&gt; WL3     DASHBOARD -.-&gt; US_API     DASHBOARD -.-&gt; DS_API"},{"location":"enterprise_architecture_diagram/#kubernetes-resource-architecture","title":"Kubernetes Resource Architecture","text":"graph TB     U_NS[Namespace spire-upstream]     U_SS[StatefulSet spire-upstream-server]     U_SVC[Service spire-upstream-server]     U_CM[ConfigMap spire-upstream-server-config]     U_SA[ServiceAccount spire-upstream-server]     U_CR[ClusterRole spire-upstream-server-role]     U_CRB[ClusterRoleBinding spire-upstream-server-binding]     U_DEP[Deployment spire-upstream-db]     U_PVC[PVC spire-upstream-db-pvc]      D_NS[Namespace spire-downstream]     D_SS[StatefulSet spire-downstream-server]     D_SVC[Service spire-downstream-server]     D_CM[ConfigMap spire-downstream-server-config]     D_SA[ServiceAccount spire-downstream-server]     D_CR[ClusterRole spire-downstream-server-role]     D_CRB[ClusterRoleBinding spire-downstream-server-binding]     D_DEP[Deployment spire-downstream-db]     D_PVC[PVC spire-downstream-db-pvc]     D_DS[DaemonSet spire-downstream-agent]      W_NS[Namespace downstream-workloads]     W_DS[DaemonSet spire-downstream-agent]     W_DEP1[Deployment enterprise-api]     W_DEP2[Deployment data-processor]      W_DEP3[Deployment security-gateway]     W_SVC1[Service enterprise-api]     W_SVC2[Service data-processor]     W_SVC3[Service security-gateway]     W_SA[ServiceAccount spire-downstream-agent]      U_NS --&gt; U_SS     U_NS --&gt; U_SVC     U_NS --&gt; U_CM     U_NS --&gt; U_SA     U_NS --&gt; U_DEP     U_NS --&gt; U_PVC     U_SA --&gt; U_CR     U_CR --&gt; U_CRB     U_SS --&gt; U_CM     U_SS --&gt; U_SA     U_DEP --&gt; U_PVC      D_NS --&gt; D_SS     D_NS --&gt; D_SVC     D_NS --&gt; D_CM     D_NS --&gt; D_SA     D_NS --&gt; D_DEP     D_NS --&gt; D_PVC     D_NS --&gt; D_DS     D_SA --&gt; D_CR     D_CR --&gt; D_CRB     D_SS --&gt; D_CM     D_SS --&gt; D_SA     D_DEP --&gt; D_PVC     D_DS --&gt; D_SA      W_NS --&gt; W_DS     W_NS --&gt; W_DEP1     W_NS --&gt; W_DEP2     W_NS --&gt; W_DEP3     W_NS --&gt; W_SVC1     W_NS --&gt; W_SVC2     W_NS --&gt; W_SVC3     W_NS --&gt; W_SA     W_DS --&gt; W_SA     W_DEP1 --&gt; W_SVC1     W_DEP2 --&gt; W_SVC2     W_DEP3 --&gt; W_SVC3"},{"location":"enterprise_crd_requirements/","title":"SPIRE Enterprise CRD Requirements and Alternatives","text":"<p>This document addresses the critical question of Custom Resource Definition (CRD) requirements for SPIRE enterprise deployments on Kubernetes, particularly for organizations with strict CRD and elevated privilege policies.</p>"},{"location":"enterprise_crd_requirements/#executive-summary","title":"Executive Summary","text":"<p>\u26a0\ufe0f CRDs ARE REQUIRED for modern enterprise SPIRE deployments using the recommended SPIRE Controller Manager approach. However, alternative deployment patterns exist for enterprises with CRD restrictions.</p> <p>\ud83d\udd11 Key Finding: The SPIRE Controller Manager (the current recommended approach) requires 3 cluster-scoped CRDs and elevated cluster privileges, which may conflict with enterprise security policies.</p>"},{"location":"enterprise_crd_requirements/#crd-requirements-analysis","title":"CRD Requirements Analysis","text":""},{"location":"enterprise_crd_requirements/#required-crds-for-spire-controller-manager","title":"\u2705 Required CRDs for SPIRE Controller Manager","text":"<p>Modern SPIRE enterprise deployments using the SPIRE Controller Manager require these cluster-scoped CRDs:</p>"},{"location":"enterprise_crd_requirements/#1-clusterspiffeid-crd","title":"1. ClusterSPIFFEID CRD","text":"<pre><code>apiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: clusterspiffeids.spire.spiffe.io\nspec:\n  scope: Cluster  # \u26a0\ufe0f CLUSTER-SCOPED RESOURCE\n</code></pre> <p>Purpose: Defines workload identity templates and selectors Privileges Required:  - Cluster-wide pod and namespace access - Registration entry management - SPIFFE ID template processing</p>"},{"location":"enterprise_crd_requirements/#2-clusterfederatedtrustdomain-crd","title":"2. ClusterFederatedTrustDomain CRD","text":"<pre><code>apiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: clusterfederatedtrustdomains.spire.spiffe.io\nspec:\n  scope: Cluster  # \u26a0\ufe0f CLUSTER-SCOPED RESOURCE\n</code></pre> <p>Purpose: Manages federation relationships between trust domains Privileges Required: - Cross-cluster trust bundle management - Federation endpoint configuration - Trust relationship reconciliation</p>"},{"location":"enterprise_crd_requirements/#3-clusterstaticentry-crd","title":"3. ClusterStaticEntry CRD","text":"<pre><code>apiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: clusterstaticicentries.spire.spiffe.io\nspec:\n  scope: Cluster  # \u26a0\ufe0f CLUSTER-SCOPED RESOURCE\n</code></pre> <p>Purpose: Static SPIRE registration entries for non-Kubernetes workloads Privileges Required: - Static entry registration - External workload integration - Nested SPIRE server registration</p>"},{"location":"enterprise_crd_requirements/#required-cluster-privileges","title":"\ud83d\udd10 Required Cluster Privileges","text":"<p>The SPIRE Controller Manager requires extensive cluster-level permissions:</p> <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: spire-controller-manager-role\nrules:\n# \u26a0\ufe0f CLUSTER-WIDE PERMISSIONS REQUIRED\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"nodes\", \"services\", \"endpoints\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups: [\"apps\"]\n  resources: [\"replicasets\", \"deployments\", \"daemonsets\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups: [\"spire.spiffe.io\"]\n  resources: [\"clusterspiffeids\", \"clusterfederatedtrustdomains\", \"clusterstaticicentries\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n# Additional elevated privileges for admission controllers\n- apiGroups: [\"admissionregistration.k8s.io\"]\n  resources: [\"validatingadmissionwebhooks\", \"mutatingadmissionwebhooks\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n</code></pre>"},{"location":"enterprise_crd_requirements/#enterprise-deployment-challenges","title":"Enterprise Deployment Challenges","text":""},{"location":"enterprise_crd_requirements/#common-enterprise-restrictions","title":"\ud83d\udeab Common Enterprise Restrictions","text":"<p>Many enterprise Kubernetes environments impose these restrictions:</p>"},{"location":"enterprise_crd_requirements/#1-crd-installation-policies","title":"1. CRD Installation Policies","text":"<pre><code># Common enterprise policy restrictions\n\u274c No cluster-scoped CRD installation by application teams\n\u274c CRDs require security review (3-6 month approval process)\n\u274c Only platform teams can install CRDs\n\u274c No third-party CRDs in production\n</code></pre>"},{"location":"enterprise_crd_requirements/#2-privilege-restrictions","title":"2. Privilege Restrictions","text":"<pre><code># RBAC limitations in enterprise environments\n\u274c No cluster-admin privileges for applications\n\u274c Applications limited to namespace-scoped permissions\n\u274c No admission webhook creation\n\u274c No cluster-wide resource access\n</code></pre>"},{"location":"enterprise_crd_requirements/#3-compliance-requirements","title":"3. Compliance Requirements","text":"<pre><code># Regulatory and compliance constraints\n\u274c SOX compliance prohibits cluster-wide resource modification\n\u274c PCI-DSS requires strict privilege separation\n\u274c FedRAMP mandates least-privilege access\n\u274c ISO 27001 restricts cross-namespace access\n</code></pre>"},{"location":"enterprise_crd_requirements/#alternative-deployment-patterns","title":"Alternative Deployment Patterns","text":""},{"location":"enterprise_crd_requirements/#option-1-legacy-workload-registrar-annotation-based","title":"Option 1: Legacy Workload Registrar (Annotation-Based)","text":"<p>Status: \u26a0\ufe0f DEPRECATED - No longer maintained by SPIFFE project</p> <pre><code># Legacy deployment without CRDs\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: k8s-workload-registrar\nspec:\n  template:\n    spec:\n      containers:\n      - name: k8s-workload-registrar\n        image: ghcr.io/spiffe/k8s-workload-registrar:1.8.0\n        args:\n        - -config\n        - /run/spire/config/k8s-workload-registrar.conf\n</code></pre> <p>Configuration: <pre><code>trust_domain = \"example.org\"\nserver_socket_path = \"/run/spire/sockets/server.sock\"\ncluster = \"demo-cluster\"\nmode = \"reconcile\"  # No CRDs required\n\n# Annotation-based workload selection\npod_label = \"spiffe.io/spire-managed-identity\"\npod_annotation = \"spiffe.io/spiffe-id\"\n</code></pre></p> <p>Limitations: - No longer maintained or supported - Security vulnerabilities not patched - Limited federation capabilities - Deprecated APIs</p>"},{"location":"enterprise_crd_requirements/#option-2-manual-registration-pattern","title":"Option 2: Manual Registration Pattern","text":"<p>Approach: External registration service without CRDs</p> <pre><code># Custom registration service\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: spire-registration-service\nspec:\n  template:\n    spec:\n      containers:\n      - name: registrar\n        image: custom/spire-registrar:latest\n        env:\n        - name: SPIRE_SERVER_ADDRESS\n          value: \"spire-server:8081\"\n</code></pre> <p>Implementation: <pre><code>// Custom registration logic\nfunc registerWorkload(pod *corev1.Pod) error {\n    entry := &amp;types.Entry{\n        SpiffeId: buildSpiffeID(pod),\n        Selectors: buildSelectors(pod),\n        ParentId: \"spiffe://example.org/spire/agent/k8s_psat/cluster/demo-cluster\",\n    }\n    return spireClient.CreateEntry(entry)\n}\n</code></pre></p> <p>Benefits: - No CRDs required - Namespace-scoped permissions only - Custom business logic integration - Compliance-friendly</p> <p>Limitations: - Custom development and maintenance required - No federation support - Limited scalability - Manual lifecycle management</p>"},{"location":"enterprise_crd_requirements/#option-3-external-service-integration","title":"Option 3: External Service Integration","text":"<p>Approach: SPIRE servers outside Kubernetes cluster</p> graph TD     subgraph \"Enterprise Data Center\"         ES[External SPIRE Servers&lt;br/&gt;VM/Bare Metal Deployment&lt;br/&gt;Root SPIRE Server&lt;br/&gt;Regional SPIRE Servers]         EDB[(External Database HA)]          ES --&gt; EDB     end      subgraph \"Kubernetes Cluster\"         KA[SPIRE Agents Only&lt;br/&gt;DaemonSet - No CRDs&lt;br/&gt;Agent Pods&lt;br/&gt;External Registration]     end      ES -.-&gt;|Network Connection| KA      style ES fill:#ffecb3,stroke:#ff8f00,stroke-width:2px,stroke-dasharray:0     style EDB fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px,stroke-dasharray:0     style KA fill:#e1f5fe,stroke:#01579b,stroke-width:2px,stroke-dasharray:0 <p>Configuration: <pre><code># Agent-only deployment in Kubernetes\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: spire-agent\nspec:\n  template:\n    spec:\n      containers:\n      - name: spire-agent\n        image: ghcr.io/spiffe/spire-agent:1.9.0\n        args:\n        - -config\n        - /run/spire/config/agent.conf\n</code></pre></p> <p>Agent Configuration: <pre><code>agent {\n    data_dir = \"/run/spire\"\n    log_level = \"INFO\"\n    server_address = \"external-spire-server.company.com\"  # External server\n    server_port = \"8081\"\n    trust_domain = \"company.com\"\n}\n</code></pre></p> <p>Benefits: - No CRDs in Kubernetes - Existing enterprise SPIRE infrastructure integration - Centralized management outside Kubernetes - Compliance with enterprise policies</p> <p>Limitations: - Network complexity - Reduced Kubernetes-native features - External infrastructure requirements - Limited automation</p>"},{"location":"enterprise_crd_requirements/#enterprise-decision-matrix","title":"Enterprise Decision Matrix","text":"Requirement Controller Manager Legacy Registrar Manual Registration External Service CRDs Required \u274c Yes (3 CRDs) \u2705 No \u2705 No \u2705 No Cluster Privileges \u274c Extensive \u26a0\ufe0f Limited \u2705 Namespace-only \u2705 Namespace-only Maintenance \u2705 Supported \u274c Deprecated \u274c Custom \u26a0\ufe0f Hybrid Federation \u2705 Full Support \u274c Limited \u274c Manual \u2705 Full Support Enterprise Compliance \u274c Often Blocked \u26a0\ufe0f Risk \u2705 Compliant \u2705 Compliant Scalability \u2705 Excellent \u26a0\ufe0f Limited \u26a0\ufe0f Custom \u2705 Excellent Production Readiness \u2705 Recommended \u274c End-of-Life \u26a0\ufe0f Custom \u2705 Production Ready"},{"location":"enterprise_crd_requirements/#recommended-enterprise-approaches","title":"Recommended Enterprise Approaches","text":""},{"location":"enterprise_crd_requirements/#recommended-external-service-pattern","title":"\ud83c\udfaf Recommended: External Service Pattern","text":"<p>For enterprises with strict CRD restrictions, the External Service Pattern provides the best balance:</p> <pre><code># Implementation Steps\n1. Deploy SPIRE Servers outside Kubernetes (VMs/Bare Metal)\n2. Configure enterprise-grade database (MySQL HA)\n3. Deploy SPIRE Agents as DaemonSet in Kubernetes (no CRDs)\n4. Use external registration service for workload management\n5. Implement federation at the external server level\n</code></pre> <p>Architecture: <pre><code># spire-agent-only-deployment.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: spire-agent\n  namespace: spire-system\nspec:\n  selector:\n    matchLabels:\n      app: spire-agent\n  template:\n    metadata:\n      labels:\n        app: spire-agent\n    spec:\n      hostPID: true\n      hostNetwork: true\n      dnsPolicy: ClusterFirstWithHostNet\n      serviceAccountName: spire-agent\n      containers:\n      - name: spire-agent\n        image: ghcr.io/spiffe/spire-agent:1.9.0\n        args: [\"-config\", \"/run/spire/config/agent.conf\"]\n        volumeMounts:\n        - name: spire-config\n          mountPath: /run/spire/config\n          readOnly: true\n        - name: spire-bundle\n          mountPath: /run/spire/bundle\n          readOnly: true\n        - name: spire-agent-socket\n          mountPath: /run/spire/sockets\n        resources:\n          requests:\n            memory: 128Mi\n            cpu: 100m\n          limits:\n            memory: 256Mi\n            cpu: 200m\n      volumes:\n      - name: spire-config\n        configMap:\n          name: spire-agent-config\n      - name: spire-bundle\n        configMap:\n          name: spire-bundle\n      - name: spire-agent-socket\n        hostPath:\n          path: /run/spire/sockets\n          type: DirectoryOrCreate\n</code></pre></p>"},{"location":"enterprise_crd_requirements/#migration-strategy-crd-approval-process","title":"\ud83d\udd04 Migration Strategy: CRD Approval Process","text":"<p>If your organization can approve CRDs through proper channels:</p> <ol> <li>Phase 1: Documentation</li> <li>Create comprehensive security assessment</li> <li>Document CRD requirements and privileges</li> <li> <p>Provide risk analysis and mitigation strategies</p> </li> <li> <p>Phase 2: Approval Process </p> </li> <li>Submit CRD installation request to platform team</li> <li>Include this document as justification</li> <li> <p>Highlight enterprise security benefits</p> </li> <li> <p>Phase 3: Pilot Deployment</p> </li> <li>Deploy in non-production environment</li> <li>Demonstrate security controls and compliance</li> <li> <p>Validate enterprise requirements</p> </li> <li> <p>Phase 4: Production Rollout</p> </li> <li>Implement monitoring and alerting</li> <li>Establish operational procedures</li> <li>Plan for disaster recovery</li> </ol>"},{"location":"enterprise_crd_requirements/#security-assessment-for-crd-approval","title":"Security Assessment for CRD Approval","text":""},{"location":"enterprise_crd_requirements/#crd-security-analysis","title":"\ud83d\udd12 CRD Security Analysis","text":"<p>SPIRE Controller Manager CRDs are designed for enterprise security:</p>"},{"location":"enterprise_crd_requirements/#positive-security-attributes","title":"Positive Security Attributes:","text":"<ul> <li>Immutable Trust: CRDs define identity templates, not runtime behavior</li> <li>Audit Trail: All CRD operations logged in Kubernetes audit logs  </li> <li>RBAC Integration: Full integration with Kubernetes RBAC</li> <li>Namespace Isolation: Can be scoped to specific namespaces</li> <li>Version Control: CRDs can be managed through GitOps</li> </ul>"},{"location":"enterprise_crd_requirements/#risk-mitigation-strategies","title":"Risk Mitigation Strategies:","text":"<pre><code># Restrict CRD access to specific service accounts\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: spire-controller-restricted\nrules:\n- apiGroups: [\"spire.spiffe.io\"]\n  resources: [\"clusterspiffeids\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\"]\n  # Restrict delete operations\n- apiGroups: [\"spire.spiffe.io\"] \n  resources: [\"clusterspiffeids\"]\n  verbs: [\"delete\"]\n  resourceNames: []  # Explicit approval required\n</code></pre>"},{"location":"enterprise_crd_requirements/#compliance-alignment","title":"Compliance Alignment:","text":"<ul> <li>SOX: Audit trail through Kubernetes API</li> <li>PCI-DSS: Identity segregation and access controls</li> <li>FedRAMP: Government-approved SPIFFE/SPIRE implementations exist</li> <li>ISO 27001: Strong identity and access management</li> </ul>"},{"location":"enterprise_crd_requirements/#implementation-recommendations","title":"Implementation Recommendations","text":""},{"location":"enterprise_crd_requirements/#for-organizations-with-crd-approval-process","title":"For Organizations WITH CRD Approval Process","text":"<ol> <li>Pursue CRD Approval with comprehensive documentation</li> <li>Implement SPIRE Controller Manager for full enterprise features</li> <li>Use GitOps for CRD lifecycle management</li> <li>Implement monitoring and security controls</li> </ol>"},{"location":"enterprise_crd_requirements/#for-organizations-without-crd-approval","title":"For Organizations WITHOUT CRD Approval","text":"<ol> <li>Deploy External Service Pattern as primary recommendation</li> <li>Use Agent-Only Kubernetes Deployment with external registration</li> <li>Implement Custom Registration Service for specific needs</li> <li>Plan Migration Path for future CRD approval</li> </ol>"},{"location":"enterprise_crd_requirements/#hybrid-approach","title":"Hybrid Approach","text":"<pre><code># Phase 1: External Service (Immediate deployment)\nDeploy SPIRE servers externally + Kubernetes agents\n\n# Phase 2: CRD Approval (Parallel process)\nWork with security/platform teams for CRD approval\n\n# Phase 3: Migration (Future state)\nMigrate to Controller Manager when CRDs approved\n</code></pre>"},{"location":"enterprise_crd_requirements/#conclusion","title":"Conclusion","text":"<p>CRDs ARE REQUIRED for the modern, fully-featured SPIRE Controller Manager approach. However, viable alternatives exist for enterprise environments with CRD restrictions.</p>"},{"location":"enterprise_crd_requirements/#key-takeaways","title":"Key Takeaways:","text":"<ol> <li>Modern SPIRE = CRDs Required: The recommended SPIRE Controller Manager requires 3 cluster-scoped CRDs</li> <li>Enterprise Alternatives Exist: External service pattern provides full functionality without CRDs</li> <li>Security Can Be Maintained: Alternative approaches can meet enterprise security requirements</li> <li>Migration Path Available: Organizations can start with alternatives and migrate to CRDs when approved</li> </ol>"},{"location":"enterprise_crd_requirements/#recommendation","title":"Recommendation:","text":"<p>For immediate enterprise deployment: Use the External Service Pattern For long-term strategy: Pursue CRD approval process in parallel</p> <p>This approach ensures enterprises can deploy SPIRE immediately while working toward the optimal Controller Manager deployment model.</p>"},{"location":"enterprise_deployment_guide/","title":"SPIRE Enterprise Deployment Guide","text":"<p>This guide demonstrates a production-ready enterprise SPIRE deployment with upstream and downstream clusters, implementing a hierarchical trust architecture suitable for large-scale organizations.</p>"},{"location":"enterprise_deployment_guide/#architecture-overview","title":"Architecture Overview","text":""},{"location":"enterprise_deployment_guide/#enterprise-multi-cluster-architecture","title":"Enterprise Multi-Cluster Architecture","text":"graph TB     subgraph \"ENTERPRISE SPIRE ARCHITECTURE\"         subgraph \"UPSTREAM CLUSTER (Root Certificate Authority)\"             subgraph \"upstream-spire-cluster\"                 subgraph \"spire-upstream namespace\"                     US[SPIRE Server&lt;br/&gt;Trust Domain: enterprise-root.org&lt;br/&gt;Root CA]                     UDB[(MySQL Database)]                     UCM[SPIRE Controller Manager]                     UFE[Federation Bundle Endpoint]                      US --&gt; UDB                     US --&gt; UFE                     UCM --&gt; US                 end             end         end          subgraph \"DOWNSTREAM CLUSTER (Regional/Workload Cluster)\"             subgraph \"downstream-spire-cluster\"                 subgraph \"spire-downstream namespace\"                     DS[SPIRE Server&lt;br/&gt;Trust Domain: downstream.example.org&lt;br/&gt;Regional Authority]                     DDB[(MySQL Database)]                     DCM[SPIRE Controller Manager]                     DA[SPIRE Agents&lt;br/&gt;DaemonSet]                      DS --&gt; DDB                     DCM --&gt; DS                     DA --&gt; DS                 end                  subgraph \"downstream-workloads namespace\"                     EA[Enterprise API]                     DP[Data Processor]                     SG[Security Gateway]                      DA --&gt; EA                     DA --&gt; DP                     DA --&gt; SG                 end             end         end     end      %% Federation relationship     UFE -.-&gt;|Trust Bundle Exchange&lt;br/&gt;Federation| DS     DS -.-&gt;|Certificate Signing&lt;br/&gt;Regional Authority| US      %% Consistent styling     style US fill:#ffecb3,stroke:#ff8f00,stroke-width:2px,stroke-dasharray:0     style DS fill:#ffecb3,stroke:#ff8f00,stroke-width:2px,stroke-dasharray:0     style UDB fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px,stroke-dasharray:0     style DDB fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px,stroke-dasharray:0     style UCM fill:#fff3e0,stroke:#ef6c00,stroke-width:2px,stroke-dasharray:0     style DCM fill:#fff3e0,stroke:#ef6c00,stroke-width:2px,stroke-dasharray:0     style UFE fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,stroke-dasharray:0     style DA fill:#fff3e0,stroke:#ef6c00,stroke-width:2px,stroke-dasharray:0     style EA fill:#fce4ec,stroke:#c2185b,stroke-width:2px,stroke-dasharray:0     style DP fill:#fce4ec,stroke:#c2185b,stroke-width:2px,stroke-dasharray:0     style SG fill:#fce4ec,stroke:#c2185b,stroke-width:2px,stroke-dasharray:0"},{"location":"enterprise_deployment_guide/#trust-hierarchy","title":"Trust Hierarchy","text":"<ol> <li>Upstream Cluster (<code>enterprise-root.org</code>)</li> <li>Acts as the Root Certificate Authority</li> <li>Issues intermediate certificates to downstream clusters</li> <li>Manages enterprise-wide trust policies</li> <li> <p>Operates federation bundle endpoint</p> </li> <li> <p>Downstream Cluster (<code>downstream.example.org</code>) </p> </li> <li>Regional certificate authority</li> <li>Manages workload identities within its trust domain</li> <li>Federates with upstream for cross-domain trust</li> <li>Hosts enterprise application workloads</li> </ol>"},{"location":"enterprise_deployment_guide/#quick-start","title":"Quick Start","text":""},{"location":"enterprise_deployment_guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>minikube installed and configured</li> <li>kubectl configured </li> <li>Node.js for dashboard</li> <li>Docker for container runtime</li> </ul>"},{"location":"enterprise_deployment_guide/#deployment-options","title":"Deployment Options","text":""},{"location":"enterprise_deployment_guide/#option-1-full-enterprise-setup-requires-crds","title":"Option 1: Full Enterprise Setup (Requires CRDs)","text":"<pre><code># Deploy enterprise architecture with CRDs\n./scripts/fresh-install.sh enterprise\n\n# Or step-by-step setup\n./scripts/setup-enterprise-clusters.sh\n\n# Verify deployment\n./scripts/verify-enterprise-setup.sh\n</code></pre>"},{"location":"enterprise_deployment_guide/#option-2-crd-free-enterprise-setup","title":"Option 2: CRD-Free Enterprise Setup","text":"<pre><code># Deploy enterprise architecture without CRDs\n./scripts/setup-crd-free-deployment.sh\n\n# This approach uses:\n# - External SPIRE servers (outside Kubernetes)\n# - Agent-only Kubernetes deployment\n# - Annotation-based workload registration\n# - No cluster-wide privileges required\n</code></pre>"},{"location":"enterprise_deployment_guide/#dashboard-access","title":"Dashboard Access","text":"<pre><code># Start enterprise dashboard (auto-detects deployment type)\n./web/start-dashboard.sh\n</code></pre>"},{"location":"enterprise_deployment_guide/#access-dashboard","title":"Access Dashboard","text":"<pre><code># Auto-detected enterprise dashboard\nopen http://localhost:3000/web-dashboard.html\n</code></pre>"},{"location":"enterprise_deployment_guide/#detailed-setup-instructions","title":"Detailed Setup Instructions","text":""},{"location":"enterprise_deployment_guide/#1-deploy-upstream-cluster-root-ca","title":"1. Deploy Upstream Cluster (Root CA)","text":"<p>The upstream cluster serves as the root certificate authority for the enterprise:</p> <pre><code># Create upstream cluster\nminikube start -p upstream-spire-cluster --memory=3072 --cpus=2\n\n# Deploy upstream components\nkubectl --context upstream-spire-cluster apply -f k8s/upstream-cluster/\n</code></pre> <p>Upstream Components: - <code>spire-upstream-server</code>: Root SPIRE server - <code>spire-upstream-db</code>: MySQL database - <code>spire-upstream-controller-manager</code>: Kubernetes integration</p>"},{"location":"enterprise_deployment_guide/#2-deploy-downstream-cluster-regional","title":"2. Deploy Downstream Cluster (Regional)","text":"<p>The downstream cluster operates as a regional authority:</p> <pre><code># Create downstream cluster  \nminikube start -p downstream-spire-cluster --memory=3072 --cpus=2\n\n# Deploy downstream components\nkubectl --context downstream-spire-cluster apply -f k8s/downstream-cluster/\n</code></pre> <p>Downstream Components: - <code>spire-downstream-server</code>: Regional SPIRE server - <code>spire-downstream-db</code>: MySQL database - <code>spire-downstream-agent</code>: SPIRE agents (DaemonSet) - Enterprise workload services</p>"},{"location":"enterprise_deployment_guide/#3-configure-federation","title":"3. Configure Federation","text":"<p>Federation enables secure communication between trust domains:</p> <pre><code># Extract trust bundles from both clusters\nkubectl --context upstream-spire-cluster -n spire-upstream exec spire-upstream-server-0 -- \\\n    /opt/spire/bin/spire-server bundle show -format pem &gt; upstream-bundle.pem\n\nkubectl --context downstream-spire-cluster -n spire-downstream exec spire-downstream-server-0 -- \\\n    /opt/spire/bin/spire-server bundle show -format pem &gt; downstream-bundle.pem\n\n# Update ConfigMaps with trust bundles\nkubectl --context upstream-spire-cluster -n spire-upstream \\\n    create configmap spire-bundle --from-file=bundle.crt=upstream-bundle.pem --dry-run=client -o yaml | kubectl apply -f -\n\nkubectl --context downstream-spire-cluster -n spire-downstream \\\n    create configmap spire-bundle --from-file=bundle.crt=downstream-bundle.pem --dry-run=client -o yaml | kubectl apply -f -\n</code></pre>"},{"location":"enterprise_deployment_guide/#enterprise-workload-services","title":"Enterprise Workload Services","text":""},{"location":"enterprise_deployment_guide/#example-services-deployed","title":"Example Services Deployed","text":"<ol> <li>Enterprise API (<code>enterprise-api</code>)</li> <li>Primary business API service</li> <li>Receives SPIFFE identity from SPIRE agent</li> <li> <p>Communicates with other services using mTLS</p> </li> <li> <p>Data Processor (<code>data-processor</code>)</p> </li> <li>Backend data processing service</li> <li>Attested by SPIRE for secure access</li> <li> <p>Processes sensitive enterprise data</p> </li> <li> <p>Security Gateway (<code>security-gateway</code>)</p> </li> <li>Envoy-based ingress gateway</li> <li>Enforces SPIFFE-based authentication</li> <li>Exposed via NodePort for external access</li> </ol>"},{"location":"enterprise_deployment_guide/#accessing-services","title":"Accessing Services","text":"<pre><code># Port forward to security gateway\nkubectl --context downstream-spire-cluster port-forward -n downstream-workloads \\\n    svc/security-gateway 30080:8080\n\n# Access enterprise services\ncurl http://localhost:30080\n</code></pre>"},{"location":"enterprise_deployment_guide/#configuration-details","title":"Configuration Details","text":""},{"location":"enterprise_deployment_guide/#upstream-server-configuration","title":"Upstream Server Configuration","text":"<p>Key configuration elements for the upstream server:</p> <pre><code>server {\n  trust_domain = \"enterprise-root.org\"\n  # Root CA configuration\n}\n\nplugins {\n  # Connects to external enterprise CA (in production)\n  UpstreamAuthority \"spiffe\" {\n    plugin_data {\n      trust_domain = \"enterprise-root.org\"\n      server_address = \"upstream-ca.enterprise.com\"\n    }\n  }\n}\n\n# Federation configuration\nfederation {\n  bundle_endpoint {\n    address = \"0.0.0.0\"\n    port = 8443\n  }\n  federates_with \"downstream.example.org\" {\n    bundle_endpoint_url = \"https://spire-downstream-server.spire-downstream:8443\"\n  }\n}\n</code></pre>"},{"location":"enterprise_deployment_guide/#downstream-server-configuration","title":"Downstream Server Configuration","text":"<pre><code>server {\n  trust_domain = \"downstream.example.org\"\n  # Regional server configuration\n}\n\nplugins {\n  # Connects to upstream SPIRE server\n  UpstreamAuthority \"spiffe\" {\n    plugin_data {\n      server_address = \"spire-upstream-server-external.spire-upstream\"\n      server_port = \"8081\"\n      server_id = \"spiffe://enterprise-root.org/spire/server\"\n    }\n  }\n}\n\n# Federation with upstream\nfederation {\n  federates_with \"enterprise-root.org\" {\n    bundle_endpoint_url = \"https://spire-upstream-server-external.spire-upstream:8443\"\n  }\n}\n</code></pre>"},{"location":"enterprise_deployment_guide/#verification-commands","title":"Verification Commands","text":""},{"location":"enterprise_deployment_guide/#check-cluster-status","title":"Check Cluster Status","text":"<pre><code># Upstream cluster\nkubectl --context upstream-spire-cluster -n spire-upstream get pods\nkubectl --context upstream-spire-cluster -n spire-upstream get svc\n\n# Downstream cluster  \nkubectl --context downstream-spire-cluster -n spire-downstream get pods\nkubectl --context downstream-spire-cluster -n downstream-workloads get pods\n</code></pre>"},{"location":"enterprise_deployment_guide/#test-spire-server-apis","title":"Test SPIRE Server APIs","text":"<pre><code># Test upstream server\nkubectl --context upstream-spire-cluster -n spire-upstream exec spire-upstream-server-0 -- \\\n    /opt/spire/bin/spire-server bundle show\n\n# Test downstream server\nkubectl --context downstream-spire-cluster -n spire-downstream exec spire-downstream-server-0 -- \\\n    /opt/spire/bin/spire-server bundle show\n\n# List registered agents\nkubectl --context downstream-spire-cluster -n spire-downstream exec spire-downstream-server-0 -- \\\n    /opt/spire/bin/spire-server agent list\n</code></pre>"},{"location":"enterprise_deployment_guide/#verify-federation","title":"Verify Federation","text":"<pre><code># Check trust bundle federation\nkubectl --context upstream-spire-cluster -n spire-upstream get configmap spire-bundle -o yaml\nkubectl --context downstream-spire-cluster -n spire-downstream get configmap spire-bundle -o yaml\n</code></pre>"},{"location":"enterprise_deployment_guide/#enterprise-dashboard-features","title":"Enterprise Dashboard Features","text":"<p>The enterprise dashboard provides:</p>"},{"location":"enterprise_deployment_guide/#multi-cluster-visualization","title":"Multi-Cluster Visualization","text":"<ul> <li>Upstream Cluster View: Root CA status and health</li> <li>Downstream Cluster View: Regional services and workloads</li> <li>Real-time Updates: Pod status, health indicators</li> </ul>"},{"location":"enterprise_deployment_guide/#enterprise-metrics","title":"Enterprise Metrics","text":"<ul> <li>Trust Domain Health: Cross-cluster trust status</li> <li>Workload Attestation: Service identity verification</li> <li>Federation Status: Inter-cluster communication</li> </ul>"},{"location":"enterprise_deployment_guide/#access-dashboard_1","title":"Access Dashboard","text":"<pre><code># Auto-detected enterprise mode\n./web/start-dashboard.sh\n\n# Direct URL\nopen http://localhost:3000/web-dashboard.html\n</code></pre>"},{"location":"enterprise_deployment_guide/#crd-free-enterprise-deployment","title":"CRD-Free Enterprise Deployment","text":""},{"location":"enterprise_deployment_guide/#overview","title":"Overview","text":"<p>For enterprises with strict CRD and elevated privilege restrictions, SPIRE can be deployed without Custom Resource Definitions using an external service pattern.</p>"},{"location":"enterprise_deployment_guide/#architecture-components","title":"Architecture Components","text":"graph TB     subgraph \"CRD-FREE ARCHITECTURE\"         subgraph \"EXTERNAL INFRASTRUCTURE (Outside Kubernetes)\"             ES[SPIRE Servers&lt;br/&gt;VMs/Bare Metal]             EDB[(MySQL HA Database)]             FE[Federation Endpoints]             CA[Certificate Authority Chain]              ES --&gt; EDB             ES --&gt; FE             ES --&gt; CA         end          subgraph \"\ud83d\udd27 KUBERNETES CLUSTER (Agents Only)\"             subgraph \"spire-system namespace\"                 KA[SPIRE Agents&lt;br/&gt;DaemonSet]                 RS[\ud83d\udd27 Custom Registration Service]                 AS[\ud83d\udcdd Annotation-Based Workload Selection]                 NS[Namespace-Scoped Permissions Only]                  KA --&gt; RS                 RS --&gt; AS                 RS --&gt; NS             end              subgraph \"workload namespaces\"                 WL1[Enterprise API]                 WL2[Data Processor]                  KA --&gt; WL1                 KA --&gt; WL2             end         end     end      %% External connection     ES -.-&gt;|gRPC/HTTPS Connection| KA      %% Consistent styling     style ES fill:#ffecb3,stroke:#ff8f00,stroke-width:2px,stroke-dasharray:0     style EDB fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px,stroke-dasharray:0     style FE fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,stroke-dasharray:0     style CA fill:#ffcdd2,stroke:#d32f2f,stroke-width:2px,stroke-dasharray:0     style KA fill:#fff3e0,stroke:#ef6c00,stroke-width:2px,stroke-dasharray:0     style RS fill:#fff3e0,stroke:#ef6c00,stroke-width:2px,stroke-dasharray:0     style AS fill:#f3e5f5,stroke:#4a148c,stroke-width:2px,stroke-dasharray:0     style NS fill:#f3e5f5,stroke:#4a148c,stroke-width:2px,stroke-dasharray:0     style WL1 fill:#fce4ec,stroke:#c2185b,stroke-width:2px,stroke-dasharray:0     style WL2 fill:#fce4ec,stroke:#c2185b,stroke-width:2px,stroke-dasharray:0"},{"location":"enterprise_deployment_guide/#crd-free-deployment-steps","title":"CRD-Free Deployment Steps","text":""},{"location":"enterprise_deployment_guide/#1-deploy-external-spire-infrastructure","title":"1. Deploy External SPIRE Infrastructure","text":"<pre><code># This would typically be done outside Kubernetes\n# Example using VMs or bare metal servers\n\n# Deploy SPIRE Server with HA database\ndocker run -d --name spire-server \\\n  -p 8081:8081 -p 8443:8443 \\\n  -v /opt/spire/config:/opt/spire/conf \\\n  -v /opt/spire/data:/opt/spire/data \\\n  ghcr.io/spiffe/spire-server:1.9.0 \\\n  -config /opt/spire/conf/server.conf\n\n# Configure with external MySQL\n# Set up federation endpoints\n# Configure trust domain hierarchy\n</code></pre>"},{"location":"enterprise_deployment_guide/#2-deploy-agent-only-kubernetes-components","title":"2. Deploy Agent-Only Kubernetes Components","text":"<pre><code># Deploy SPIRE agents without CRDs\nkubectl apply -f k8s/crd-free-deployment/agent-only-deployment.yaml\n\n# Deploy custom registration service\nkubectl apply -f k8s/crd-free-deployment/external-registration-service.yaml\n\n# Deploy example workloads with annotations\nkubectl apply -f k8s/crd-free-deployment/workload-examples.yaml\n</code></pre>"},{"location":"enterprise_deployment_guide/#3-configure-annotation-based-registration","title":"3. Configure Annotation-Based Registration","text":"<p>Workloads use annotations instead of CRDs for identity specification:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: enterprise-api\nspec:\n  template:\n    metadata:\n      annotations:\n        # CRD-free workload registration\n        spire.io/spiffe-id: \"spiffe://company.com/enterprise-api\"\n        spire.io/parent-id: \"spiffe://company.com/spire/agent/k8s_psat/cluster/k8s-cluster\"\n        spire.io/selector: \"k8s:pod-label:app:enterprise-api\"\n        spire.io/dns-names: \"enterprise-api.production.svc.cluster.local\"\n</code></pre>"},{"location":"enterprise_deployment_guide/#benefits-of-crd-free-approach","title":"Benefits of CRD-Free Approach","text":"<p>\u2705 Enterprise Policy Compliance - No CRDs installation required - No cluster-wide privileges needed - Namespace-scoped permissions only - Compliance with SOX, PCI-DSS, FedRAMP requirements</p> <p>\u2705 Security Advantages - External SPIRE servers reduce Kubernetes attack surface - Centralized certificate authority management - Network isolation between control and data planes - Reduced privilege escalation risks</p> <p>\u2705 Operational Benefits - Existing enterprise SPIRE infrastructure integration - Familiar VM/bare metal operational procedures - Centralized monitoring and management - Standard enterprise backup/recovery processes</p>"},{"location":"enterprise_deployment_guide/#limitations-and-considerations","title":"Limitations and Considerations","text":"<p>\u26a0\ufe0f Functional Limitations - Reduced Kubernetes-native automation - Manual workload registration processes - Limited federation automation - Custom development for registration service</p> <p>\u26a0\ufe0f Operational Overhead - External infrastructure management required - Network connectivity dependencies - Additional complexity in troubleshooting - Hybrid operational model</p>"},{"location":"enterprise_deployment_guide/#migration-strategy","title":"Migration Strategy","text":"<p>Organizations can start with CRD-free deployment and migrate:</p> <pre><code># Phase 1: CRD-Free Deployment (Immediate)\n./scripts/setup-crd-free-deployment.sh\n\n# Phase 2: CRD Approval Process (Parallel)\n# Work with security teams for CRD approval\n\n# Phase 3: Migration to Controller Manager (Future)\n# Migrate when CRDs are approved\n./scripts/fresh-install.sh enterprise\n</code></pre>"},{"location":"enterprise_deployment_guide/#production-considerations","title":"Production Considerations","text":""},{"location":"enterprise_deployment_guide/#security-hardening","title":"Security Hardening","text":"<ol> <li>Network Policies</li> <li>Implement Kubernetes NetworkPolicies</li> <li>Restrict inter-namespace communication</li> <li> <p>Control external access points</p> </li> <li> <p>RBAC Configuration</p> </li> <li>Minimum privilege access</li> <li>Service account restrictions</li> <li> <p>Cluster role limitations</p> </li> <li> <p>Certificate Management</p> </li> <li>Automated certificate rotation</li> <li>Secure key storage (HSM/KMS)</li> <li>Certificate transparency logging</li> </ol>"},{"location":"enterprise_deployment_guide/#scalability","title":"Scalability","text":"<ol> <li>High Availability</li> <li>Multiple SPIRE server replicas</li> <li>Database clustering (MySQL HA)</li> <li> <p>Load balancer configuration</p> </li> <li> <p>Geographic Distribution</p> </li> <li>Regional downstream clusters</li> <li>Latency optimization</li> <li> <p>Disaster recovery planning</p> </li> <li> <p>Performance Tuning</p> </li> <li>Agent connection pooling</li> <li>Certificate caching strategies</li> <li>Bundle update optimization</li> </ol>"},{"location":"enterprise_deployment_guide/#monitoring-and-observability","title":"Monitoring and Observability","text":"<ol> <li>Metrics Collection</li> <li>Prometheus integration</li> <li>SPIRE server metrics</li> <li> <p>Agent health monitoring</p> </li> <li> <p>Logging</p> </li> <li>Centralized log aggregation</li> <li>Security event correlation</li> <li> <p>Audit trail compliance</p> </li> <li> <p>Alerting</p> </li> <li>Certificate expiration alerts</li> <li>Service health notifications</li> <li>Security incident detection</li> </ol>"},{"location":"enterprise_deployment_guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"enterprise_deployment_guide/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Federation Not Working <pre><code># Check bundle endpoints\nkubectl --context upstream-spire-cluster port-forward -n spire-upstream svc/spire-upstream-server 8443:8443\ncurl -k https://localhost:8443/api/v1/bundle\n</code></pre></p> </li> <li> <p>Agent Registration Issues <pre><code># Check agent logs\nkubectl --context downstream-spire-cluster -n spire-downstream logs -l app=spire-downstream-agent\n\n# Verify node attestation\nkubectl --context downstream-spire-cluster -n spire-downstream exec spire-downstream-server-0 -- \\\n    /opt/spire/bin/spire-server agent list\n</code></pre></p> </li> <li> <p>Workload Attestation Problems <pre><code># Check workload socket access\nkubectl --context downstream-spire-cluster -n downstream-workloads exec enterprise-api-xxx -- \\\n    test -S /run/spire/sockets/agent.sock &amp;&amp; echo \"Socket accessible\"\n</code></pre></p> </li> </ol>"},{"location":"enterprise_deployment_guide/#debug-commands","title":"Debug Commands","text":"<pre><code># Comprehensive status check\n./scripts/verify-enterprise-setup.sh\n\n# Individual cluster verification\nkubectl --context upstream-spire-cluster -n spire-upstream get all\nkubectl --context downstream-spire-cluster -n spire-downstream get all\nkubectl --context downstream-spire-cluster -n downstream-workloads get all\n\n# Network connectivity tests\nkubectl --context downstream-spire-cluster -n spire-downstream exec spire-downstream-server-0 -- \\\n    nslookup spire-upstream-server-external.spire-upstream.svc.cluster.local\n</code></pre>"},{"location":"enterprise_deployment_guide/#cleanup","title":"Cleanup","text":""},{"location":"enterprise_deployment_guide/#remove-enterprise-deployment","title":"Remove Enterprise Deployment","text":"<pre><code># Delete all clusters\nminikube delete --profile upstream-spire-cluster\nminikube delete --profile downstream-spire-cluster\n\n# Clean kubectl contexts  \nkubectl config delete-context upstream-spire-cluster\nkubectl config delete-context downstream-spire-cluster\n\n# Stop dashboard\npkill -f \"node.*enterprise-server.js\"\n</code></pre>"},{"location":"enterprise_deployment_guide/#next-steps","title":"Next Steps","text":"<ol> <li>Integrate with CI/CD: Automated workload registration</li> <li>Add More Regions: Scale to multiple downstream clusters  </li> <li>External CA Integration: Connect to enterprise PKI</li> <li>Service Mesh Integration: Istio/Linkerd with SPIFFE</li> <li>Policy Enforcement: OPA integration for authorization</li> </ol>"},{"location":"enterprise_deployment_guide/#references","title":"References","text":"<ul> <li>SPIFFE Specification</li> <li>SPIRE Documentation</li> <li>Kubernetes SPIRE Integration</li> <li>Federation Configuration</li> </ul> <p>Enterprise SPIRE deployment provides: - \u2705 Hierarchical trust architecture - \u2705 Multi-cluster identity federation - \u2705 Production-ready security controls - \u2705 Scalable workload attestation - \u2705 Enterprise dashboard monitoring</p>"},{"location":"enterprise_workload_integration/","title":"Enterprise Workload Integration Guide","text":"<p>This guide provides comprehensive instructions for integrating workloads with SPIRE in enterprise environments, including role separation, approval workflows, and production best practices.</p>"},{"location":"enterprise_workload_integration/#enterprise-roles-and-responsibilities","title":"Enterprise Roles and Responsibilities","text":""},{"location":"enterprise_workload_integration/#workload-owners","title":"Workload Owners","text":"<ul> <li>Application developers who need SPIFFE identities for their services</li> <li>DevOps engineers responsible for application deployment and configuration</li> <li>Service owners who manage specific microservices or applications</li> </ul>"},{"location":"enterprise_workload_integration/#spire-administrators","title":"SPIRE Administrators","text":"<ul> <li>Platform engineers who manage SPIRE infrastructure</li> <li>Security engineers who define identity policies and registration approval processes</li> <li>Site reliability engineers who monitor and maintain SPIRE deployments</li> </ul>"},{"location":"enterprise_workload_integration/#prerequisites","title":"Prerequisites","text":""},{"location":"enterprise_workload_integration/#for-workload-owners","title":"For Workload Owners","text":"<ul> <li>Kubernetes cluster access with appropriate RBAC permissions</li> <li>Understanding of your application's deployment requirements</li> <li>Knowledge of your service's security and networking requirements</li> </ul>"},{"location":"enterprise_workload_integration/#for-spire-administrators","title":"For SPIRE Administrators","text":"<ul> <li>Full administrative access to SPIRE Server</li> <li>Kubernetes cluster administrative privileges</li> <li>Understanding of organizational identity and security policies</li> </ul>"},{"location":"enterprise_workload_integration/#workload-owner-workflow","title":"Workload Owner Workflow","text":""},{"location":"enterprise_workload_integration/#step-1-prepare-integration-request","title":"Step 1: Prepare Integration Request","text":"<p>Document your requirements: - Service Name: Unique identifier for your service - Namespace: Kubernetes namespace where your service runs - ServiceAccount: Kubernetes ServiceAccount your service uses - Selectors: Labels, annotations, or other identifying characteristics - DNS Names: Any DNS SANs needed for your service - TTL Requirements: Certificate lifetime requirements (if different from defaults) - Business Justification: Why your service needs SPIFFE identity</p>"},{"location":"enterprise_workload_integration/#step-2-prepare-your-workload-configuration","title":"Step 2: Prepare Your Workload Configuration","text":"<p>Add SPIRE integration to your Kubernetes manifests:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: payment-service\n  namespace: production\nspec:\n  replicas: 3  # Production scaling; learning env uses 1\n  selector:\n    matchLabels:\n      app: payment-service\n  template:\n    metadata:\n      labels:\n        app: payment-service\n        service: payment-processing\n        version: v2.1.0\n        team: payments\n    spec:\n      serviceAccountName: payment-service\n      containers:\n      - name: payment-service\n        image: mycompany/payment-service:v2.1.0\n        env:\n        # SPIFFE Workload API endpoint\n        - name: SPIFFE_ENDPOINT_SOCKET\n          value: \"unix:///run/spire/sockets/agent.sock\"\n        # Optional: Custom trust domain\n        - name: SPIFFE_TRUST_DOMAIN\n          value: \"production.mycompany.com\"\n        volumeMounts:\n        - name: spire-agent-socket\n          mountPath: /run/spire/sockets\n          readOnly: true\n        # Security context for production\n        securityContext:\n          allowPrivilegeEscalation: false\n          runAsNonRoot: true\n          runAsUser: 1000\n          capabilities:\n            drop:\n            - ALL\n      volumes:\n      - name: spire-agent-socket\n        hostPath:\n          path: /run/spire/sockets\n          type: Directory\n      # Production-grade resource limits\n      resources:\n        requests:\n          memory: \"256Mi\"\n          cpu: \"250m\"\n        limits:\n          memory: \"512Mi\"\n          cpu: \"500m\"\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: payment-service\n  namespace: production\n  labels:\n    app: payment-service\n    team: payments\n---\n# Optional: Service for external access\napiVersion: v1\nkind: Service\nmetadata:\n  name: payment-service\n  namespace: production\n  labels:\n    app: payment-service\nspec:\n  selector:\n    app: payment-service\n  ports:\n  - port: 8080\n    targetPort: 8080\n    protocol: TCP\n  type: ClusterIP\n</code></pre>"},{"location":"enterprise_workload_integration/#step-3-integrate-spiffe-sdk","title":"Step 3: Integrate SPIFFE SDK","text":"<p>Choose appropriate SDK for your language:</p>"},{"location":"enterprise_workload_integration/#go-integration","title":"Go Integration","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"crypto/tls\"\n    \"crypto/x509\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"time\"\n\n    \"github.com/spiffe/go-spiffe/v2/spiffetls/tlsconfig\"\n    \"github.com/spiffe/go-spiffe/v2/workloadapi\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    // Create X509Source for automatic certificate rotation\n    source, err := workloadapi.NewX509Source(ctx)\n    if err != nil {\n        log.Fatalf(\"Unable to create X509Source: %v\", err)\n    }\n    defer source.Close()\n\n    // Configure TLS for client connections\n    tlsConfig := tlsconfig.MTLSClientConfig(source, source, tlsconfig.AuthorizeAny())\n    client := &amp;http.Client{\n        Transport: &amp;http.Transport{\n            TLSClientConfig: tlsConfig,\n        },\n        Timeout: 30 * time.Second,\n    }\n\n    // Configure TLS for server\n    serverTLSConfig := tlsconfig.MTLSServerConfig(source, source, tlsconfig.AuthorizeAny())\n    server := &amp;http.Server{\n        Addr:      \":8080\",\n        TLSConfig: serverTLSConfig,\n        Handler:   http.HandlerFunc(handleRequest),\n    }\n\n    // Start server with mTLS\n    log.Println(\"Starting server with SPIFFE mTLS...\")\n    log.Fatal(server.ListenAndServeTLS(\"\", \"\"))\n}\n\nfunc handleRequest(w http.ResponseWriter, r *http.Request) {\n    // Extract peer SPIFFE ID\n    if r.TLS != nil &amp;&amp; len(r.TLS.PeerCertificates) &gt; 0 {\n        cert := r.TLS.PeerCertificates[0]\n        for _, uri := range cert.URIs {\n            if uri.Scheme == \"spiffe\" {\n                fmt.Fprintf(w, \"Hello from SPIFFE ID: %s\\n\", uri.String())\n                return\n            }\n        }\n    }\n    fmt.Fprint(w, \"Hello from SPIFFE service\\n\")\n}\n</code></pre>"},{"location":"enterprise_workload_integration/#python-integration","title":"Python Integration","text":"<pre><code>import asyncio\nimport ssl\nfrom pyspiffe import WorkloadApiClient, TlsConnection\nfrom pyspiffe.spiffe_tls_connection import SpiffeTlsConnection\n\nclass PaymentService:\n    def __init__(self):\n        self.client = WorkloadApiClient()\n\n    async def start_server(self):\n        \"\"\"Start server with SPIFFE mTLS\"\"\"\n        # Get SPIFFE credentials\n        x509_context = self.client.fetch_x509_context()\n\n        # Configure SSL context with SPIFFE certificates\n        ssl_context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        ssl_context.load_cert_chain(\n            certfile=x509_context.default_svid.cert_chain(),\n            keyfile=x509_context.default_svid.private_key()\n        )\n        ssl_context.verify_mode = ssl.CERT_REQUIRED\n        ssl_context.check_hostname = False\n\n        print(f\"Server starting with SPIFFE ID: {x509_context.default_svid.spiffe_id}\")\n\n        # Start your application server here\n        # Example with aiohttp, FastAPI, etc.\n\n    async def make_authenticated_request(self, target_spiffe_id: str, url: str):\n        \"\"\"Make mTLS request to another SPIFFE service\"\"\"\n        try:\n            conn = SpiffeTlsConnection.create_client_connection(\n                target_spiffe_id=target_spiffe_id,\n                timeout=30\n            )\n\n            # Use connection for HTTP requests\n            response = await conn.request(\"GET\", url)\n            return response\n\n        except Exception as e:\n            print(f\"Request failed: {e}\")\n            return None\n\n    def shutdown(self):\n        \"\"\"Cleanup resources\"\"\"\n        self.client.close()\n\n# Usage\nasync def main():\n    service = PaymentService()\n    try:\n        await service.start_server()\n    finally:\n        service.shutdown()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"enterprise_workload_integration/#java-integration","title":"Java Integration","text":"<pre><code>package com.mycompany.payment;\n\nimport io.spiffe.workloadapi.DefaultWorkloadApiClient;\nimport io.spiffe.workloadapi.WorkloadApiClient;\nimport io.spiffe.svid.x509.X509Svid;\nimport io.spiffe.svid.x509.X509Context;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.KeyManager;\nimport javax.net.ssl.TrustManager;\nimport java.security.SecureRandom;\n\n@Service\npublic class PaymentService {\n\n    private WorkloadApiClient workloadApiClient;\n    private X509Context x509Context;\n\n    @PostConstruct\n    public void initialize() {\n        try {\n            // Initialize SPIFFE Workload API client\n            workloadApiClient = DefaultWorkloadApiClient.newClient();\n\n            // Fetch X.509 context (certificates and trust bundle)\n            x509Context = workloadApiClient.fetchX509Context();\n\n            // Log SPIFFE ID\n            X509Svid svid = x509Context.getDefaultSvid();\n            log.info(\"Service initialized with SPIFFE ID: {}\", svid.getSpiffeId());\n\n        } catch (Exception e) {\n            log.error(\"Failed to initialize SPIFFE client\", e);\n            throw new RuntimeException(\"SPIFFE initialization failed\", e);\n        }\n    }\n\n    public SSLContext createMTLSContext() throws Exception {\n        // Create SSL context with SPIFFE certificates\n        KeyManager[] keyManagers = x509Context.getKeyManager();\n        TrustManager[] trustManagers = x509Context.getTrustManager();\n\n        SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n        sslContext.init(keyManagers, trustManagers, new SecureRandom());\n\n        return sslContext;\n    }\n\n    @PreDestroy\n    public void cleanup() {\n        if (workloadApiClient != null) {\n            try {\n                workloadApiClient.close();\n            } catch (Exception e) {\n                log.error(\"Error closing SPIFFE client\", e);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"enterprise_workload_integration/#step-4-submit-integration-request","title":"Step 4: Submit Integration Request","text":"<p>Create a formal request to SPIRE administrators including:</p> <ol> <li>Service Documentation</li> <li>Service architecture diagram</li> <li>Dependencies and communication patterns</li> <li> <p>Security requirements and compliance needs</p> </li> <li> <p>Technical Specifications</p> </li> <li>Complete Kubernetes manifests</li> <li>SPIFFE integration code samples</li> <li> <p>Testing and validation procedures</p> </li> <li> <p>Operational Requirements</p> </li> <li>Deployment schedule and rollout plan</li> <li>Monitoring and alerting requirements</li> <li>Incident response procedures</li> </ol>"},{"location":"enterprise_workload_integration/#spire-administrator-workflow","title":"SPIRE Administrator Workflow","text":""},{"location":"enterprise_workload_integration/#step-1-review-integration-request","title":"Step 1: Review Integration Request","text":"<p>Security Review Checklist: - [ ] Service follows principle of least privilege - [ ] Appropriate selectors for workload identification - [ ] Reasonable certificate TTL requirements - [ ] Proper network segmentation and access controls - [ ] Compliance with organizational security policies</p> <p>Technical Review Checklist: - [ ] Kubernetes manifests follow best practices - [ ] SPIFFE SDK integration is correct - [ ] Resource limits and security contexts are appropriate - [ ] Service mesh integration (if applicable) is configured</p>"},{"location":"enterprise_workload_integration/#step-2-create-registration-entry","title":"Step 2: Create Registration Entry","text":""},{"location":"enterprise_workload_integration/#option-a-using-registration-automation-recommended","title":"Option A: Using Registration Automation (Recommended)","text":"<pre><code># Enterprise registration with approval workflow\n./scripts/enterprise-register-workload.sh \\\n  --name payment-service \\\n  --service-account payment-service \\\n  --workload-ns production \\\n  --service-type payment-processing \\\n  --team payments \\\n  --dns-names payment-service.production.svc.cluster.local \\\n  --ttl 3600 \\\n  --labels \"version:v2.1.0,team:payments,environment:production\" \\\n  --approver \"alice@company.com\" \\\n  --ticket \"JIRA-12345\"\n</code></pre>"},{"location":"enterprise_workload_integration/#option-b-manual-cli-registration","title":"Option B: Manual CLI Registration","text":"<pre><code># Connect to SPIRE server\nkubectl exec -n spire-server -it deployment/spire-server -- /bin/sh\n\n# Create registration entry with comprehensive selectors\n/opt/spire/bin/spire-server entry create \\\n  -spiffeID spiffe://production.mycompany.com/payment-service \\\n  -parentID spiffe://production.mycompany.com/spire/agent/k8s_psat/production-cluster \\\n  -selector k8s:ns:production \\\n  -selector k8s:sa:payment-service \\\n  -selector k8s:pod-label:app:payment-service \\\n  -selector k8s:pod-label:team:payments \\\n  -selector k8s:pod-label:version:v2.1.0 \\\n  -dnsName payment-service.production.svc.cluster.local \\\n  -ttl 3600\n\n# Verify registration\n/opt/spire/bin/spire-server entry show -spiffeID spiffe://production.mycompany.com/payment-service\n</code></pre>"},{"location":"enterprise_workload_integration/#option-c-gitops-integration","title":"Option C: GitOps Integration","text":"<pre><code># spire-registrations/payment-service.yaml\napiVersion: spire.spiffe.io/v1alpha1\nkind: SpiffeID\nmetadata:\n  name: payment-service\n  namespace: spire-server\nspec:\n  spiffeId: \"spiffe://production.mycompany.com/payment-service\"\n  parentId: \"spiffe://production.mycompany.com/spire/agent/k8s_psat/production-cluster\"\n  selectors:\n    - \"k8s:ns:production\"\n    - \"k8s:sa:payment-service\"\n    - \"k8s:pod-label:app:payment-service\"\n    - \"k8s:pod-label:team:payments\"\n    - \"k8s:pod-label:version:v2.1.0\"\n  dnsNames:\n    - \"payment-service.production.svc.cluster.local\"\n  ttl: 3600\n  downstream: true\n</code></pre>"},{"location":"enterprise_workload_integration/#step-3-implement-monitoring-and-alerting","title":"Step 3: Implement Monitoring and Alerting","text":"<pre><code># Prometheus monitoring for SPIFFE certificates\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: spiffe-certificate-monitor\n  namespace: production\nspec:\n  selector:\n    matchLabels:\n      app: payment-service\n  endpoints:\n  - port: metrics\n    path: /metrics\n    interval: 30s\n</code></pre>"},{"location":"enterprise_workload_integration/#step-4-configure-policy-enforcement","title":"Step 4: Configure Policy Enforcement","text":"<pre><code># Example: Configure federation policies\nkubectl exec -n spire-server deployment/spire-server -- \\\n  /opt/spire/bin/spire-server bundle set \\\n  -id spiffe://downstream.partner.com \\\n  -format spiffe \\\n  -path /tmp/downstream-bundle.json\n\n# Configure trust domain policies\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: spire-server-policies\n  namespace: spire-server\ndata:\n  federation-policy.json: |\n    {\n      \"trust_domains\": {\n        \"production.mycompany.com\": {\n          \"federates_with\": [\"staging.mycompany.com\", \"partner.external.com\"],\n          \"policies\": {\n            \"certificate_lifetime_max\": 3600,\n            \"allow_wildcard_dns\": false\n          }\n        }\n      }\n    }\nEOF\n</code></pre>"},{"location":"enterprise_workload_integration/#verification-and-testing","title":"Verification and Testing","text":""},{"location":"enterprise_workload_integration/#automated-testing-pipeline","title":"Automated Testing Pipeline","text":"<pre><code>#!/bin/bash\n# enterprise-spiffe-test.sh\n\nset -e\n\nSERVICE_NAME=\"payment-service\"\nNAMESPACE=\"production\"\nSPIFFE_ID=\"spiffe://production.mycompany.com/payment-service\"\n\necho \"\ud83d\udd0d Starting SPIFFE integration verification...\"\n\n# 1. Check registration exists\necho \"Verifying SPIRE registration...\"\nkubectl exec -n spire-server deployment/spire-server -- \\\n  /opt/spire/bin/spire-server entry show -spiffeID \"$SPIFFE_ID\" || {\n    echo \"\u274c Registration not found\"\n    exit 1\n}\n\n# 2. Check workload deployment\necho \"Verifying workload deployment...\"\nkubectl wait --for=condition=available --timeout=300s \\\n  deployment/$SERVICE_NAME -n $NAMESPACE\n\n# 3. Verify socket access\necho \"Testing SPIRE agent socket access...\"\nkubectl exec -n $NAMESPACE deployment/$SERVICE_NAME -- \\\n  ls -la /run/spire/sockets/agent.sock || {\n    echo \"\u274c SPIRE agent socket not accessible\"\n    exit 1\n}\n\n# 4. Test SVID retrieval\necho \"Testing SVID retrieval...\"\nkubectl exec -n $NAMESPACE deployment/$SERVICE_NAME -- \\\n  timeout 10 /app/test-spiffe-client || {\n    echo \"\u274c SVID retrieval failed\"\n    exit 1\n}\n\n# 5. Test inter-service communication\necho \"Testing mTLS communication...\"\nkubectl exec -n $NAMESPACE deployment/$SERVICE_NAME -- \\\n  curl --max-time 10 -k https://other-service.production.svc.cluster.local:8443/health || {\n    echo \"\u274c mTLS communication failed\"\n    exit 1\n}\n\necho \"\u2705 All SPIFFE integration tests passed!\"\n</code></pre>"},{"location":"enterprise_workload_integration/#production-best-practices","title":"Production Best Practices","text":""},{"location":"enterprise_workload_integration/#certificate-management","title":"Certificate Management","text":"<ul> <li>TTL Selection: Use appropriate certificate lifetimes (1-4 hours typical)</li> <li>Rotation Monitoring: Monitor certificate rotation and renewal</li> <li>Emergency Procedures: Have processes for certificate revocation and re-issuance</li> </ul>"},{"location":"enterprise_workload_integration/#security-policies","title":"Security Policies","text":"<ul> <li>Least Privilege: Use minimal necessary selectors and permissions</li> <li>Network Policies: Implement Kubernetes NetworkPolicies for additional security</li> <li>Audit Logging: Enable comprehensive audit logging for all SPIRE operations</li> </ul>"},{"location":"enterprise_workload_integration/#operational-excellence","title":"Operational Excellence","text":"<ul> <li>Monitoring: Implement comprehensive monitoring and alerting</li> <li>Documentation: Maintain up-to-date runbooks and procedures</li> <li>Automation: Use GitOps and automation for registration and policy management</li> <li>Disaster Recovery: Test backup and recovery procedures regularly</li> </ul>"},{"location":"enterprise_workload_integration/#compliance-and-governance","title":"Compliance and Governance","text":"<ul> <li>Access Control: Implement proper RBAC for SPIRE administration</li> <li>Change Management: Use proper change management processes for SPIRE modifications</li> <li>Compliance Reporting: Generate regular compliance and security reports</li> <li>Security Reviews: Conduct regular security reviews and assessments</li> </ul>"},{"location":"enterprise_workload_integration/#troubleshooting-common-enterprise-issues","title":"Troubleshooting Common Enterprise Issues","text":""},{"location":"enterprise_workload_integration/#registration-approval-delays","title":"Registration Approval Delays","text":"<ul> <li>Issue: Long approval times for workload registration</li> <li>Solution: Implement automated approval for pre-approved patterns</li> </ul>"},{"location":"enterprise_workload_integration/#certificate-rotation-failures","title":"Certificate Rotation Failures","text":"<ul> <li>Issue: Applications fail during certificate rotation</li> <li>Solution: Implement proper SDK integration and graceful certificate handling</li> </ul>"},{"location":"enterprise_workload_integration/#cross-cluster-communication","title":"Cross-Cluster Communication","text":"<ul> <li>Issue: Services cannot communicate across federated clusters</li> <li>Solution: Verify federation configuration and trust bundle distribution</li> </ul>"},{"location":"enterprise_workload_integration/#compliance-and-audit-requirements","title":"Compliance and Audit Requirements","text":"<ul> <li>Issue: Insufficient logging and audit trails</li> <li>Solution: Implement comprehensive logging, monitoring, and reporting</li> </ul>"},{"location":"enterprise_workload_integration/#related-documentation","title":"Related Documentation","text":"<ul> <li>Enterprise Architecture Diagrams - Visual overview of enterprise SPIRE deployments</li> <li>Production Deployment Guide - Complete production deployment procedures</li> <li>Helm Deployment Guide - GitOps-ready Helm deployments</li> <li>CRD Requirements - Kubernetes operator patterns</li> </ul>"},{"location":"enterprise_workload_integration/#support-and-escalation","title":"Support and Escalation","text":""},{"location":"enterprise_workload_integration/#internal-support","title":"Internal Support","text":"<ol> <li>Documentation: Check internal runbooks and procedures</li> <li>Platform Team: Contact platform engineering team</li> <li>Security Team: Escalate security-related issues to security team</li> </ol>"},{"location":"enterprise_workload_integration/#external-support","title":"External Support","text":"<ol> <li>SPIFFE Community: Join SPIFFE Slack community</li> <li>Vendor Support: Contact your SPIRE vendor for enterprise support</li> <li>Professional Services: Engage professional services for complex implementations</li> </ol>"},{"location":"fresh_install_guide/","title":"Fresh Install Setup Guide","text":"<p>Get your local SPIRE development environment up and running in minutes! This guide walks you through the complete setup process from scratch.</p>"},{"location":"fresh_install_guide/#what-youll-get","title":"What You'll Get","text":"<p>After running the fresh install, you'll have:</p> <ul> <li>\ud83d\udd27 Complete SPIRE setup - Server, agents, and database all configured</li> <li>\ud83d\udda5\ufe0f Real-time dashboard - Visual monitoring of your SPIRE deployment  </li> <li>\ud83e\uddea Example workloads - Three demo services to experiment with</li> <li>\ud83d\udcca Monitoring tools - Health checks and status indicators</li> <li>\ud83d\ude80 Ready to code - Everything needed to start integrating your own services</li> </ul>"},{"location":"fresh_install_guide/#prerequisites","title":"Prerequisites","text":""},{"location":"fresh_install_guide/#system-requirements","title":"System Requirements","text":"<ul> <li>macOS (tested on macOS 10.15+)</li> <li>8GB RAM minimum (16GB recommended)</li> <li>10GB free disk space</li> <li>Docker Desktop running</li> <li>Terminal/Command line access</li> </ul>"},{"location":"fresh_install_guide/#required-tools","title":"Required Tools","text":"<p>The script will check for these and help you install missing ones:</p> <ul> <li><code>minikube</code> - Local Kubernetes cluster</li> <li><code>kubectl</code> - Kubernetes command-line tool</li> <li><code>helm</code> (optional) - Package manager for Kubernetes</li> </ul>"},{"location":"fresh_install_guide/#step-1-get-the-code","title":"Step 1: Get the Code","text":"<p>Clone the repository and navigate to the project:</p> <pre><code>git clone https://github.com/spiffe/spire-dev.git\ncd spire-dev\n</code></pre>"},{"location":"fresh_install_guide/#step-2-run-the-fresh-install","title":"Step 2: Run the Fresh Install","text":"<p>Execute the fresh install script:</p> <pre><code>./scripts/fresh-install.sh\n</code></pre> <p>The script will guide you through the entire process with clear status updates.</p>"},{"location":"fresh_install_guide/#what-happens-during-install","title":"What Happens During Install","text":""},{"location":"fresh_install_guide/#infrastructure-setup-1-2-minutes","title":"\ud83c\udfd7\ufe0f Infrastructure Setup (1-2 minutes)","text":"<ul> <li>Creates a new minikube cluster</li> <li>Configures networking and resource limits</li> <li>Sets up Kubernetes namespaces</li> </ul>"},{"location":"fresh_install_guide/#spire-server-setup-2-3-minutes","title":"\ud83d\udd10 SPIRE Server Setup (2-3 minutes)","text":"<ul> <li>Deploys MySQL database</li> <li>Configures and starts SPIRE server</li> <li>Sets up initial trust domain and policies</li> </ul>"},{"location":"fresh_install_guide/#spire-agent-setup-1-2-minutes","title":"\ud83e\udd16 SPIRE Agent Setup (1-2 minutes)","text":"<ul> <li>Deploys SPIRE agents to all nodes</li> <li>Configures workload attestation</li> <li>Establishes secure communication with server</li> </ul>"},{"location":"fresh_install_guide/#example-workloads-1-2-minutes","title":"\ud83d\udc65 Example Workloads (1-2 minutes)","text":"<ul> <li>Deploys three demo services:</li> <li>User Service - User authentication and profiles</li> <li>Payment API - Payment processing service</li> <li>Inventory Service - Product inventory management</li> <li>Configures inter-service communication</li> <li>Registers all workloads with SPIRE</li> </ul>"},{"location":"fresh_install_guide/#dashboard-setup-30-seconds","title":"\ud83d\udcca Dashboard Setup (30 seconds)","text":"<ul> <li>Starts real-time monitoring dashboard</li> <li>Configures health indicators</li> <li>Opens browser to dashboard interface</li> </ul> <p>Total Time: 5-8 minutes</p>"},{"location":"fresh_install_guide/#step-3-verify-installation","title":"Step 3: Verify Installation","text":""},{"location":"fresh_install_guide/#check-cluster-health","title":"Check Cluster Health","text":"<pre><code># Check all pods are running\nkubectl get pods --all-namespaces\n\n# Verify SPIRE server is healthy\nkubectl get pods -n spire-server -l app=spire-server\n\n# Check SPIRE agents\nkubectl get pods -n spire-system -l app=spire-agent\n</code></pre>"},{"location":"fresh_install_guide/#view-example-workloads","title":"View Example Workloads","text":"<pre><code># Check demo services\nkubectl get pods -n spire-workload\n\n# View service endpoints\nkubectl get services -n spire-workload\n</code></pre>"},{"location":"fresh_install_guide/#access-the-dashboard","title":"Access the Dashboard","text":"<p>The fresh install automatically opens the dashboard at: http://localhost:3000</p> <p>If it doesn't open automatically: <pre><code>./web/start-dashboard.sh\nopen http://localhost:3000\n</code></pre></p>"},{"location":"fresh_install_guide/#step-4-explore-your-environment","title":"Step 4: Explore Your Environment","text":""},{"location":"fresh_install_guide/#view-spire-registrations","title":"View SPIRE Registrations","text":"<pre><code># List all registered workloads\nkubectl exec -n spire-server deployment/spire-server -- \\\n  /opt/spire/bin/spire-server entry show\n\n# Check specific workload\nkubectl exec -n spire-server deployment/spire-server -- \\\n  /opt/spire/bin/spire-server entry show -spiffeID spiffe://example.org/workload/user-service\n</code></pre>"},{"location":"fresh_install_guide/#test-service-communication","title":"Test Service Communication","text":"<pre><code># Test user service\nkubectl port-forward -n spire-workload service/user-service 8081:80 &amp;\ncurl http://localhost:8081/health\n\n# Test payment API\nkubectl port-forward -n spire-workload service/payment-api 8082:80 &amp;  \ncurl http://localhost:8082/health\n\n# Clean up port forwards\npkill -f \"kubectl port-forward\"\n</code></pre>"},{"location":"fresh_install_guide/#view-service-logs","title":"View Service Logs","text":"<pre><code># Check user service logs\nkubectl logs -n spire-workload -l app=user-service\n\n# Follow payment API logs\nkubectl logs -n spire-workload -l app=payment-api -f\n\n# View SPIRE agent logs\nkubectl logs -n spire-system -l app=spire-agent\n</code></pre>"},{"location":"fresh_install_guide/#understanding-the-setup","title":"Understanding the Setup","text":""},{"location":"fresh_install_guide/#architecture-overview","title":"Architecture Overview","text":"<p>Your local environment includes:</p> <ul> <li>SPIRE Server - Central identity provider</li> <li>MySQL - Identity registry database</li> <li>SPIRE Agents - Workload identity attestation (runs on each node)</li> <li>Demo Services - Example applications with SPIFFE integration</li> </ul>"},{"location":"fresh_install_guide/#trust-domain","title":"Trust Domain","text":"<ul> <li>Domain: <code>example.org</code></li> <li>Purpose: Local development and testing</li> <li>Scope: Single minikube cluster</li> </ul>"},{"location":"fresh_install_guide/#network-configuration","title":"Network Configuration","text":"<ul> <li>Cluster: minikube (usually 192.168.49.x)</li> <li>Dashboard: localhost:3000</li> <li>Services: Available via kubectl port-forward</li> </ul>"},{"location":"fresh_install_guide/#next-steps","title":"Next Steps","text":"<p>\ud83c\udfaf Now that your environment is ready:</p> <ol> <li>Try the Quick Start - Integrate your first workload</li> <li>Understand the Architecture - Learn how components work together</li> <li>Explore Code Examples - Check out the demo services in the <code>examples/</code> directory</li> <li>Register New Workloads - Use <code>./scripts/register-workload.sh</code> to add services</li> </ol>"},{"location":"fresh_install_guide/#common-setup-issues","title":"Common Setup Issues","text":""},{"location":"fresh_install_guide/#minikube-not-found","title":"\ud83d\udea8 \"minikube not found\"","text":"<p>Solution: Install minikube: <pre><code># macOS with Homebrew\nbrew install minikube\n\n# Or download directly\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64\nsudo install minikube-darwin-amd64 /usr/local/bin/minikube\n</code></pre></p>"},{"location":"fresh_install_guide/#docker-not-running","title":"\ud83d\udea8 \"Docker not running\"","text":"<p>Solution: Start Docker Desktop and wait for it to be ready</p>"},{"location":"fresh_install_guide/#insufficient-resources","title":"\ud83d\udea8 \"Insufficient resources\"","text":"<p>Solution: Adjust minikube settings: <pre><code>minikube config set memory 4096\nminikube config set cpus 2\nminikube delete &amp;&amp; minikube start\n</code></pre></p>"},{"location":"fresh_install_guide/#pods-stuck-in-pending","title":"\ud83d\udea8 \"Pods stuck in Pending\"","text":"<p>Solution: Check resource allocation: <pre><code>kubectl describe pod -n spire-server -l app=spire-server\nminikube addons enable metrics-server\nkubectl top nodes\n</code></pre></p>"},{"location":"fresh_install_guide/#dashboard-wont-open","title":"\ud83d\udea8 \"Dashboard won't open\"","text":"<p>Solution: Check port availability: <pre><code>lsof -i :3000  # Check if port is in use\n./web/start-dashboard.sh  # Restart dashboard\n</code></pre></p>"},{"location":"fresh_install_guide/#clean-up-and-reset","title":"Clean Up and Reset","text":""},{"location":"fresh_install_guide/#restart-fresh-install","title":"Restart Fresh Install","text":"<pre><code># Clean up everything and start over\n./scripts/fresh-install.sh\n# The script automatically cleans up previous installations\n</code></pre>"},{"location":"fresh_install_guide/#manual-cleanup","title":"Manual Cleanup","text":"<pre><code># Stop dashboard\npkill -f \"node.*dashboard\"\n\n# Delete cluster\nminikube delete\n\n# Clean up any remaining processes\npkill -f \"kubectl port-forward\"\n</code></pre>"},{"location":"fresh_install_guide/#troubleshooting","title":"Troubleshooting","text":"<p>For detailed troubleshooting help, see: - Troubleshooting Guide - Common issues and solutions - Script Fixes Summary - Known issues and their fixes</p>"},{"location":"fresh_install_guide/#advanced-options","title":"Advanced Options","text":""},{"location":"fresh_install_guide/#custom-configuration","title":"Custom Configuration","text":"<pre><code># Use different cluster name\nCLUSTER_NAME=spire-test ./scripts/fresh-install.sh\n\n# Skip dashboard startup  \nSKIP_DASHBOARD=true ./scripts/fresh-install.sh\n\n# Use different trust domain\nTRUST_DOMAIN=dev.mycompany.com ./scripts/fresh-install.sh\n</code></pre>"},{"location":"fresh_install_guide/#development-mode","title":"Development Mode","text":"<pre><code># Keep existing cluster if healthy\nREUSE_CLUSTER=true ./scripts/fresh-install.sh\n\n# Enable debug logging\nDEBUG=true ./scripts/fresh-install.sh\n</code></pre>"},{"location":"fresh_install_guide/#support","title":"Support","text":"<p>Need help? - Check the Troubleshooting Guide for common issues - Review the Architecture Diagrams to understand component relationships - Look at working examples in the <code>examples/</code> directory - Join the SPIFFE Community for support</p>"},{"location":"helm_deployment_guide/","title":"SPIRE Helm Deployment Guide","text":""},{"location":"helm_deployment_guide/#complete-guide-for-deploying-spire-with-helm","title":"\ud83c\udfaf Complete Guide for Deploying SPIRE with Helm","text":"<p>This guide provides comprehensive instructions for deploying, managing, and upgrading SPIRE using Helm charts, replacing the manual Kubernetes manifest approach with a production-ready, templated solution.</p>"},{"location":"helm_deployment_guide/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ol> <li>Benefits of Helm vs Manual Manifests</li> <li>Migration from Manual Setup</li> <li>Installation Procedures</li> <li>Configuration Management</li> <li>Environment Management</li> <li>Upgrade Procedures</li> <li>Troubleshooting</li> <li>Best Practices</li> </ol>"},{"location":"helm_deployment_guide/#benefits-of-helm-vs-manual-manifests","title":"\ud83d\ude80 Benefits of Helm vs Manual Manifests","text":""},{"location":"helm_deployment_guide/#current-manual-approach-issues","title":"Current Manual Approach Issues","text":"<ul> <li>\u274c No templating - Hard-coded values across environments</li> <li>\u274c Manual updates - Error-prone configuration changes</li> <li>\u274c No versioning - Difficult to track and rollback changes</li> <li>\u274c Environment drift - Inconsistent configs across dev/staging/prod</li> <li>\u274c Complex upgrades - Manual coordination of multiple manifests</li> </ul>"},{"location":"helm_deployment_guide/#helm-chart-advantages","title":"Helm Chart Advantages","text":"<ul> <li>\u2705 Templating - Single source with environment-specific values</li> <li>\u2705 Version control - Track, rollback, and manage releases</li> <li>\u2705 Dependencies - Automatic MySQL deployment and management</li> <li>\u2705 Validation - Built-in configuration validation</li> <li>\u2705 Atomic operations - All-or-nothing deployments</li> <li>\u2705 Environment consistency - Identical structure across environments</li> </ul>"},{"location":"helm_deployment_guide/#comparison-table","title":"Comparison Table","text":"Feature Manual Manifests Helm Charts Deployment <code>kubectl apply -f</code> multiple files <code>helm install</code> single command Updates Manual file editing <code>helm upgrade</code> with new values Rollbacks Manual backup/restore <code>helm rollback</code> single command Environment Management Separate manifest sets Single chart + environment values Dependency Management Manual coordination Automatic with dependencies Configuration Validation None Built-in validation Status Tracking Manual checking <code>helm status</code> comprehensive view"},{"location":"helm_deployment_guide/#migration-from-manual-setup","title":"\ud83d\udd04 Migration from Manual Setup","text":""},{"location":"helm_deployment_guide/#pre-migration-assessment","title":"Pre-Migration Assessment","text":"<p>First, analyze your current deployment:</p> <pre><code># Document current state\nkubectl get all -n spire -o yaml &gt; current-spire-state.yaml\nkubectl get configmaps -n spire -o yaml &gt; current-configmaps.yaml\nkubectl get secrets -n spire -o yaml &gt; current-secrets.yaml\n\n# Check resource usage\nkubectl top pods -n spire\nkubectl describe pvc -n spire\n</code></pre>"},{"location":"helm_deployment_guide/#migration-strategy-options","title":"Migration Strategy Options","text":""},{"location":"helm_deployment_guide/#option-1-blue-green-migration-recommended","title":"Option 1: Blue-Green Migration (Recommended)","text":"<p>Deploy Helm chart alongside existing setup:</p> <pre><code># 1. Deploy Helm chart in new namespace\nhelm install spire-new ./helm-charts/spire \\\n  --namespace spire-new \\\n  --create-namespace \\\n  --values migration-values.yaml\n\n# 2. Verify new deployment\nkubectl get pods -n spire-new\nhelm test spire-new -n spire-new\n\n# 3. Migrate data (if needed)\nkubectl exec -n spire spire-server-0 -- tar czf - /run/spire/data | \\\nkubectl exec -n spire-new spire-server-0 -i -- tar xzf - -C /\n\n# 4. Update DNS/ingress to point to new deployment\n# 5. Remove old deployment\nkubectl delete namespace spire\n</code></pre>"},{"location":"helm_deployment_guide/#option-2-in-place-migration","title":"Option 2: In-Place Migration","text":"<p>Replace existing resources with Helm:</p> <pre><code># 1. Backup current state\nkubectl get all -n spire -o yaml &gt; backup-$(date +%Y%m%d).yaml\n\n# 2. Delete existing resources (keeps PVCs)\nkubectl delete deployment,statefulset,daemonset,service,configmap -n spire --all\n\n# 3. Install Helm chart in same namespace\nhelm install spire ./helm-charts/spire \\\n  --namespace spire \\\n  --values migration-values.yaml\n\n# 4. Verify data persistence\nkubectl exec -n spire spire-server-0 -- ls -la /run/spire/data\n</code></pre>"},{"location":"helm_deployment_guide/#migration-values-file","title":"Migration Values File","text":"<p>Create <code>migration-values.yaml</code> matching your current setup:</p> <pre><code># migration-values.yaml\nglobal:\n  trustDomain: \"example.org\"  # Match your current domain\n  clusterName: \"spire-server-cluster\"  # Match current cluster name\n\nspireServer:\n  image:\n    tag: \"1.6.3\"  # Match your current version\n  config:\n    logLevel: \"INFO\"  # Match current log level\n  persistence:\n    size: \"1Gi\"  # Match current PVC size\n\nspireAgent:\n  image:\n    tag: \"1.6.3\"  # Match your current version\n  config:\n    logLevel: \"INFO\"\n\nmysql:\n  auth:\n    mysqlRootPassword: \"mysql\"  # Use your current password\n    database: \"spire\"  # Match current database name\n\n# Copy your existing registration entries\nregistrationEntries:\n  enabled: true\n  entries:\n    # Copy from your current registration-entries.yaml\n    - spiffeId: \"spiffe://example.org/spire/agent/k8s_psat/spire-server-cluster\"\n      parentId: \"spiffe://example.org/spire/server\"\n      selectors:\n        - \"k8s_psat:cluster:spire-server-cluster\"\n      ttl: 3600\n</code></pre>"},{"location":"helm_deployment_guide/#installation-procedures","title":"\ud83d\udce6 Installation Procedures","text":""},{"location":"helm_deployment_guide/#prerequisites-check","title":"Prerequisites Check","text":"<pre><code># Verify Helm installation\nhelm version\n\n# Check Kubernetes connectivity\nkubectl cluster-info\n\n# Verify storage class\nkubectl get storageclass\n\n# Check node resources\nkubectl top nodes\n</code></pre>"},{"location":"helm_deployment_guide/#fresh-installation","title":"Fresh Installation","text":""},{"location":"helm_deployment_guide/#development-environment","title":"Development Environment","text":"<pre><code># Create development environment\nhelm install spire-dev ./helm-charts/spire \\\n  --namespace spire-dev \\\n  --create-namespace \\\n  --values ./helm-charts/spire/values/development.yaml \\\n  --timeout 10m\n</code></pre>"},{"location":"helm_deployment_guide/#production-environment","title":"Production Environment","text":"<pre><code># Create production environment with custom values\ncat &gt; prod-values.yaml &lt;&lt;EOF\nglobal:\n  trustDomain: \"company.internal\"\n  clusterName: \"prod-k8s-cluster\"\n\nspireServer:\n  replicaCount: 3  # Production; learning env uses 1\n  resources:\n    requests:\n      cpu: 1000m\n      memory: 1Gi\n    limits:\n      cpu: 2000m\n      memory: 2Gi\n  persistence:\n    size: 10Gi\n    storageClass: \"fast-ssd\"\n\nmysql:\n  auth:\n    existingSecret: \"mysql-credentials\"\n  primary:\n    persistence:\n      size: 50Gi\n      storageClass: \"fast-ssd\"\n\nmonitoring:\n  prometheus:\n    enabled: true\n    serviceMonitor:\n      enabled: true\nEOF\n\nhelm install spire-prod ./helm-charts/spire \\\n  --namespace spire-prod \\\n  --create-namespace \\\n  --values ./helm-charts/spire/values/production.yaml \\\n  --values prod-values.yaml \\\n  --timeout 15m\n</code></pre>"},{"location":"helm_deployment_guide/#installation-verification","title":"Installation Verification","text":"<pre><code># Check deployment status\nhelm status spire-prod -n spire-prod\n\n# Verify all pods are running\nkubectl get pods -n spire-prod\n\n# Check services\nkubectl get svc -n spire-prod\n\n# Test SPIRE server health\nkubectl exec -n spire-prod deployment/spire-prod-server -- \\\n  /opt/spire/bin/spire-server healthcheck\n\n# Verify registration entries\nkubectl exec -n spire-prod deployment/spire-prod-server -- \\\n  /opt/spire/bin/spire-server entry show\n</code></pre>"},{"location":"helm_deployment_guide/#configuration-management","title":"\u2699\ufe0f Configuration Management","text":""},{"location":"helm_deployment_guide/#environment-specific-configurations","title":"Environment-Specific Configurations","text":""},{"location":"helm_deployment_guide/#development-values","title":"Development Values","text":"<pre><code># values/development.yaml\nglobal:\n  trustDomain: \"dev.company.internal\"\n\nspireServer:\n  config:\n    logLevel: \"DEBUG\"\n  resources:\n    requests:\n      cpu: 100m\n      memory: 128Mi\n  persistence:\n    size: 1Gi\n\nmysql:\n  primary:\n    persistence:\n      size: 2Gi\n</code></pre>"},{"location":"helm_deployment_guide/#staging-values","title":"Staging Values","text":"<pre><code># values/staging.yaml\nglobal:\n  trustDomain: \"staging.company.internal\"\n\nspireServer:\n  config:\n    logLevel: \"INFO\"\n  resources:\n    requests:\n      cpu: 500m\n      memory: 512Mi\n  persistence:\n    size: 5Gi\n\nmysql:\n  primary:\n    persistence:\n      size: 10Gi\n</code></pre>"},{"location":"helm_deployment_guide/#production-values","title":"Production Values","text":"<pre><code># values/production.yaml\nglobal:\n  trustDomain: \"company.internal\"\n\nspireServer:\n  replicaCount: 3  # Production; learning env uses 1\n  config:\n    logLevel: \"WARN\"\n  resources:\n    requests:\n      cpu: 1000m\n      memory: 1Gi\n  persistence:\n    size: 20Gi\n    storageClass: \"fast-ssd\"\n\nmysql:\n  primary:\n    persistence:\n      size: 100Gi\n      storageClass: \"fast-ssd\"\n</code></pre>"},{"location":"helm_deployment_guide/#configuration-validation","title":"Configuration Validation","text":"<pre><code># Validate configuration before deployment\nhelm template spire ./helm-charts/spire \\\n  --values production-values.yaml \\\n  --validate\n\n# Dry-run installation\nhelm install spire ./helm-charts/spire \\\n  --namespace spire \\\n  --values production-values.yaml \\\n  --dry-run\n\n# Use helm diff plugin for comparing changes\nhelm diff upgrade spire ./helm-charts/spire \\\n  --values production-values.yaml\n</code></pre>"},{"location":"helm_deployment_guide/#environment-management","title":"\ud83c\udf0d Environment Management","text":""},{"location":"helm_deployment_guide/#multi-environment-deployment","title":"Multi-Environment Deployment","text":""},{"location":"helm_deployment_guide/#automated-environment-setup","title":"Automated Environment Setup","text":"<pre><code>#!/bin/bash\n# deploy-environments.sh\n\nENVIRONMENTS=(\"dev\" \"staging\" \"prod\")\nCHART_PATH=\"./helm-charts/spire\"\n\nfor env in \"${ENVIRONMENTS[@]}\"; do\n  echo \"Deploying SPIRE to $env environment...\"\n\n  helm upgrade --install spire-$env $CHART_PATH \\\n    --namespace spire-$env \\\n    --create-namespace \\\n    --values $CHART_PATH/values/$env.yaml \\\n    --wait \\\n    --timeout 10m\n\n  # Verify deployment\n  if helm status spire-$env -n spire-$env; then\n    echo \"\u2705 $env deployment successful\"\n  else\n    echo \"\u274c $env deployment failed\"\n    exit 1\n  fi\ndone\n</code></pre>"},{"location":"helm_deployment_guide/#environment-promotion-pipeline","title":"Environment Promotion Pipeline","text":"<pre><code>#!/bin/bash\n# promote-environment.sh\n\nSOURCE_ENV=${1:-dev}\nTARGET_ENV=${2:-staging}\n\necho \"Promoting SPIRE from $SOURCE_ENV to $TARGET_ENV\"\n\n# Get source environment values\nhelm get values spire-$SOURCE_ENV -n spire-$SOURCE_ENV &gt; /tmp/source-values.yaml\n\n# Apply to target with environment-specific overrides\nhelm upgrade --install spire-$TARGET_ENV ./helm-charts/spire \\\n  --namespace spire-$TARGET_ENV \\\n  --create-namespace \\\n  --values /tmp/source-values.yaml \\\n  --values ./helm-charts/spire/values/$TARGET_ENV.yaml\n</code></pre>"},{"location":"helm_deployment_guide/#configuration-drift-detection","title":"Configuration Drift Detection","text":"<pre><code>#!/bin/bash\n# check-drift.sh\n\nENVIRONMENTS=(\"dev\" \"staging\" \"prod\")\n\nfor env in \"${ENVIRONMENTS[@]}\"; do\n  echo \"Checking configuration drift for $env...\"\n\n  # Compare deployed values with desired state\n  helm get values spire-$env -n spire-$env &gt; /tmp/deployed-$env.yaml\n\n  if diff -u ./values/$env.yaml /tmp/deployed-$env.yaml; then\n    echo \"\u2705 $env: No drift detected\"\n  else\n    echo \"\u26a0\ufe0f  $env: Configuration drift detected\"\n  fi\ndone\n</code></pre>"},{"location":"helm_deployment_guide/#upgrade-procedures","title":"\ud83d\udd04 Upgrade Procedures","text":""},{"location":"helm_deployment_guide/#chart-version-upgrades","title":"Chart Version Upgrades","text":""},{"location":"helm_deployment_guide/#minor-version-upgrade","title":"Minor Version Upgrade","text":"<pre><code># Check current version\nhelm list -n spire-prod\n\n# Update chart dependencies\nhelm dependency update ./helm-charts/spire\n\n# Upgrade with safety checks\nhelm upgrade spire-prod ./helm-charts/spire \\\n  --namespace spire-prod \\\n  --reuse-values \\\n  --wait \\\n  --timeout 10m\n\n# Verify upgrade\nkubectl rollout status deployment/spire-prod-server -n spire-prod\nkubectl rollout status daemonset/spire-prod-agent -n spire-prod\n</code></pre>"},{"location":"helm_deployment_guide/#major-version-upgrade","title":"Major Version Upgrade","text":"<pre><code># Backup current state\nhelm get all spire-prod -n spire-prod &gt; backup-pre-upgrade.yaml\nkubectl exec -n spire-prod spire-prod-server-0 -- \\\n  tar czf - /run/spire/data &gt; data-backup.tar.gz\n\n# Review changelog and breaking changes\n# Update values.yaml for compatibility\n\n# Perform upgrade with extended timeout\nhelm upgrade spire-prod ./helm-charts/spire \\\n  --namespace spire-prod \\\n  --values ./values/production.yaml \\\n  --wait \\\n  --timeout 20m \\\n  --force  # Only if required for breaking changes\n\n# Verify all components\nkubectl get pods -n spire-prod\nhelm test spire-prod -n spire-prod\n</code></pre>"},{"location":"helm_deployment_guide/#application-version-upgrades","title":"Application Version Upgrades","text":""},{"location":"helm_deployment_guide/#spire-serveragent-upgrade","title":"SPIRE Server/Agent Upgrade","text":"<pre><code># Update SPIRE version in values\ncat &gt; spire-upgrade-values.yaml &lt;&lt;EOF\nspireServer:\n  image:\n    tag: \"1.7.0\"  # New version\nspireAgent:\n  image:\n    tag: \"1.7.0\"  # New version\nEOF\n\n# Apply upgrade\nhelm upgrade spire-prod ./helm-charts/spire \\\n  --namespace spire-prod \\\n  --reuse-values \\\n  --values spire-upgrade-values.yaml \\\n  --wait\n</code></pre>"},{"location":"helm_deployment_guide/#database-upgrade","title":"Database Upgrade","text":"<pre><code># MySQL major version upgrade\ncat &gt; db-upgrade-values.yaml &lt;&lt;EOF\nmysql:\n  image:\n    tag: \"14.0.0\"\n  primary:\n    persistence:\n      size: 100Gi  # Increase if needed\nEOF\n\n# Backup database first\nkubectl exec -n spire-prod spire-prod-mysql-0 -- \\\n  mysqldump --all-databases -u root -p &gt; db-backup-$(date +%Y%m%d).sql\n\n# Apply upgrade with extended timeout\nhelm upgrade spire-prod ./helm-charts/spire \\\n  --namespace spire-prod \\\n  --reuse-values \\\n  --values db-upgrade-values.yaml \\\n  --wait \\\n  --timeout 30m\n</code></pre>"},{"location":"helm_deployment_guide/#rollback-procedures","title":"Rollback Procedures","text":""},{"location":"helm_deployment_guide/#quick-rollback","title":"Quick Rollback","text":"<pre><code># List releases\nhelm history spire-prod -n spire-prod\n\n# Rollback to previous version\nhelm rollback spire-prod 1 -n spire-prod\n\n# Verify rollback\nkubectl get pods -n spire-prod\nhelm status spire-prod -n spire-prod\n</code></pre>"},{"location":"helm_deployment_guide/#data-recovery-rollback","title":"Data Recovery Rollback","text":"<pre><code># Rollback chart version\nhelm rollback spire-prod 1 -n spire-prod\n\n# Restore data if needed\nkubectl exec -n spire-prod spire-prod-server-0 -i -- \\\n  tar xzf - -C / &lt; data-backup.tar.gz\n\n# Restart server to reload data\nkubectl rollout restart statefulset/spire-prod-server -n spire-prod\n</code></pre>"},{"location":"helm_deployment_guide/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"helm_deployment_guide/#common-issues","title":"Common Issues","text":""},{"location":"helm_deployment_guide/#chart-installation-failures","title":"Chart Installation Failures","text":"<pre><code># Check chart syntax\nhelm lint ./helm-charts/spire\n\n# Debug template rendering\nhelm template spire ./helm-charts/spire \\\n  --values ./values/production.yaml \\\n  --debug\n\n# Check resource conflicts\nkubectl describe events -n spire-prod\n</code></pre>"},{"location":"helm_deployment_guide/#resource-allocation-issues","title":"Resource Allocation Issues","text":"<pre><code># Check node resources\nkubectl top nodes\nkubectl describe nodes\n\n# Check pod resource requests\nkubectl describe pod -n spire-prod spire-prod-server-0\n\n# Adjust resource requests in values\ncat &gt; resource-fix.yaml &lt;&lt;EOF\nspireServer:\n  resources:\n    requests:\n      cpu: 500m  # Reduce if nodes can't handle\n      memory: 512Mi\nEOF\n\nhelm upgrade spire-prod ./helm-charts/spire \\\n  --namespace spire-prod \\\n  --reuse-values \\\n  --values resource-fix.yaml\n</code></pre>"},{"location":"helm_deployment_guide/#storage-issues","title":"Storage Issues","text":"<pre><code># Check PVC status\nkubectl get pvc -n spire-prod\n\n# Check storage class\nkubectl describe storageclass\n\n# Fix storage issues\nkubectl patch pvc spire-data-spire-prod-server-0 -n spire-prod \\\n  -p '{\"spec\":{\"resources\":{\"requests\":{\"storage\":\"10Gi\"}}}}'\n</code></pre>"},{"location":"helm_deployment_guide/#diagnostic-commands","title":"Diagnostic Commands","text":""},{"location":"helm_deployment_guide/#health-checks","title":"Health Checks","text":"<pre><code># Comprehensive health check script\n#!/bin/bash\n# health-check.sh\n\nNAMESPACE=${1:-spire-prod}\nRELEASE=${2:-spire-prod}\n\necho \"=== Helm Release Status ===\"\nhelm status $RELEASE -n $NAMESPACE\n\necho \"=== Pod Status ===\"\nkubectl get pods -n $NAMESPACE\n\necho \"=== Service Status ===\"\nkubectl get svc -n $NAMESPACE\n\necho \"=== ConfigMap Status ===\"\nkubectl get configmap -n $NAMESPACE\n\necho \"=== PVC Status ===\"\nkubectl get pvc -n $NAMESPACE\n\necho \"=== SPIRE Server Health ===\"\nkubectl exec -n $NAMESPACE deployment/$RELEASE-server -- \\\n  /opt/spire/bin/spire-server healthcheck || echo \"Health check failed\"\n\necho \"=== Registration Entries ===\"\nkubectl exec -n $NAMESPACE deployment/$RELEASE-server -- \\\n  /opt/spire/bin/spire-server entry show || echo \"Entry show failed\"\n\necho \"=== Recent Events ===\"\nkubectl get events -n $NAMESPACE --sort-by='.lastTimestamp' | tail -10\n</code></pre>"},{"location":"helm_deployment_guide/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Resource usage monitoring\n#!/bin/bash\n# monitor-resources.sh\n\nNAMESPACE=${1:-spire-prod}\n\necho \"=== CPU and Memory Usage ===\"\nkubectl top pods -n $NAMESPACE\n\necho \"=== Storage Usage ===\"\nkubectl exec -n $NAMESPACE spire-prod-server-0 -- df -h /run/spire/data\n\necho \"=== Database Size ===\"\nkubectl exec -n $NAMESPACE spire-prod-mysql-0 -- \\\n  mysql -u root -p -e \"SELECT table_schema 'Database Name', ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) 'Database Size (MB)' FROM information_schema.tables WHERE table_schema='spire' GROUP BY table_schema;\"\n\necho \"=== Network Connectivity ===\"\nkubectl exec -n $NAMESPACE spire-prod-agent-$(kubectl get pods -n $NAMESPACE -l app.kubernetes.io/component=spire-agent -o jsonpath='{.items[0].metadata.name}' | cut -d'-' -f4-) -- \\\n  nc -zv spire-prod-server 8081\n</code></pre>"},{"location":"helm_deployment_guide/#best-practices","title":"\u2b50 Best Practices","text":""},{"location":"helm_deployment_guide/#configuration-management_1","title":"Configuration Management","text":""},{"location":"helm_deployment_guide/#values-file-organization","title":"Values File Organization","text":"<pre><code>values/\n\u251c\u2500\u2500 base.yaml                 # Base configuration\n\u251c\u2500\u2500 development.yaml          # Development overrides\n\u251c\u2500\u2500 staging.yaml             # Staging overrides\n\u251c\u2500\u2500 production.yaml          # Production overrides\n\u2514\u2500\u2500 local/\n    \u251c\u2500\u2500 dev-cluster-1.yaml   # Cluster-specific configs\n    \u251c\u2500\u2500 dev-cluster-2.yaml\n    \u2514\u2500\u2500 prod-cluster-1.yaml\n</code></pre>"},{"location":"helm_deployment_guide/#secret-management","title":"Secret Management","text":"<pre><code># Use Kubernetes secrets for sensitive data\nkubectl create secret generic mysql-credentials \\\n  --from-literal=mysql-root-password=super-secret-password \\\n  -n spire-prod\n\n# Reference in values.yaml\nmysql:\n  auth:\n    existingSecret: \"mysql-credentials\"\n    secretKeys:\n      adminPasswordKey: \"mysql-root-password\"\n</code></pre>"},{"location":"helm_deployment_guide/#version-pinning","title":"Version Pinning","text":"<pre><code># Pin specific versions in production\nspireServer:\n  image:\n    tag: \"1.6.3\"  # Exact version, not \"latest\"\n\nmysql:\n  image:\n    tag: \"8.0.35\"  # Exact MySQL version\n\n# Use chart version constraints\ndependencies:\n  - name: mysql\n    version: \"~12.1.0\"  # Allow patch updates only\n</code></pre>"},{"location":"helm_deployment_guide/#deployment-strategies","title":"Deployment Strategies","text":""},{"location":"helm_deployment_guide/#blue-green-deployments","title":"Blue-Green Deployments","text":"<pre><code>#!/bin/bash\n# blue-green-deploy.sh\n\nCURRENT_COLOR=$(helm list -n spire-prod -o json | jq -r '.[0].name' | grep -o 'blue\\|green')\nNEW_COLOR=$([ \"$CURRENT_COLOR\" = \"blue\" ] &amp;&amp; echo \"green\" || echo \"blue\")\n\necho \"Current: $CURRENT_COLOR, Deploying: $NEW_COLOR\"\n\n# Deploy new environment\nhelm install spire-$NEW_COLOR ./helm-charts/spire \\\n  --namespace spire-$NEW_COLOR \\\n  --create-namespace \\\n  --values ./values/production.yaml\n\n# Test new environment\nhelm test spire-$NEW_COLOR -n spire-$NEW_COLOR\n\n# Switch traffic (update ingress/DNS)\n# ...\n\n# Remove old environment\nhelm uninstall spire-$CURRENT_COLOR -n spire-$CURRENT_COLOR\nkubectl delete namespace spire-$CURRENT_COLOR\n</code></pre>"},{"location":"helm_deployment_guide/#canary-deployments","title":"Canary Deployments","text":"<pre><code># Canary deployment with weighted traffic\nspireServer:\n  replicaCount: 3  # Production; learning env uses 1\n\n  # Label for canary identification\n  podLabels:\n    version: \"v1.7.0\"\n    deployment: \"canary\"\n\n  # Canary-specific configuration\n  canary:\n    enabled: true\n    weight: 10  # 10% traffic\n</code></pre>"},{"location":"helm_deployment_guide/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"helm_deployment_guide/#prometheus-integration","title":"Prometheus Integration","text":"<pre><code># values/monitoring.yaml\nmonitoring:\n  prometheus:\n    enabled: true\n    serviceMonitor:\n      enabled: true\n      interval: 30s\n      path: /metrics\n\n  alerts:\n    enabled: true\n    rules:\n      - alert: SPIREServerDown\n        expr: up{job=\"spire-server\"} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"SPIRE Server is down\"\n</code></pre>"},{"location":"helm_deployment_guide/#grafana-dashboards","title":"Grafana Dashboards","text":"<pre><code>monitoring:\n  grafana:\n    enabled: true\n    dashboards:\n      spire:\n        enabled: true\n        datasource: prometheus\n        url: \"https://grafana.com/api/dashboards/12345/revisions/1/download\"\n</code></pre>"},{"location":"helm_deployment_guide/#security-hardening","title":"Security Hardening","text":""},{"location":"helm_deployment_guide/#pod-security-standards","title":"Pod Security Standards","text":"<pre><code>security:\n  podSecurityStandards:\n    enabled: true\n    enforce: \"restricted\"\n\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 1000\n    runAsGroup: 1000\n    fsGroup: 1000\n    seccompProfile:\n      type: RuntimeDefault\n</code></pre>"},{"location":"helm_deployment_guide/#network-policies","title":"Network Policies","text":"<pre><code>networking:\n  networkPolicies:\n    enabled: true\n    ingress:\n      - from:\n        - namespaceSelector:\n            matchLabels:\n              name: monitoring\n        ports:\n        - protocol: TCP\n          port: 9988  # Metrics port\n</code></pre>"},{"location":"helm_deployment_guide/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"helm_deployment_guide/#automated-backups","title":"Automated Backups","text":"<pre><code>#!/bin/bash\n# backup-spire.sh\n\nNAMESPACE=${1:-spire-prod}\nBACKUP_DIR=\"/backups/spire/$(date +%Y%m%d-%H%M%S)\"\n\nmkdir -p $BACKUP_DIR\n\n# Backup Helm release values\nhelm get values spire-prod -n $NAMESPACE &gt; $BACKUP_DIR/helm-values.yaml\n\n# Backup SPIRE data\nkubectl exec -n $NAMESPACE spire-prod-server-0 -- \\\n  tar czf - /run/spire/data &gt; $BACKUP_DIR/spire-data.tar.gz\n\n# Backup database\nkubectl exec -n $NAMESPACE spire-prod-mysql-0 -- \\\n  mysqldump --all-databases -u root -p | gzip &gt; $BACKUP_DIR/database.sql.gz\n\n# Backup Kubernetes manifests\nkubectl get all,configmap,secret,pvc -n $NAMESPACE -o yaml &gt; $BACKUP_DIR/k8s-manifests.yaml\n\necho \"Backup completed: $BACKUP_DIR\"\n</code></pre>"},{"location":"helm_deployment_guide/#recovery-procedures","title":"Recovery Procedures","text":"<pre><code>#!/bin/bash\n# restore-spire.sh\n\nBACKUP_DIR=$1\nNAMESPACE=${2:-spire-prod}\n\n# Restore Helm release\nhelm install spire-prod ./helm-charts/spire \\\n  --namespace $NAMESPACE \\\n  --create-namespace \\\n  --values $BACKUP_DIR/helm-values.yaml\n\n# Wait for pods to be ready\nkubectl wait --for=condition=ready pod -l app.kubernetes.io/name=spire -n $NAMESPACE --timeout=300s\n\n# Restore SPIRE data\nkubectl exec -n $NAMESPACE spire-prod-server-0 -i -- \\\n  tar xzf - -C / &lt; $BACKUP_DIR/spire-data.tar.gz\n\n# Restore database\ngunzip -c $BACKUP_DIR/database.sql.gz | \\\nkubectl exec -n $NAMESPACE spire-prod-mysql-0 -i -- \\\n  mysql -u root -p\n\necho \"Restore completed from: $BACKUP_DIR\"\n</code></pre>"},{"location":"helm_deployment_guide/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"helm_deployment_guide/#documentation-links","title":"Documentation Links","text":"<ul> <li>Helm Documentation</li> <li>SPIRE Helm Chart README</li> <li>SPIFFE Service Integration Guide</li> </ul>"},{"location":"helm_deployment_guide/#useful-helm-plugins","title":"Useful Helm Plugins","text":"<pre><code># Install useful Helm plugins\nhelm plugin install https://github.com/databus23/helm-diff\nhelm plugin install https://github.com/chartmuseum/helm-push\nhelm plugin install https://github.com/helm/helm-2to3\n</code></pre>"},{"location":"helm_deployment_guide/#community-resources","title":"Community Resources","text":"<ul> <li>Helm Community Charts</li> <li>SPIRE Community</li> <li>Kubernetes Documentation</li> </ul> <p>Ready to deploy SPIRE with Helm? Start with the development environment and gradually move to production following this guide's best practices.</p> <p>Last updated: January 2024 Version: 1.0</p>"},{"location":"mkdocs_server_guide/","title":"MkDocs Server Guide","text":"<p>This guide explains how to run the documentation server locally for development and testing.</p>"},{"location":"mkdocs_server_guide/#quick-start","title":"Quick Start","text":"<pre><code># Start the documentation server\n./scripts/start-docs-server.sh\n</code></pre> <p>The documentation will be available at: http://localhost:8000</p>"},{"location":"mkdocs_server_guide/#what-the-script-does","title":"What the Script Does","text":"<p>The <code>start-docs-server.sh</code> script automatically:</p> <ol> <li>Checks Dependencies - Verifies Python 3 is installed</li> <li>Creates Virtual Environment - Sets up isolated Python environment in <code>docs/venv/</code></li> <li>Installs MkDocs - Installs MkDocs Material theme and Mermaid plugin</li> <li>Starts Server - Launches development server with live reload</li> </ol>"},{"location":"mkdocs_server_guide/#manual-setup","title":"Manual Setup","text":"<p>If you prefer to set up MkDocs manually:</p> <pre><code># Create virtual environment\npython3 -m venv docs/venv\nsource docs/venv/bin/activate\n\n# Install dependencies\npip install mkdocs mkdocs-material mkdocs-mermaid2-plugin\n\n# Start server\nmkdocs serve --dev-addr=0.0.0.0:8000\n</code></pre>"},{"location":"mkdocs_server_guide/#features","title":"Features","text":"<ul> <li>Live Reload - Changes automatically refresh in browser</li> <li>Material Theme - Modern, responsive documentation theme</li> <li>Mermaid Diagrams - Support for architectural diagrams</li> <li>Search - Full-text search across documentation</li> <li>Navigation - Organized sections with emoji indicators</li> </ul>"},{"location":"mkdocs_server_guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"mkdocs_server_guide/#python-not-found","title":"Python Not Found","text":"<pre><code># macOS\nbrew install python\n\n# Ubuntu/Debian\nsudo apt-get install python3 python3-pip python3-venv\n</code></pre>"},{"location":"mkdocs_server_guide/#port-already-in-use","title":"Port Already in Use","text":"<pre><code># Check what's using port 8000\nlsof -i :8000\n\n# Kill existing MkDocs processes\npkill -f \"mkdocs serve\"\n\n# Use different port\nmkdocs serve --dev-addr=0.0.0.0:8001\n</code></pre>"},{"location":"mkdocs_server_guide/#permission-errors","title":"Permission Errors","text":"<pre><code># Make script executable\nchmod +x scripts/start-docs-server.sh\n\n# Fix virtual environment permissions\nrm -rf docs/venv\npython3 -m venv docs/venv\n</code></pre>"},{"location":"mkdocs_server_guide/#development-workflow","title":"Development Workflow","text":"<ol> <li>Start Server: <code>./scripts/start-docs-server.sh</code></li> <li>Edit Documentation: Modify <code>.md</code> files in <code>docs/</code></li> <li>Preview Changes: Browser automatically refreshes</li> <li>Stop Server: Press <code>Ctrl+C</code></li> </ol>"},{"location":"mkdocs_server_guide/#configuration","title":"Configuration","text":"<p>Documentation configuration is in <code>mkdocs.yml</code>:</p> <ul> <li>Site settings: Title, description, URL</li> <li>Theme: Material theme with dark/light toggle</li> <li>Navigation: Organized menu structure</li> <li>Plugins: Search and Mermaid diagram support</li> <li>Extensions: Code highlighting, admonitions, etc.</li> </ul>"},{"location":"mkdocs_server_guide/#adding-new-pages","title":"Adding New Pages","text":"<ol> <li>Create <code>.md</code> file in <code>docs/</code> directory</li> <li>Add to navigation in <code>mkdocs.yml</code>:    <pre><code>nav:\n  - Section Name:\n    - Page Title: filename.md\n</code></pre></li> <li>Server automatically detects changes</li> </ol>"},{"location":"mkdocs_server_guide/#building-static-site","title":"Building Static Site","text":"<pre><code># Build static site for deployment\nmkdocs build\n\n# Output will be in site/ directory\nls site/\n</code></pre>"},{"location":"project_structure/","title":"SPIFFE/SPIRE Project Structure","text":"<p>This document outlines the organized structure of the SPIFFE/SPIRE local development environment.</p>"},{"location":"project_structure/#repository-structure","title":"\ud83d\udcc1 Repository Structure","text":"graph TD     subgraph \"spire-dev/\"         README[README.md&lt;br/&gt;Main project documentation]          subgraph \"docs - All documentation files\"             HELM_DOC[helm_deployment_guide.md&lt;br/&gt;Production Helm deployment]             PROJ_DOC[project_structure.md&lt;br/&gt;This file]             SPIFFE_DOC[spiffe_service_integration_guide.md&lt;br/&gt;Service integration guide]             TROUBLE_DOC[troubleshooting.md&lt;br/&gt;Troubleshooting guide]         end          subgraph \"scripts - All executable scripts\"             FRESH[fresh-install.sh&lt;br/&gt;Complete fresh Mac setup]             SETUP[setup-clusters.sh&lt;br/&gt;Manual cluster setup]             VERIFY[verify-setup.sh&lt;br/&gt;Installation verification]         end          subgraph \"web - Web dashboard components\"             SERVER[server.js&lt;br/&gt;Node.js dashboard server]             START_DASH[start-dashboard.sh&lt;br/&gt;Dashboard startup script]             WEB_DASH[web-dashboard.html&lt;br/&gt;Dashboard frontend]         end          subgraph \"k8s - Kubernetes manifests\"             subgraph \"spire-db\"                 DB_COMP[Database components]             end             subgraph \"spire-server\"                 SERVER_COMP[SPIRE server components]             end             subgraph \"workload-cluster\"                 WORKLOAD_COMP[Workload and agent components]             end         end          subgraph \"helm-charts - Production Helm charts\"             subgraph \"spire\"                 HELM_CHART[Complete SPIRE Helm chart]             end         end          subgraph \"src - Java demo application\"             subgraph \"main\"                 SPRING_APP[Spring Boot demo app]             end         end     end      %% Styling     classDef doc fill:#e3f2fd,stroke:#1976d2,stroke-width:2px     classDef script fill:#fff3e0,stroke:#ef6c00,stroke-width:2px     classDef web fill:#fce4ec,stroke:#c2185b,stroke-width:2px     classDef k8s fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px     classDef helm fill:#f3e5f5,stroke:#4a148c,stroke-width:2px     classDef src fill:#ffecb3,stroke:#ff8f00,stroke-width:2px     classDef main fill:#f5f5f5,stroke:#424242,stroke-width:1px      class README,HELM_DOC,PROJ_DOC,SPIFFE_DOC,TROUBLE_DOC doc     class FRESH,SETUP,VERIFY script     class SERVER,START_DASH,WEB_DASH web     class DB_COMP,SERVER_COMP,WORKLOAD_COMP k8s     class HELM_CHART helm     class SPRING_APP src"},{"location":"project_structure/#key-components","title":"\ud83c\udfaf Key Components","text":""},{"location":"project_structure/#entry-points","title":"\ud83d\ude80 Entry Points","text":"<ul> <li><code>./scripts/fresh-install.sh</code> - Main entry point for fresh Mac setup</li> <li><code>./web/start-dashboard.sh</code> - Start real-time monitoring dashboard</li> <li><code>README.md</code> - Primary documentation and getting started guide</li> </ul>"},{"location":"project_structure/#documentation-strategy","title":"\ud83d\udcd6 Documentation Strategy","text":"<p>All documentation is centralized in the <code>docs/</code> directory: - Centralized location for easy maintenance - Clear separation from code and scripts - Linked from README for discoverability</p>"},{"location":"project_structure/#scripts-organization","title":"\ud83d\udd27 Scripts Organization","text":"<p>All executable scripts are in the <code>scripts/</code> directory: - Consistent location for all automation - Executable permissions maintained - Interdependent scripts in same location</p>"},{"location":"project_structure/#web-components","title":"\ud83c\udf10 Web Components","text":"<p>Web-related files are isolated in the <code>web/</code> directory: - Self-contained dashboard application - Isolated dependencies (Node.js, etc.) - Clear separation from infrastructure code</p>"},{"location":"project_structure/#workflow-patterns","title":"\ud83d\udd04 Workflow Patterns","text":""},{"location":"project_structure/#fresh-mac-setup","title":"Fresh Mac Setup","text":"<ol> <li><code>./scripts/fresh-install.sh</code> - Complete environment setup</li> <li><code>./web/start-dashboard.sh</code> - Start monitoring</li> <li>Open <code>http://localhost:3000/web-dashboard.html</code></li> </ol>"},{"location":"project_structure/#development-iteration","title":"Development Iteration","text":"<ol> <li>Make changes to configurations</li> <li><code>./scripts/fresh-install.sh</code> - Reset to clean state</li> <li>Test changes with dashboard</li> </ol>"},{"location":"project_structure/#production-deployment","title":"Production Deployment","text":"<ol> <li>Review <code>docs/helm_deployment_guide.md</code></li> <li>Use Helm charts in <code>helm-charts/spire/</code></li> <li>Adapt configurations for production</li> </ol>"},{"location":"project_structure/#best-practices-applied","title":"\ud83d\udcca Best Practices Applied","text":""},{"location":"project_structure/#repository-organization","title":"Repository Organization","text":"<ul> <li>\u2705 Separation of concerns - docs, scripts, web, k8s separated</li> <li>\u2705 Consistent naming - kebab-case for files and directories</li> <li>\u2705 Logical grouping - related files in same directories</li> <li>\u2705 Clear entry points - obvious starting scripts</li> </ul>"},{"location":"project_structure/#documentation-strategy_1","title":"Documentation Strategy","text":"<ul> <li>\u2705 Single source of truth - all docs in <code>docs/</code></li> <li>\u2705 Cross-linked - documents reference each other appropriately</li> <li>\u2705 Hierarchical - README \u2192 specific guides</li> <li>\u2705 Practical focus - emphasizes fresh Mac laptop workflow</li> </ul>"},{"location":"project_structure/#script-organization","title":"Script Organization","text":"<ul> <li>\u2705 Executable permissions maintained across moves</li> <li>\u2705 Relative path updates for new structure</li> <li>\u2705 Consistent interfaces - all scripts callable from project root</li> <li>\u2705 Clear dependencies - scripts reference correct paths</li> </ul>"},{"location":"project_structure/#web-application-structure","title":"Web Application Structure","text":"<ul> <li>\u2705 Self-contained - all web files in dedicated directory</li> <li>\u2705 Proper path handling - scripts work from any location</li> <li>\u2705 Clear entry point - single startup script</li> </ul>"},{"location":"project_structure/#enterprise-considerations","title":"\ud83c\udfe2 Enterprise Considerations","text":"<p>This structure supports enterprise adoption by: - Clear separation of development vs production components - Documented pathways from local to enterprise deployment - Modular organization for team collaboration - Best practices that scale to larger projects</p> <p>The organized structure makes it easy for teams to: 1. Onboard new developers with clear entry points 2. Maintain documentation in centralized location 3. Extend functionality with consistent patterns 4. Deploy to production using organized Helm charts</p>"},{"location":"quick_start_workload_integration/","title":"Quick Start: Local Workload Integration","text":"<p>Get your first workload talking with SPIFFE identities on your local development machine! This guide walks you through adding a new workload to your local SPIRE setup step-by-step.</p>"},{"location":"quick_start_workload_integration/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to prepare a workload for SPIFFE integration</li> <li>How to register the workload with your local SPIRE server</li> <li>How to verify everything is working</li> <li>How to use SPIFFE identities in your code</li> </ul>"},{"location":"quick_start_workload_integration/#prerequisites","title":"Prerequisites","text":"<p>\u2705 Fresh install completed: Run <code>./scripts/fresh-install.sh</code> first \u2705 Local SPIRE running: SPIRE Server and Agent pods should be healthy \u2705 kubectl working: You can run <code>kubectl get pods</code></p>"},{"location":"quick_start_workload_integration/#step-1-prepare-your-workload","title":"Step 1: Prepare Your Workload","text":"<p>First, let's set up your workload to communicate with SPIRE. Add this configuration to your Kubernetes deployment:</p> <pre><code># Add to your deployment spec\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-test-service\n  namespace: spire-workload\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: my-test-service\n  template:\n    metadata:\n      labels:\n        app: my-test-service\n        service: web-api\n    spec:\n      serviceAccountName: my-test-service\n      containers:\n      - name: my-test-service\n        image: your-app:latest\n        env:\n        # This tells your app where to find the SPIRE agent socket\n        - name: SPIFFE_ENDPOINT_SOCKET\n          value: \"unix:///run/spire/sockets/agent.sock\"\n        volumeMounts:\n        - name: spire-agent-socket\n          mountPath: /run/spire/sockets\n          readOnly: true\n      volumes:\n      # Mount the SPIRE agent socket into your container\n      - name: spire-agent-socket\n        hostPath:\n          path: /run/spire/sockets\n          type: Directory\n---\n# Create a ServiceAccount for your workload\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: my-test-service\n  namespace: spire-workload\n</code></pre>"},{"location":"quick_start_workload_integration/#step-2-install-spiffe-sdk-in-your-app","title":"Step 2: Install SPIFFE SDK in Your App","text":"<p>Choose your language and add the SPIFFE library:</p> <p>Go: <pre><code>go get github.com/spiffe/go-spiffe/v2\n</code></pre></p> <p>Python: <pre><code>pip install pyspiffe\n</code></pre></p> <p>Java: <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.spiffe&lt;/groupId&gt;\n    &lt;artifactId&gt;java-spiffe-core&lt;/artifactId&gt;\n    &lt;version&gt;0.8.4&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p>"},{"location":"quick_start_workload_integration/#step-3-register-your-workload-with-spire","title":"Step 3: Register Your Workload with SPIRE","text":"<p>Now register your workload so SPIRE knows about it. Use the handy registration script:</p> <pre><code># Register your test service\n./scripts/register-workload.sh \\\n  --name my-test-service \\\n  --service-account my-test-service \\\n  --workload-ns production \\\n  --service-type web-api\n\n# That's it! The script handles all the SPIRE server communication for you\n</code></pre>"},{"location":"quick_start_workload_integration/#option-b-manual-registration-for-learning","title":"Option B: Manual Registration (For Learning)","text":"<p>Want to see what's happening under the hood? You can register manually:</p> <pre><code># Connect to your local SPIRE server\nkubectl exec -n spire-server -it deployment/spire-server -- /bin/sh\n\n# Create the registration entry\n/opt/spire/bin/spire-server entry create \\\n  -spiffeID spiffe://example.org/workload/my-test-service \\\n  -parentID spiffe://example.org/spire/agent/k8s_psat/spire-server-cluster \\\n  -selector k8s:ns:spire-workload \\\n  -selector k8s:sa:my-test-service \\\n  -selector k8s:pod-label:app:my-test-service \\\n  -ttl 1800\n\n# Check that it worked\n/opt/spire/bin/spire-server entry show\n</code></pre>"},{"location":"quick_start_workload_integration/#step-4-deploy-and-test","title":"Step 4: Deploy and Test","text":"<p>Deploy your workload and see if it can get SPIFFE identities:</p> <pre><code># Deploy your workload\nkubectl apply -f your-workload.yaml\n\n# Check that pods are running\nkubectl get pods -n spire-workload -l app=my-test-service\n\n# Look at the logs to see if SPIFFE is working\nkubectl logs -n spire-workload -l app=my-test-service\n\n# Test SPIRE agent socket access\nkubectl exec -n spire-workload -it deployment/my-test-service -- \\\n  ls -la /run/spire/sockets/\n</code></pre>"},{"location":"quick_start_workload_integration/#step-5-use-spiffe-in-your-code","title":"Step 5: Use SPIFFE in Your Code","text":"<p>Here's how to actually use SPIFFE identities in your application:</p>"},{"location":"quick_start_workload_integration/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"quick_start_workload_integration/#issue-no-spire-agent-socket-found","title":"Issue: \"No SPIRE agent socket found\"","text":"<p>Solution: Check that SPIRE agent is running on the node and volume mount is correct.</p>"},{"location":"quick_start_workload_integration/#issue-registration-entry-not-found","title":"Issue: \"Registration entry not found\"","text":"<p>Solution: Verify the registration entry exists and selectors match pod labels exactly.</p>"},{"location":"quick_start_workload_integration/#issue-permission-denied-accessing-socket","title":"Issue: \"Permission denied accessing socket\"","text":"<p>Solution: Check pod security context and ensure proper user/group settings.</p>"},{"location":"quick_start_workload_integration/#go-example-get-your-spiffe-identity","title":"Go Example - Get Your SPIFFE Identity","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"github.com/spiffe/go-spiffe/v2/workloadapi\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    // Connect to SPIRE agent\n    source, err := workloadapi.NewX509Source(ctx)\n    if err != nil {\n        log.Fatalf(\"Unable to create X509Source: %v\", err)\n    }\n    defer source.Close()\n\n    // Get your SPIFFE identity\n    svid, err := source.GetX509SVID()\n    if err != nil {\n        log.Fatalf(\"Unable to fetch SVID: %v\", err)\n    }\n\n    // Print your identity!\n    fmt.Printf(\"\ud83c\udf89 My SPIFFE ID: %s\\n\", svid.ID)\n    fmt.Printf(\"Certificate expires: %s\\n\", svid.Certificates[0].NotAfter)\n}\n</code></pre>"},{"location":"quick_start_workload_integration/#python-example-get-your-spiffe-identity","title":"Python Example - Get Your SPIFFE Identity","text":"<pre><code>from pyspiffe import WorkloadApiClient\n\ndef main():\n    try:\n        # Connect to SPIRE agent\n        client = WorkloadApiClient()\n\n        # Get your SPIFFE identity\n        svid = client.fetch_x509_svid()\n\n        # Print your identity!\n        print(f\"\ud83c\udf89 My SPIFFE ID: {svid.spiffe_id}\")\n        print(f\"Certificate expires: {svid.leaf_certificate.not_valid_after}\")\n\n    finally:\n        client.close()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"quick_start_workload_integration/#common-issues-and-quick-fixes","title":"Common Issues and Quick Fixes","text":""},{"location":"quick_start_workload_integration/#no-spire-agent-socket-found","title":"\ud83d\udea8 \"No SPIRE agent socket found\"","text":"<p>Quick Fix: Check that your volume mount is correct and SPIRE agent is running: <pre><code>kubectl get pods -n spire-system  # Should show spire-agent pods\n</code></pre></p>"},{"location":"quick_start_workload_integration/#registration-entry-not-found","title":"\ud83d\udea8 \"Registration entry not found\"","text":"<p>Quick Fix: Verify your workload is registered: <pre><code>kubectl exec -n spire-server deployment/spire-server -- \\\n  /opt/spire/bin/spire-server entry show\n</code></pre></p>"},{"location":"quick_start_workload_integration/#permission-denied-accessing-socket","title":"\ud83d\udea8 \"Permission denied accessing socket\"","text":"<p>Quick Fix: Make sure your container can access the socket: <pre><code>kubectl exec -n spire-workload -it deployment/my-test-service -- \\\n  ls -la /run/spire/sockets/\n</code></pre></p>"},{"location":"quick_start_workload_integration/#whats-next","title":"What's Next?","text":"<p>\ud83c\udfaf Now that you have SPIFFE working:</p> <ol> <li>Try service-to-service mTLS - Use your SPIFFE identity to secure communication between services</li> <li>Experiment with policies - Create different registration entries with different selectors</li> <li>Monitor certificate rotation - Watch how SPIRE automatically rotates your certificates</li> <li>Explore federation - Learn how to connect multiple SPIRE deployments</li> </ol>"},{"location":"quick_start_workload_integration/#quick-commands-reference","title":"Quick Commands Reference","text":"<pre><code># Check SPIRE health\nkubectl get pods -n spire-server\nkubectl get pods -n spire-system\n\n# View all registered workloads\nkubectl exec -n spire-server deployment/spire-server -- \\\n  /opt/spire/bin/spire-server entry show\n\n# Register a new workload\n./scripts/register-workload.sh --name my-app --service-account my-app --workload-ns production\n\n# Check workload logs\nkubectl logs -n spire-workload -l app=my-test-service\n\n# Test socket access\nkubectl exec -n spire-workload deployment/my-test-service -- ls -la /run/spire/sockets/\n</code></pre>"},{"location":"quick_start_workload_integration/#learn-more","title":"Learn More","text":"<ul> <li>\ud83d\udcd6 Comprehensive Guide: Workload Integration Guide</li> <li>\ud83d\udd27 Troubleshooting: Common Issues and Solutions </li> <li>\ud83c\udfd7\ufe0f Architecture: How SPIRE Works</li> <li>\ud83d\udcda SPIFFE Docs: Official SPIFFE Documentation</li> </ul>"},{"location":"spiffe_service_integration_guide/","title":"SPIFFE Service Integration Guide","text":""},{"location":"spiffe_service_integration_guide/#for-service-owners-integrating-spiffe-identity-into-your-applications","title":"\ud83c\udfaf For Service Owners: Integrating SPIFFE Identity into Your Applications","text":"<p>This guide provides everything service owners need to know about integrating SPIFFE (Secure Production Identity Framework For Everyone) into their applications to obtain and use SPIFFE IDs for secure service-to-service communication.</p>"},{"location":"spiffe_service_integration_guide/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ol> <li>Understanding SPIFFE</li> <li>Prerequisites</li> <li>Service Registration Process</li> <li>Implementation Guide</li> <li>Code Examples</li> <li>Verification &amp; Testing</li> <li>Troubleshooting</li> <li>Best Practices</li> <li>Support &amp; Resources</li> </ol>"},{"location":"spiffe_service_integration_guide/#understanding-spiffe","title":"\ud83d\udd0d Understanding SPIFFE","text":""},{"location":"spiffe_service_integration_guide/#what-is-spiffe","title":"What is SPIFFE?","text":"<p>SPIFFE provides a secure identity framework for services in dynamic and heterogeneous environments. It eliminates the need for application-level authentication configurations and secrets.</p>"},{"location":"spiffe_service_integration_guide/#key-benefits","title":"Key Benefits","text":"<ul> <li>Automatic Identity Management: No more hardcoded secrets or certificates</li> <li>Zero Trust Security: Cryptographic identity verification for all services</li> <li>Dynamic Environments: Works seamlessly with containers, VMs, and cloud platforms</li> <li>Industry Standard: CNCF graduated project with broad ecosystem support</li> </ul>"},{"location":"spiffe_service_integration_guide/#core-concepts","title":"Core Concepts","text":"<ul> <li>SPIFFE ID: Unique identity URI (e.g., <code>spiffe://example.org/workload/user-service</code>)</li> <li>SVID: SPIFFE Verifiable Identity Document (X.509 certificate or JWT token)</li> <li>Workload API: API for retrieving SVIDs and trust bundles</li> <li>SPIRE: Production-ready implementation of SPIFFE</li> </ul>"},{"location":"spiffe_service_integration_guide/#prerequisites","title":"\u2705 Prerequisites","text":"<p>Before integrating SPIFFE into your service, ensure you have:</p>"},{"location":"spiffe_service_integration_guide/#infrastructure-requirements","title":"Infrastructure Requirements","text":"<ul> <li>\u2705 SPIRE Server: Deployed and operational</li> <li>\u2705 SPIRE Agent: Running on nodes where your service will deploy</li> <li>\u2705 Kubernetes/Container Platform: If deploying in containerized environment</li> <li>\u2705 Network Access: Service can reach SPIRE Agent's Workload API</li> </ul>"},{"location":"spiffe_service_integration_guide/#development-requirements","title":"Development Requirements","text":"<ul> <li>\u2705 SPIFFE Library: Available for your programming language</li> <li>\u2705 Build Pipeline: Ability to update your service's deployment configuration</li> <li>\u2705 Testing Environment: Access to test SPIFFE integration before production</li> </ul>"},{"location":"spiffe_service_integration_guide/#access-requirements","title":"Access Requirements","text":"<ul> <li>\u2705 Registration Permissions: Ability to register your service with SPIRE</li> <li>\u2705 Deployment Configuration: Access to update Kubernetes manifests or deployment configs</li> </ul>"},{"location":"spiffe_service_integration_guide/#service-registration-process","title":"\ud83d\udcdd Service Registration Process","text":""},{"location":"spiffe_service_integration_guide/#step-1-plan-your-spiffe-id-structure","title":"Step 1: Plan Your SPIFFE ID Structure","text":"<p>Your SPIFFE ID should follow a consistent naming convention:</p> <pre><code>spiffe://&lt;trust-domain&gt;/&lt;workload-type&gt;/&lt;service-name&gt;\n</code></pre> <p>Examples: - <code>spiffe://example.org/workload/user-service</code> - User management and authentication - <code>spiffe://example.org/workload/payment-api</code> - Payment processing service - <code>spiffe://example.org/workload/inventory-service</code> - Inventory management system</p>"},{"location":"spiffe_service_integration_guide/#step-2-determine-your-selectors","title":"Step 2: Determine Your Selectors","text":"<p>Selectors identify your workload to SPIRE. Common Kubernetes selectors:</p> <pre><code># Kubernetes namespace and service account\nk8s:ns:spire-workload\nk8s:sa:user-service\n\n# Pod labels\nk8s:pod-label:app:user-service\nk8s:pod-label:version:v1.2.0\n\n# Container image\nk8s:container-image:my-company/user-service:latest\n</code></pre>"},{"location":"spiffe_service_integration_guide/#step-3-create-registration-entry","title":"Step 3: Create Registration Entry","text":"<p>\ud83c\udfe2 Enterprise Environment: Submit a registration request to your SPIRE administrator \ud83c\udfe0 Local Environment: You'll run the registration command directly on your local setup</p> <p>For Enterprise/Production Environments: Submit a registration request to your SPIRE administrator with:</p> <pre><code># Registration Request Template for User Service\nservice_name: \"user-service\"\nspiffe_id: \"spiffe://example.org/workload/user-service\"\nparent_id: \"spiffe://example.org/spire/agent/k8s_psat/spire-server-cluster\"\nselectors:\n  - \"k8s:ns:spire-workload\"\n  - \"k8s:sa:user-service\"\n  - \"k8s:pod-label:app:user-service\"\n  - \"k8s:pod-label:service:user-management\"\nttl: 1800  # 30 minutes (adjust based on your needs)\n</code></pre> <p>Enterprise Registration Command (SPIRE Administrator runs): <pre><code>kubectl --context spire-server-cluster -n spire exec spire-server-0 -- \\\n  /opt/spire/bin/spire-server entry create \\\n  -spiffeID spiffe://example.org/workload/user-service \\\n  -parentID spiffe://example.org/spire/agent/k8s_psat/spire-server-cluster \\\n  -selector k8s:ns:spire-workload \\\n  -selector k8s:sa:user-service \\\n  -selector k8s:pod-label:app:user-service \\\n  -selector k8s:pod-label:service:user-management \\\n  -ttl 1800\n</code></pre></p> <p>For Local Development Environment: Since you have direct access to your local SPIRE server, you can create the registration entry yourself:</p> <pre><code># You run this directly on your local setup:\nkubectl --context workload-cluster -n spire-server exec spire-server-0 -- \\\n  /opt/spire/bin/spire-server entry create \\\n  -spiffeID spiffe://example.org/workload/user-service \\\n  -parentID spiffe://example.org/spire/agent/k8s_psat/spire-server-cluster \\\n  -selector k8s:ns:spire-workload \\\n  -selector k8s:sa:user-service \\\n  -selector k8s:pod-label:app:user-service \\\n  -selector k8s:pod-label:service:user-management \\\n  -ttl 1800\n\n# Verify the registration worked:\nkubectl --context workload-cluster -n spire-server exec spire-server-0 -- \\\n  /opt/spire/bin/spire-server entry show\n</code></pre> <p>\ud83d\udca1 Local Development Advantage: In your local environment, you have full control over SPIRE registration entries. This makes testing and iteration much faster than enterprise approval workflows!</p>"},{"location":"spiffe_service_integration_guide/#implementation-guide","title":"\ud83d\udee0\ufe0f Implementation Guide","text":""},{"location":"spiffe_service_integration_guide/#architecture-overview","title":"Architecture Overview","text":"sequenceDiagram     participant YS as Your Service     participant SA as SPIRE Agent     participant SS as SPIRE Server      YS-&gt;&gt;SA: 1. Request SVID     SA-&gt;&gt;SS: 2. Validate Workload     SS-&gt;&gt;SA: 3. Issue SVID Certificate     SA-&gt;&gt;YS: 4. Receive SVID     Note over YS: 5. Use for mTLS      %% Consistent styling     participant YS     participant SA     participant SS"},{"location":"spiffe_service_integration_guide/#integration-steps","title":"Integration Steps","text":""},{"location":"spiffe_service_integration_guide/#1-add-spiffe-library-dependency","title":"1. Add SPIFFE Library Dependency","text":"<p>Choose the appropriate library for your language:</p> Language Library Package Go go-spiffe <code>github.com/spiffe/go-spiffe/v2</code> Java java-spiffe <code>io.spiffe:spiffe-lib</code> Python py-spiffe <code>pyspiffe</code> Node.js node-spiffe <code>node-spiffe</code> Rust spiffe-rust <code>spiffe</code> C++ cpp-spiffe Build from source"},{"location":"spiffe_service_integration_guide/#2-update-deployment-configuration","title":"2. Update Deployment Configuration","text":"<p>Kubernetes Deployment Example: <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-service\n  namespace: spire-workload\nspec:\n  replicas: 3  # Production scaling; learning env uses 1\n  selector:\n    matchLabels:\n      app: user-service\n  template:\n    metadata:\n      labels:\n        app: user-service\n        version: v1.2.0\n        service: user-management\n    spec:\n      serviceAccountName: user-service  # Important: Matches selector\n      containers:\n      - name: user-service\n        image: my-company/user-service:v1.2.0\n        ports:\n        - containerPort: 8080\n        env:\n        - name: SPIFFE_ENDPOINT_SOCKET\n          value: \"unix:///run/spire/sockets/agent.sock\"\n        volumeMounts:\n        - name: spire-agent-socket\n          mountPath: /run/spire/sockets\n          readOnly: true\n      volumes:\n      - name: spire-agent-socket\n        hostPath:\n          path: /run/spire/sockets\n          type: Directory\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: user-service\n  namespace: spire-workload\n</code></pre></p>"},{"location":"spiffe_service_integration_guide/#3-initialize-spiffe-in-your-application","title":"3. Initialize SPIFFE in Your Application","text":"<p>The core pattern for all languages:</p> <ol> <li>Connect to Workload API</li> <li>Fetch SVID and Trust Bundle</li> <li>Configure TLS/mTLS</li> <li>Handle SVID Rotation</li> </ol>"},{"location":"spiffe_service_integration_guide/#code-examples","title":"\ud83d\udcbb Code Examples","text":""},{"location":"spiffe_service_integration_guide/#go-implementation","title":"Go Implementation","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"crypto/tls\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"time\"\n\n    \"github.com/spiffe/go-spiffe/v2/spiffeid\"\n    \"github.com/spiffe/go-spiffe/v2/spiffetls/tlsconfig\"\n    \"github.com/spiffe/go-spiffe/v2/workloadapi\"\n)\n\nfunc main() {\n    ctx, cancel := context.WithCancel(context.Background())\n    defer cancel()\n\n    // Create a SPIFFE Workload API client\n    source, err := workloadapi.NewX509Source(ctx)\n    if err != nil {\n        log.Fatalf(\"Unable to create X509Source: %v\", err)\n    }\n    defer source.Close()\n\n    // Create TLS configuration\n    tlsConfig := tlsconfig.MTLSServerConfig(source, source, tlsconfig.AuthorizeAny())\n\n    // Create HTTPS server with mTLS\n    server := &amp;http.Server{\n        Addr:      \":8443\",\n        TLSConfig: tlsConfig,\n    }\n\n    http.HandleFunc(\"/health\", healthHandler)\n    http.HandleFunc(\"/api/data\", dataHandler(source))\n\n    log.Println(\"Server starting on :8443 with SPIFFE mTLS\")\n    log.Fatal(server.ListenAndServeTLS(\"\", \"\"))\n}\n\nfunc healthHandler(w http.ResponseWriter, r *http.Request) {\n    w.WriteHeader(http.StatusOK)\n    fmt.Fprintf(w, `{\"status\": \"healthy\", \"timestamp\": \"%s\"}`, time.Now().Format(time.RFC3339))\n}\n\nfunc dataHandler(source *workloadapi.X509Source) http.HandlerFunc {\n    return func(w http.ResponseWriter, r *http.Request) {\n        // Get current SVID\n        svid, err := source.GetX509SVID()\n        if err != nil {\n            http.Error(w, \"Failed to get SVID\", http.StatusInternalServerError)\n            return\n        }\n\n        w.Header().Set(\"Content-Type\", \"application/json\")\n        fmt.Fprintf(w, `{\n            \"spiffe_id\": \"%s\",\n            \"serial_number\": \"%s\",\n            \"not_after\": \"%s\"\n        }`, \n            svid.ID.String(), \n            svid.Certificates[0].SerialNumber.String(),\n            svid.Certificates[0].NotAfter.Format(time.RFC3339))\n    }\n}\n</code></pre>"},{"location":"spiffe_service_integration_guide/#java-implementation","title":"Java Implementation","text":"<pre><code>package com.example.service;\n\nimport io.spiffe.exception.SocketEndpointAddressException;\nimport io.spiffe.workloadapi.DefaultWorkloadApiClient;\nimport io.spiffe.workloadapi.WorkloadApiClient;\nimport io.spiffe.workloadapi.X509Source;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.net.ssl.SSLContext;\nimport java.security.cert.X509Certificate;\nimport java.util.Map;\n\n@SpringBootApplication\npublic class MyServiceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MyServiceApplication.class, args);\n    }\n}\n\n@Configuration\nclass SpiffeConfig {\n\n    @Bean\n    public X509Source x509Source() throws SocketEndpointAddressException {\n        WorkloadApiClient client = DefaultWorkloadApiClient.newClient();\n        return X509Source.newSource(client);\n    }\n\n    @Bean\n    public SSLContext sslContext(X509Source x509Source) {\n        return x509Source.getSSLContext();\n    }\n}\n\n@RestController\nclass ApiController {\n\n    private final X509Source x509Source;\n\n    public ApiController(X509Source x509Source) {\n        this.x509Source = x509Source;\n    }\n\n    @GetMapping(\"/health\")\n    public Map&lt;String, Object&gt; health() {\n        return Map.of(\n            \"status\", \"healthy\",\n            \"timestamp\", System.currentTimeMillis()\n        );\n    }\n\n    @GetMapping(\"/api/identity\")\n    public Map&lt;String, Object&gt; getIdentity() {\n        try {\n            X509Certificate cert = x509Source.getX509SVID().getChain()[0];\n            return Map.of(\n                \"spiffe_id\", x509Source.getX509SVID().getSpiffeId().toString(),\n                \"serial_number\", cert.getSerialNumber().toString(),\n                \"not_after\", cert.getNotAfter().toString()\n            );\n        } catch (Exception e) {\n            return Map.of(\"error\", \"Failed to get SVID: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"spiffe_service_integration_guide/#python-implementation","title":"Python Implementation","text":"<pre><code>import asyncio\nimport json\nimport ssl\nfrom datetime import datetime\nfrom aiohttp import web, ClientSession\nfrom pyspiffe import workloadapi\nfrom pyspiffe.spiffe_id import SpiffeId\n\nclass SpiffeService:\n    def __init__(self):\n        self.x509_source = None\n\n    async def initialize(self):\n        \"\"\"Initialize SPIFFE X509 source\"\"\"\n        self.x509_source = await workloadapi.fetch_x509_svid_async()\n\n    async def get_ssl_context(self):\n        \"\"\"Create SSL context with SPIFFE certificates\"\"\"\n        if not self.x509_source:\n            await self.initialize()\n\n        ssl_context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        ssl_context.load_cert_chain(\n            certfile=None,  # Will use in-memory certificates\n            keyfile=None\n        )\n        return ssl_context\n\n    async def health_handler(self, request):\n        \"\"\"Health check endpoint\"\"\"\n        return web.json_response({\n            \"status\": \"healthy\",\n            \"timestamp\": datetime.utcnow().isoformat()\n        })\n\n    async def identity_handler(self, request):\n        \"\"\"Return current SPIFFE identity\"\"\"\n        try:\n            if not self.x509_source:\n                await self.initialize()\n\n            svid = self.x509_source.svid\n            cert = svid.cert\n\n            return web.json_response({\n                \"spiffe_id\": str(svid.spiffe_id),\n                \"serial_number\": str(cert.serial_number),\n                \"not_after\": cert.not_valid_after.isoformat()\n            })\n        except Exception as e:\n            return web.json_response(\n                {\"error\": f\"Failed to get SVID: {str(e)}\"}, \n                status=500\n            )\n\nasync def create_app():\n    \"\"\"Create and configure the web application\"\"\"\n    service = SpiffeService()\n    await service.initialize()\n\n    app = web.Application()\n    app.router.add_get('/health', service.health_handler)\n    app.router.add_get('/api/identity', service.identity_handler)\n\n    return app\n\nif __name__ == '__main__':\n    app = asyncio.run(create_app())\n    web.run_app(app, host='0.0.0.0', port=8080, ssl_context=None)\n</code></pre>"},{"location":"spiffe_service_integration_guide/#nodejs-implementation","title":"Node.js Implementation","text":"<pre><code>const express = require('express');\nconst spiffe = require('node-spiffe');\nconst https = require('https');\n\nclass SpiffeService {\n    constructor() {\n        this.x509Source = null;\n        this.app = express();\n        this.setupRoutes();\n    }\n\n    async initialize() {\n        try {\n            // Initialize SPIFFE Workload API client\n            this.x509Source = await spiffe.WorkloadApi.newX509Source();\n            console.log('SPIFFE X509 source initialized successfully');\n        } catch (error) {\n            console.error('Failed to initialize SPIFFE:', error);\n            throw error;\n        }\n    }\n\n    setupRoutes() {\n        this.app.get('/health', (req, res) =&gt; {\n            res.json({\n                status: 'healthy',\n                timestamp: new Date().toISOString()\n            });\n        });\n\n        this.app.get('/api/identity', async (req, res) =&gt; {\n            try {\n                if (!this.x509Source) {\n                    return res.status(500).json({ error: 'SPIFFE not initialized' });\n                }\n\n                const svid = await this.x509Source.getX509SVID();\n                const cert = svid.certificates[0];\n\n                res.json({\n                    spiffe_id: svid.spiffeId.toString(),\n                    serial_number: cert.serialNumber,\n                    not_after: cert.validTo\n                });\n            } catch (error) {\n                res.status(500).json({ \n                    error: `Failed to get SVID: ${error.message}` \n                });\n            }\n        });\n    }\n\n    async startServer() {\n        await this.initialize();\n\n        // Create HTTPS server with SPIFFE mTLS\n        const tlsOptions = {\n            key: this.x509Source.getPrivateKey(),\n            cert: this.x509Source.getCertificates(),\n            ca: this.x509Source.getTrustBundle(),\n            requestCert: true,\n            rejectUnauthorized: false // Handle authorization in application logic\n        };\n\n        const server = https.createServer(tlsOptions, this.app);\n\n        server.listen(8443, () =&gt; {\n            console.log('Server running on https://localhost:8443 with SPIFFE mTLS');\n        });\n\n        // Handle SVID rotation\n        this.x509Source.onSVIDUpdate(() =&gt; {\n            console.log('SVID updated, refreshing server certificates');\n            // In production, you'd update the server's TLS configuration here\n        });\n    }\n}\n\n// Start the service\nconst service = new SpiffeService();\nservice.startServer().catch(console.error);\n</code></pre>"},{"location":"spiffe_service_integration_guide/#verification-testing","title":"\u2705 Verification &amp; Testing","text":""},{"location":"spiffe_service_integration_guide/#step-1-verify-registration","title":"Step 1: Verify Registration","text":"<p>Check that your service is registered in SPIRE:</p> <pre><code># Connect to SPIRE server\nSERVER_POD=$(kubectl --context spire-server-cluster -n spire get pod -l app=spire-server -o jsonpath='{.items[0].metadata.name}')\n\n# List all entries and find yours\nkubectl --context spire-server-cluster -n spire exec $SERVER_POD -- \\\n  /opt/spire/bin/spire-server entry show\n\n# Look for your SPIFFE ID in the output:\n# Entry ID         : &lt;entry-id&gt;\n# SPIFFE ID        : spiffe://example.org/workload/user-service\n# Parent ID        : spiffe://example.org/spire/agent/k8s_psat/spire-server-cluster\n# Revision         : 0\n# TTL              : 1800\n# Selector         : k8s:ns:spire-workload\n# Selector         : k8s:sa:user-service\n</code></pre> <p>\ud83d\udca1 Dashboard Verification (Local Environment Only): You can also verify your service registration and SPIFFE identity status using the real-time dashboard:</p> <ol> <li>Open the Dashboard: http://localhost:3000/web-dashboard.html</li> <li>Check Service Registration: Look for your service in the \"Workload Services\" section</li> <li>Verify SPIFFE ID: Click on your service pod to see detailed SPIFFE identity information</li> <li>Monitor Certificate Status: Watch for certificate rotation and identity updates in real-time</li> <li>View Service Connectivity: See how your service connects to other SPIFFE-enabled services</li> </ol> <p>\ud83c\udfaf Dashboard Benefits: The visual dashboard provides an intuitive way to verify that your service is properly registered, receiving certificates, and communicating with other services - all without running command-line tools!</p>"},{"location":"spiffe_service_integration_guide/#step-2-test-svid-retrieval","title":"Step 2: Test SVID Retrieval","text":"<p>Create a test container to verify your service can get SVIDs:</p> <pre><code># Deploy test pod with same selectors\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: spiffe-test-user-service\n  namespace: spire-workload\n  labels:\n    app: user-service\nspec:\n  serviceAccountName: user-service\n  containers:\n  - name: spiffe-helper\n    image: spiffe/spiffe-helper:latest\n    command: [\"sh\", \"-c\", \"while true; do sleep 30; done\"]\n    env:\n    - name: SPIFFE_ENDPOINT_SOCKET\n      value: \"unix:///run/spire/sockets/agent.sock\"\n    volumeMounts:\n    - name: spire-agent-socket\n      mountPath: /run/spire/sockets\n      readOnly: true\n  volumes:\n  - name: spire-agent-socket\n    hostPath:\n      path: /run/spire/sockets\n      type: Directory\nEOF\n\n# Test SVID retrieval\nkubectl exec -it spiffe-test-user-service -- \\\n  /opt/spiffe-helper/spiffe-helper api fetch x509\n</code></pre> <p>Expected Output: <pre><code>SVID 0:\n  SPIFFE ID: spiffe://example.org/workload/user-service\n  Hint: internal\n  TTL: 1795\n  Trust Domain: example.org\n</code></pre></p>"},{"location":"spiffe_service_integration_guide/#step-3-service-health-check","title":"Step 3: Service Health Check","text":"<p>Test your service endpoints:</p> <pre><code># Port forward to your service\nkubectl port-forward -n spire-workload deployment/user-service 8080:8080\n\n# Test health endpoint\ncurl http://localhost:8080/health\n\n# Test identity endpoint\ncurl http://localhost:8080/api/identity\n</code></pre> <p>Expected Response: <pre><code>{\n  \"spiffe_id\": \"spiffe://example.org/workload/user-service\",\n  \"serial_number\": \"123456789\",\n  \"not_after\": \"2024-01-01T12:30:00Z\"\n}\n</code></pre></p>"},{"location":"spiffe_service_integration_guide/#step-4-mtls-verification","title":"Step 4: mTLS Verification","text":"<p>Test mutual TLS between services:</p> <pre><code># Create client certificate from SVID\nkubectl exec spiffe-test-user-service -- \\\n  /opt/spiffe-helper/spiffe-helper api fetch x509 \\\n  -write /tmp/\n\n# Test mTLS connection\nkubectl exec spiffe-test-user-service -- \\\n  curl --cert /tmp/svid.crt --key /tmp/key.pem \\\n       --cacert /tmp/bundle.crt \\\n       https://user-service.spire-workload.svc.cluster.local:8443/api/identity\n</code></pre>"},{"location":"spiffe_service_integration_guide/#step-5-monitor-spire-logs","title":"Step 5: Monitor SPIRE Logs","text":"<p>Check SPIRE agent logs for your workload:</p> <pre><code># Find agent pod\nAGENT_POD=$(kubectl --context workload-cluster -n spire get pod -l app=spire-agent -o jsonpath='{.items[0].metadata.name}')\n\n# Watch logs for your service attestation\nkubectl --context workload-cluster -n spire logs -f $AGENT_POD | grep \"user-service\"\n</code></pre> <p>Look for logs like: <pre><code>time=\"2024-01-01T10:00:00Z\" level=info msg=\"Attestation completed\" spiffe_id=\"spiffe://example.org/workload/user-service\"\ntime=\"2024-01-01T10:00:00Z\" level=info msg=\"SVID updated\" spiffe_id=\"spiffe://example.org/workload/user-service\"\n</code></pre></p>"},{"location":"spiffe_service_integration_guide/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"spiffe_service_integration_guide/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"spiffe_service_integration_guide/#issue-no-such-registration-entry","title":"Issue: \"no such registration entry\"","text":"<p>Symptoms: <pre><code>ERROR: could not get SVID: rpc error: code = PermissionDenied desc = no such registration entry\n</code></pre></p> <p>Solutions: 1. Verify registration entry exists 2. Check selectors match your deployment 3. Ensure service account name is correct 4. Verify namespace matches</p> <p>Debug Commands: <pre><code># Check your pod's actual selectors\nkubectl get pod &lt;your-pod&gt; -o yaml | grep -A 10 -B 10 -E \"(serviceAccount|labels)\"\n\n# Compare with registered selectors\nkubectl --context spire-server-cluster -n spire exec spire-server-0 -- \\\n  /opt/spire/bin/spire-server entry show -spiffeID spiffe://example.org/workload/user-service\n</code></pre></p>"},{"location":"spiffe_service_integration_guide/#issue-connection-refused-to-workload-api","title":"Issue: \"connection refused\" to Workload API","text":"<p>Symptoms: <pre><code>ERROR: connection refused: dial unix /run/spire/sockets/agent.sock: connect: connection refused\n</code></pre></p> <p>Solutions: 1. Verify SPIRE agent is running 2. Check socket mount path 3. Ensure agent socket permissions</p> <p>Debug Commands: <pre><code># Check agent status\nkubectl --context workload-cluster -n spire get pods -l app=spire-agent\n\n# Verify socket exists\nkubectl exec &lt;your-pod&gt; -- ls -la /run/spire/sockets/\n\n# Check agent logs\nkubectl --context workload-cluster -n spire logs -l app=spire-agent\n</code></pre></p>"},{"location":"spiffe_service_integration_guide/#issue-certificate-validation-errors","title":"Issue: Certificate validation errors","text":"<p>Symptoms: <pre><code>ERROR: x509: certificate signed by unknown authority\n</code></pre></p> <p>Solutions: 1. Ensure trust bundle is properly loaded 2. Verify certificate chain 3. Check CA rotation</p> <p>Debug Commands: <pre><code># Fetch and examine certificates\nkubectl exec spiffe-test-user-service -- \\\n  /opt/spiffe-helper/spiffe-helper api fetch x509 -write /tmp/\n\nkubectl exec spiffe-test-user-service -- \\\n  openssl x509 -in /tmp/svid.crt -text -noout\n</code></pre></p>"},{"location":"spiffe_service_integration_guide/#issue-svid-not-rotating","title":"Issue: SVID not rotating","text":"<p>Symptoms: - Certificate expires - Application fails to get new SVID</p> <p>Solutions: 1. Check TTL configuration 2. Verify rotation handling in code 3. Monitor agent connectivity</p> <p>Debug Commands: <pre><code># Check TTL settings\nkubectl --context spire-server-cluster -n spire exec spire-server-0 -- \\\n  /opt/spire/bin/spire-server entry show -spiffeID spiffe://example.org/workload/user-service\n\n# Monitor rotation events\nkubectl --context workload-cluster -n spire logs -f -l app=spire-agent | grep rotation\n</code></pre></p>"},{"location":"spiffe_service_integration_guide/#performance-issues","title":"Performance Issues","text":""},{"location":"spiffe_service_integration_guide/#high-cpumemory-usage","title":"High CPU/Memory Usage","text":"<p>Causes: - Frequent SVID fetching - Large trust bundles - Certificate validation overhead</p> <p>Solutions: <pre><code>// Cache SVIDs appropriately\nsource, err := workloadapi.NewX509Source(\n    ctx,\n    workloadapi.WithClientOptions(workloadapi.WithAddr(\"unix:///run/spire/sockets/agent.sock\")),\n)\n\n// Use efficient TLS configuration\ntlsConfig := &amp;tls.Config{\n    GetClientCertificate: func(*tls.CertificateRequestInfo) (*tls.Certificate, error) {\n        return source.GetX509SVID().Certificates, nil\n    },\n    GetConfigForClient: func(*tls.ClientHelloInfo) (*tls.Config, error) {\n        return tlsconfig.MTLSServerConfig(source, source, tlsconfig.AuthorizeAny()), nil\n    },\n}\n</code></pre></p>"},{"location":"spiffe_service_integration_guide/#debugging-tools","title":"Debugging Tools","text":""},{"location":"spiffe_service_integration_guide/#spiffe-helper-container","title":"SPIFFE Helper Container","text":"<p>Deploy a debugging container:</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: spiffe-debug\n  namespace: spire-workload\nspec:\n  serviceAccountName: user-service\n  containers:\n  - name: debug\n    image: spiffe/spiffe-helper:latest\n    command: [\"sleep\", \"3600\"]\n    env:\n    - name: SPIFFE_ENDPOINT_SOCKET\n      value: \"unix:///run/spire/sockets/agent.sock\"\n    volumeMounts:\n    - name: spire-agent-socket\n      mountPath: /run/spire/sockets\n      readOnly: true\n  volumes:\n  - name: spire-agent-socket\n    hostPath:\n      path: /run/spire/sockets\n</code></pre>"},{"location":"spiffe_service_integration_guide/#custom-debug-script","title":"Custom Debug Script","text":"<pre><code>#!/bin/bash\n# spiffe-debug.sh - Debug SPIFFE integration\n\necho \"=== SPIFFE Debug Information ===\"\necho \"Pod: $(hostname)\"\necho \"Namespace: $(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)\"\necho \"Service Account: $(cat /var/run/secrets/kubernetes.io/serviceaccount/token | cut -d'.' -f2 | base64 -d | jq -r .kubernetes.serviceaccount.name)\"\necho\n\necho \"=== Socket Check ===\"\nls -la /run/spire/sockets/\necho\n\necho \"=== SVID Fetch Test ===\"\n/opt/spiffe-helper/spiffe-helper api fetch x509 || echo \"FAILED\"\necho\n\necho \"=== Trust Bundle ===\"\n/opt/spiffe-helper/spiffe-helper api fetch bundle || echo \"FAILED\"\n</code></pre>"},{"location":"spiffe_service_integration_guide/#best-practices","title":"\u2b50 Best Practices","text":""},{"location":"spiffe_service_integration_guide/#security-best-practices","title":"Security Best Practices","text":""},{"location":"spiffe_service_integration_guide/#1-principle-of-least-privilege","title":"1. Principle of Least Privilege","text":"<pre><code># Use specific selectors\nselectors:\n  - \"k8s:ns:spire-workload\"           # Specific namespace\n  - \"k8s:sa:user-service\"          # Specific service account\n  - \"k8s:pod-label:app:user-service\" # Specific application\n  # Avoid overly broad selectors like just \"k8s:ns:spire-workload\"\n</code></pre>"},{"location":"spiffe_service_integration_guide/#2-appropriate-ttl-values","title":"2. Appropriate TTL Values","text":"<pre><code># Short TTL for high-security environments\n-ttl 900   # 15 minutes\n\n# Standard TTL for most services\n-ttl 1800  # 30 minutes\n\n# Longer TTL for batch/background services\n-ttl 3600  # 1 hour\n</code></pre>"},{"location":"spiffe_service_integration_guide/#3-secure-socket-access","title":"3. Secure Socket Access","text":"<pre><code># Ensure read-only socket mount\nvolumeMounts:\n- name: spire-agent-socket\n  mountPath: /run/spire/sockets\n  readOnly: true  # Important: prevent socket tampering\n</code></pre>"},{"location":"spiffe_service_integration_guide/#performance-best-practices","title":"Performance Best Practices","text":""},{"location":"spiffe_service_integration_guide/#1-efficient-svid-caching","title":"1. Efficient SVID Caching","text":"<pre><code>// Good: Reuse X509Source across requests\nvar globalSource *workloadapi.X509Source\n\nfunc init() {\n    var err error\n    globalSource, err = workloadapi.NewX509Source(context.Background())\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n\n// Bad: Creating new source for each request\nfunc badHandler(w http.ResponseWriter, r *http.Request) {\n    source, _ := workloadapi.NewX509Source(context.Background()) // DON'T DO THIS\n    defer source.Close()\n}\n</code></pre>"},{"location":"spiffe_service_integration_guide/#2-connection-pooling","title":"2. Connection Pooling","text":"<pre><code>// Configure HTTP client for SPIFFE mTLS\nclient := &amp;http.Client{\n    Transport: &amp;http.Transport{\n        TLSClientConfig: tlsconfig.MTLSClientConfig(source, source, tlsconfig.AuthorizeAny()),\n        MaxIdleConns:    100,\n        MaxIdleConnsPerHost: 10,\n    },\n    Timeout: 30 * time.Second,\n}\n</code></pre>"},{"location":"spiffe_service_integration_guide/#operational-best-practices","title":"Operational Best Practices","text":""},{"location":"spiffe_service_integration_guide/#1-health-checks","title":"1. Health Checks","text":"<pre><code>func spiffeHealthCheck() error {\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n    defer cancel()\n\n    _, err := globalSource.GetX509SVID()\n    return err\n}\n</code></pre>"},{"location":"spiffe_service_integration_guide/#2-monitoring-alerting","title":"2. Monitoring &amp; Alerting","text":"<pre><code># Add SPIFFE-specific metrics\nprometheus:\n  enabled: true\n  metrics:\n    - spiffe_svid_expiry_seconds\n    - spiffe_workload_api_errors_total\n    - spiffe_certificate_rotation_total\n</code></pre>"},{"location":"spiffe_service_integration_guide/#3-graceful-degradation","title":"3. Graceful Degradation","text":"<pre><code>func serviceHandler(w http.ResponseWriter, r *http.Request) {\n    // Try SPIFFE mTLS first\n    if svid, err := globalSource.GetX509SVID(); err == nil {\n        // Use SPIFFE identity\n        handleWithSpiffe(w, r, svid)\n    } else {\n        // Fallback for development/testing\n        log.Warn(\"SPIFFE unavailable, using fallback auth\")\n        handleWithFallback(w, r)\n    }\n}\n</code></pre>"},{"location":"spiffe_service_integration_guide/#development-best-practices","title":"Development Best Practices","text":""},{"location":"spiffe_service_integration_guide/#1-environment-configuration","title":"1. Environment Configuration","text":"<pre><code># Use environment-specific SPIFFE IDs\ndevelopment:\n  spiffe_id: \"spiffe://dev.example.org/workload/user-service\"\nstaging:\n  spiffe_id: \"spiffe://staging.example.org/workload/user-service\"\nproduction:\n  spiffe_id: \"spiffe://example.org/workload/user-service\"\n</code></pre>"},{"location":"spiffe_service_integration_guide/#2-testing-strategy","title":"2. Testing Strategy","text":"<pre><code>// Unit tests with mock SPIFFE\nfunc TestWithMockSpiffe(t *testing.T) {\n    mockSource := &amp;mockX509Source{\n        svid: createTestSVID(),\n    }\n    // Test your service logic\n}\n\n// Integration tests with real SPIFFE\nfunc TestWithRealSpiffe(t *testing.T) {\n    if testing.Short() {\n        t.Skip(\"Skipping integration test\")\n    }\n    // Test with actual SPIRE setup\n}\n</code></pre>"},{"location":"spiffe_service_integration_guide/#3-documentation","title":"3. Documentation","text":"<pre><code># Document your service's SPIFFE requirements\nmetadata:\n  annotations:\n    spiffe.io/spiffe-id: \"spiffe://example.org/workload/user-service\"\n    spiffe.io/selectors: \"k8s:ns:spire-workload,k8s:sa:user-service\"\n    spiffe.io/ttl: \"1800\"\n    spiffe.io/description: \"User management service requiring database access\"\n</code></pre>"},{"location":"spiffe_service_integration_guide/#support-resources","title":"\ud83c\udd98 Support &amp; Resources","text":""},{"location":"spiffe_service_integration_guide/#internal-support","title":"Internal Support","text":"<ul> <li>SPIRE Administration Team: Contact via <code>#spire-support</code> Slack channel</li> <li>Platform Engineering: For infrastructure and deployment issues</li> <li>Security Team: For policy and compliance questions</li> </ul>"},{"location":"spiffe_service_integration_guide/#getting-help","title":"Getting Help","text":""},{"location":"spiffe_service_integration_guide/#1-registration-requests","title":"1. Registration Requests","text":"<p>Submit registration requests via: - Jira Ticket: Create issue in <code>PLATFORM</code> project - Slack: Post in <code>#spire-registration</code> channel - Email: platform-team@company.com</p> <p>Required Information: - Service name and description - Desired SPIFFE ID - Target namespace and environment - Required selectors - TTL requirements - Contact information</p>"},{"location":"spiffe_service_integration_guide/#2-integration-support","title":"2. Integration Support","text":"<p>For development help: - Documentation: Internal SPIFFE wiki - Code Reviews: Tag <code>@spiffe-reviewers</code> in PRs - Office Hours: Tuesdays 2-3 PM, <code>#spire-office-hours</code></p>"},{"location":"spiffe_service_integration_guide/#3-incident-response","title":"3. Incident Response","text":"<p>For production issues: - Severity 1: Page on-call via PagerDuty - Severity 2-3: Create incident in <code>#incidents</code> channel - Normal Issues: Create support ticket</p>"},{"location":"spiffe_service_integration_guide/#useful-resources","title":"Useful Resources","text":""},{"location":"spiffe_service_integration_guide/#official-documentation","title":"Official Documentation","text":"<ul> <li>SPIFFE Specification</li> <li>SPIRE Documentation</li> <li>Workload API Specification</li> </ul>"},{"location":"spiffe_service_integration_guide/#code-examples-libraries","title":"Code Examples &amp; Libraries","text":"<ul> <li>Go SPIFFE Library</li> <li>Java SPIFFE Library</li> <li>Python SPIFFE Library</li> <li>Node.js SPIFFE Library</li> </ul>"},{"location":"spiffe_service_integration_guide/#community-resources","title":"Community Resources","text":"<ul> <li>SPIFFE Community</li> <li>SPIFFE Slack</li> <li>GitHub Discussions</li> </ul>"},{"location":"spiffe_service_integration_guide/#internal-tools","title":"Internal Tools","text":"<ul> <li>SPIRE Dashboard - Monitor your service's SPIFFE status</li> <li>Policy Viewer - Browse registration entries</li> <li>Metrics Dashboard - SPIFFE performance metrics</li> </ul>"},{"location":"spiffe_service_integration_guide/#quick-reference","title":"\ud83d\udcdd Quick Reference","text":""},{"location":"spiffe_service_integration_guide/#common-commands","title":"Common Commands","text":"<pre><code># Check if your service is registered\nkubectl --context spire-server-cluster -n spire exec spire-server-0 -- \\\n  /opt/spire/bin/spire-server entry show | grep \"user-service\"\n\n# Test SVID retrieval\nkubectl exec -it &lt;your-pod&gt; -- \\\n  curl --unix-socket /run/spire/sockets/agent.sock \\\n  http://localhost/v1/svids\n\n# Monitor SPIRE agent logs\nkubectl --context workload-cluster -n spire logs -f -l app=spire-agent\n\n# Debug certificate expiry\nkubectl exec &lt;your-pod&gt; -- \\\n  openssl s_client -connect localhost:8443 -servername user-service\n</code></pre>"},{"location":"spiffe_service_integration_guide/#environment-variables","title":"Environment Variables","text":"<pre><code># Standard SPIFFE environment variables\nexport SPIFFE_ENDPOINT_SOCKET=\"unix:///run/spire/sockets/agent.sock\"\nexport SPIFFE_TRUST_DOMAIN=\"example.org\"\n\n# Optional: Custom socket path\nexport SPIFFE_ENDPOINT_SOCKET=\"unix:///custom/path/agent.sock\"\n</code></pre>"},{"location":"spiffe_service_integration_guide/#troubleshooting-checklist","title":"Troubleshooting Checklist","text":"<ul> <li>[ ] Registration entry exists and matches selectors</li> <li>[ ] SPIRE agent is running and healthy</li> <li>[ ] Socket is mounted and accessible</li> <li>[ ] Service account matches selector</li> <li>[ ] Namespace matches selector</li> <li>[ ] Pod labels match selectors</li> <li>[ ] Network connectivity to agent</li> <li>[ ] Proper error handling in code</li> <li>[ ] SVID rotation is handled</li> <li>[ ] Certificates are not expired</li> </ul> <p>Need immediate help? Contact the platform team at <code>#spire-support</code> or create a support ticket.</p> <p>Contributing to this guide? Submit PRs to improve documentation for the entire engineering team.</p> <p>Last updated: January 2024 Version: 1.0</p>"},{"location":"spire_security_policies/","title":"SPIRE Security Policy Requirements","text":""},{"location":"spire_security_policies/#overview","title":"Overview","text":"<p>SPIRE deployments have specific Kubernetes security policy requirements due to their need for privileged operations and hostPath volumes for agent-workload communication. This document outlines the required namespace security policies for successful SPIRE deployment.</p>"},{"location":"spire_security_policies/#namespace-security-policy-mapping","title":"Namespace Security Policy Mapping","text":""},{"location":"spire_security_policies/#required-security-policies-by-component","title":"Required Security Policies by Component","text":"Namespace Component Security Policy Justification <code>spire-server</code> SPIRE Server, MySQL Database privileged Server requires persistent storage access and administrative operations <code>spire-system</code> SPIRE Agent privileged Agent requires hostPath volumes for Unix socket communication <code>spire-workload</code> Application Workloads privileged Workloads need access to SPIRE agent socket via hostPath volume"},{"location":"spire_security_policies/#security-policy-configuration","title":"Security Policy Configuration","text":""},{"location":"spire_security_policies/#privileged-policy-required-for-spire-components","title":"Privileged Policy (Required for SPIRE Components)","text":"<pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: spire-server  # or spire-system, spire-workload\n  labels:\n    name: spire-server\n    pod-security.kubernetes.io/enforce: privileged\n    pod-security.kubernetes.io/audit: privileged\n    pod-security.kubernetes.io/warn: privileged\n</code></pre>"},{"location":"spire_security_policies/#why-not-restrictedbaseline","title":"Why Not Restricted/Baseline?","text":"<p>Attempting to use <code>restricted</code> or <code>baseline</code> security policies will result in deployment failures:</p> <pre><code># Error with restricted policy:\nError creating: pods \"payment-api-56b57ccf95-xyz\" is forbidden: \nviolates PodSecurity \"restricted:latest\": restricted volume types \n(volume \"spire-agent-socket\" uses restricted volume type \"hostPath\")\n</code></pre>"},{"location":"spire_security_policies/#spire-specific-security-requirements","title":"SPIRE-Specific Security Requirements","text":""},{"location":"spire_security_policies/#1-hostpath-volume-requirements","title":"1. HostPath Volume Requirements","text":"<p>SPIRE agents communicate with workloads through Unix domain sockets mounted via hostPath volumes:</p> <pre><code># Required in workload deployments\nvolumes:\n- name: spire-agent-socket\n  hostPath:\n    path: /run/spire/sockets\n    type: Directory\n</code></pre> <p>Security Implication: HostPath volumes are considered privileged access and require <code>privileged</code> security policy.</p>"},{"location":"spire_security_policies/#2-service-account-requirements","title":"2. Service Account Requirements","text":"<p>Each SPIRE component requires specific service accounts with appropriate RBAC permissions:</p> <ul> <li>SPIRE Server: Cluster-level access for node attestation</li> <li>SPIRE Agent: Node-level access for workload discovery  </li> <li>Workload Services: Namespace-level access for identity operations</li> </ul>"},{"location":"spire_security_policies/#3-container-security-contexts","title":"3. Container Security Contexts","text":"<p>While namespaces require privileged policy, individual containers can still maintain security best practices:</p> <pre><code># Recommended container security context\nsecurityContext:\n  allowPrivilegeEscalation: false\n  runAsNonRoot: true\n  runAsUser: 1001\n  capabilities:\n    drop:\n    - ALL\n  seccompProfile:\n    type: RuntimeDefault\n</code></pre>"},{"location":"spire_security_policies/#deployment-validation","title":"Deployment Validation","text":""},{"location":"spire_security_policies/#pre-deployment-checks","title":"Pre-Deployment Checks","text":"<p>Before deploying SPIRE, verify namespace security policies:</p> <pre><code># Check current namespace security policy\nkubectl get namespace spire-workload -o yaml | grep pod-security\n\n# Expected output:\npod-security.kubernetes.io/enforce: privileged\npod-security.kubernetes.io/audit: privileged  \npod-security.kubernetes.io/warn: privileged\n</code></pre>"},{"location":"spire_security_policies/#common-deployment-issues","title":"Common Deployment Issues","text":""},{"location":"spire_security_policies/#issue-1-restricted-policy-on-workload-namespace","title":"Issue 1: Restricted Policy on Workload Namespace","text":"<p>Symptom:  <pre><code>deployment.apps/payment-api 0/3 0 0\nReplicaFailure: FailedCreate\n</code></pre></p> <p>Solution: Update namespace security policy to privileged</p>"},{"location":"spire_security_policies/#issue-2-service-account-not-found","title":"Issue 2: Service Account Not Found","text":"<p>Symptom: <pre><code>Error creating: serviceaccount \"payment-api\" not found\n</code></pre></p> <p>Solution: Ensure namespace allows pod creation (privileged policy) before service accounts can be used</p>"},{"location":"spire_security_policies/#validation-script","title":"Validation Script","text":"<pre><code>#!/bin/bash\n# validate-spire-security.sh\n\nNAMESPACES=(\"spire-server\" \"spire-system\" \"spire-workload\")\n\nfor ns in \"${NAMESPACES[@]}\"; do\n    echo \"Checking namespace: $ns\"\n    policy=$(kubectl get namespace $ns -o jsonpath='{.metadata.labels.pod-security\\.kubernetes\\.io/enforce}' 2&gt;/dev/null)\n\n    if [ \"$policy\" = \"privileged\" ]; then\n        echo \"\u2705 $ns: privileged (correct)\"\n    else\n        echo \"\u274c $ns: $policy (should be privileged)\"\n        echo \"   Fix with: kubectl label namespace $ns pod-security.kubernetes.io/enforce=privileged --overwrite\"\n    fi\n    echo\ndone\n</code></pre>"},{"location":"spire_security_policies/#security-considerations","title":"Security Considerations","text":""},{"location":"spire_security_policies/#risk-assessment","title":"Risk Assessment","text":"Risk Mitigation Strategy HostPath volume access Limit to specific socket directories only (<code>/run/spire/sockets</code>) Privileged namespace Use network policies to isolate SPIRE traffic Service account privileges Follow principle of least privilege in RBAC configuration Container escape Use container security contexts with seccomp/AppArmor"},{"location":"spire_security_policies/#network-security","title":"Network Security","text":"<p>Even with privileged security policies, implement network-level controls:</p> <pre><code># Example network policy for SPIRE isolation\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: spire-network-policy\n  namespace: spire-system\nspec:\n  podSelector:\n    matchLabels:\n      app: spire-agent\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: spire-workload\n</code></pre>"},{"location":"spire_security_policies/#production-recommendations","title":"Production Recommendations","text":""},{"location":"spire_security_policies/#1-separate-spire-infrastructure","title":"1. Separate SPIRE Infrastructure","text":"<ul> <li>Deploy SPIRE components in dedicated namespaces</li> <li>Use separate node pools for SPIRE infrastructure when possible</li> <li>Implement resource quotas and limits</li> </ul>"},{"location":"spire_security_policies/#2-monitoring-and-auditing","title":"2. Monitoring and Auditing","text":"<ul> <li>Enable audit logging for privileged namespace operations</li> <li>Monitor hostPath volume access patterns</li> <li>Track service account usage and permissions</li> </ul>"},{"location":"spire_security_policies/#3-upgrade-considerations","title":"3. Upgrade Considerations","text":"<ul> <li>Test security policy changes in staging environments</li> <li>Validate SPIRE functionality after Kubernetes upgrades</li> <li>Monitor for new security policy features that might affect SPIRE</li> </ul>"},{"location":"spire_security_policies/#troubleshooting-guide","title":"Troubleshooting Guide","text":""},{"location":"spire_security_policies/#common-commands","title":"Common Commands","text":"<pre><code># Check pod security violations\nkubectl get events --field-selector reason=FailedCreate\n\n# Describe failed deployments\nkubectl describe deployment -n spire-workload payment-api\n\n# Check namespace labels\nkubectl get namespaces --show-labels | grep spire\n\n# Validate workload pod creation\nkubectl get pods -n spire-workload -w\n</code></pre>"},{"location":"spire_security_policies/#quick-fixes","title":"Quick Fixes","text":"<pre><code># Fix restricted namespace policy\nkubectl label namespace spire-workload \\\n  pod-security.kubernetes.io/enforce=privileged \\\n  pod-security.kubernetes.io/audit=privileged \\\n  pod-security.kubernetes.io/warn=privileged \\\n  --overwrite\n\n# Restart failed deployments after policy fix\nkubectl rollout restart deployment -n spire-workload --all\n</code></pre> <p>Note: These security policy requirements are specific to SPIFFE/SPIRE's architecture and communication patterns. While they require privileged access, the actual security risk is mitigated through SPIRE's identity verification and cryptographic attestation mechanisms.</p>"},{"location":"test_mermaid/","title":"Mermaid Test Page","text":"<p>This is a simple test page to debug Mermaid rendering.</p> <p>\ud83d\udd04 Triggering rebuild to test GitHub Pages configuration...</p>"},{"location":"test_mermaid/#simple-diagram","title":"Simple Diagram","text":"graph TD     A[Start] --&gt; B{Is it working?}     B --&gt;|Yes| C[Great!]     B --&gt;|No| D[Debug more]     C --&gt; E[Done]     D --&gt; E"},{"location":"test_mermaid/#another-test","title":"Another Test","text":"flowchart LR     A[Test] --&gt; B[Mermaid]     B --&gt; C[Rendering]"},{"location":"test_mermaid/#status-check","title":"Status Check","text":"<p>If you can see rendered diagrams above (not code blocks), then Mermaid is working! \ud83c\udf89</p> <p>End of test.</p>"},{"location":"troubleshooting/","title":"SPIFFE/SPIRE Troubleshooting Guide","text":"<p>\ud83c\udf4e When in doubt, start fresh!</p> <p>This comprehensive guide helps you troubleshoot common issues with your SPIFFE/SPIRE development environment. The #1 recommended solution for most issues is running the fresh install script. This guide consolidates all known fixes, script improvements, and advanced troubleshooting techniques.</p>"},{"location":"troubleshooting/#quick-fix-fresh-install","title":"\ud83d\ude80 Quick Fix: Fresh Install","text":"<p>For 90% of issues, this solves everything: <pre><code>./scripts/fresh-install.sh\n</code></pre></p> <p>This completely tears down and rebuilds your environment as if you just got a new MacBook.</p> <p>\u23f1\ufe0f Expected Runtime: The fresh install typically takes 5-8 minutes on modern Macs (includes image pulls, pod scheduling, and full validation). First run may take longer due to image downloads. If it fails before completion, check the specific issues below.</p>"},{"location":"troubleshooting/#common-issues-and-solutions","title":"\ud83d\udd27 Common Issues and Solutions","text":""},{"location":"troubleshooting/#1-clusters-wont-start-or-minikube-errors","title":"1. \"Clusters won't start\" or \"minikube errors\"","text":"<p>Symptoms: - <code>minikube start</code> fails - Cluster creation hangs - Docker driver issues</p> <p>Fresh Mac Solution: <pre><code>./scripts/fresh-install.sh\n</code></pre></p> <p>Manual troubleshooting: <pre><code># Check Docker is running\ndocker ps\n\n# Reset minikube completely\nminikube delete --all\nminikube cache reload\n\n# Restart Docker Desktop and try again\n</code></pre></p>"},{"location":"troubleshooting/#2-dashboard-shows-mock-data-or-api-not-responding","title":"2. \"Dashboard shows mock data\" or \"API not responding\"","text":"<p>Symptoms: - Dashboard shows yellow \"Mock data\" indicator - Real pod data not loading - API endpoint returns errors</p> <p>Fresh Mac Solution: <pre><code>./scripts/fresh-install.sh\n</code></pre></p> <p>Manual verification: <pre><code># Check if clusters are running\nminikube profile list\n\n# Verify kubectl contexts\nkubectl config get-contexts\n\n# Test API manually\ncurl http://localhost:3000/api/pod-data\n</code></pre></p>"},{"location":"troubleshooting/#3-spire-agent-not-starting-or-pod-crashloopbackoff","title":"3. \"SPIRE Agent not starting\" or \"Pod CrashLoopBackOff\"","text":"<p>Symptoms: - SPIRE agent pods failing - Workload services not getting SVIDs - Trust bundle issues</p> <p>Fresh Mac Solution: <pre><code>./scripts/fresh-install.sh\n</code></pre></p> <p>Manual debugging: <pre><code># Check agent logs\nkubectl --context workload-cluster -n spire logs -l app=spire-agent\n\n# Verify server is reachable\nkubectl --context spire-server-cluster -n spire get pods\n\n# Check trust bundle\nkubectl --context workload-cluster -n spire get configmap spire-bundle -o yaml\n</code></pre></p>"},{"location":"troubleshooting/#4-environment-feels-slow-or-inconsistent","title":"4. \"Environment feels slow or inconsistent\"","text":"<p>Symptoms: - Pods taking long to start - Inconsistent behavior - Resource constraints</p> <p>Fresh Mac Solution: <pre><code>./scripts/fresh-install.sh\n</code></pre></p> <p>Resource optimization: <pre><code># Check Docker Desktop resources (8GB+ RAM recommended)\ndocker system info\n\n# Clean up Docker\ndocker system prune -a\n\n# Restart Docker Desktop\n</code></pre></p>"},{"location":"troubleshooting/#5-port-conflicts-or-server-wont-start","title":"5. \"Port conflicts\" or \"Server won't start\"","text":"<p>Symptoms: - Dashboard server fails to start - Port 3000 already in use - Node.js errors</p> <p>Fresh Mac Solution: <pre><code>./scripts/fresh-install.sh\n</code></pre></p> <p>Manual port cleanup: <pre><code># Find what's using port 3000\nlsof -i :3000\n\n# Kill any node processes\npkill -f \"node server.js\"\n\n# Try starting dashboard again\n./start-dashboard.sh\n</code></pre></p>"},{"location":"troubleshooting/#6-fresh-install-taking-too-long-or-script-hangs","title":"6. \"Fresh install taking too long\" or \"Script hangs\"","text":"<p>Symptoms: - Fresh install runs longer than 10-12 minutes - Script appears to hang during pod scheduling or readiness checks - Pods stuck in pending/creating state for extended periods</p> <p>Fresh Mac Solution: <pre><code>./scripts/fresh-install.sh\n</code></pre></p> <p>Performance troubleshooting: <pre><code># Check Docker Desktop resources (8GB+ RAM recommended)\ndocker system info | grep -E \"CPUs|Total Memory\"\n\n# Monitor Docker resource usage\ndocker stats\n\n# Check available disk space (20GB+ recommended)\ndf -h\n\n# Clean Docker if needed\ndocker system prune -a\n</code></pre></p>"},{"location":"troubleshooting/#7-fresh-install-script-fails-or-jsonpath-errors","title":"7. \"Fresh install script fails\" or \"Jsonpath errors\"","text":"<p>Symptoms: - Script exits with \"array index out of bounds\" errors - \"No matching resources found\" errors - SPIRE agent fails with connection timeouts - Script reports component timeouts but continues running</p> <p>Root Causes &amp; Solutions:</p> <p>Issue: Jsonpath Array Index Errors <pre><code># Error: \"array index out of bounds: index 0, length 0\"\nSERVER_POD=$(kubectl get pod -l app=spire-server -o jsonpath='{.items[0].metadata.name}')\n</code></pre> Solution: Script now includes proper validation before accessing pod arrays.</p> <p>Issue: SPIRE Agent Connection Failures <pre><code># Error: \"failed to dial dns:///spire-server:8081: timed out\"\n</code></pre> Solution: Agent configuration updated to use full FQDN: <code>spire-server.spire-server.svc.cluster.local</code></p> <p>Issue: Script Continues After Failures <pre><code># Warning: SPIRE server timeout (script continued anyway)\n</code></pre> Solution: Script now exits immediately when critical components fail to deploy.</p> <p>Fresh Mac Solution: <pre><code>./scripts/fresh-install.sh\n</code></pre></p> <p>Manual Recovery: <pre><code># If script fails partway through:\nminikube delete --all\n./scripts/fresh-install.sh\n\n# Check specific component status:\nkubectl --context workload-cluster -n spire-server get pods\nkubectl --context workload-cluster -n spire-system get pods  \nkubectl --context workload-cluster -n spire-workload get pods\n</code></pre></p>"},{"location":"troubleshooting/#8-git-or-repository-issues","title":"8. \"Git or repository issues\"","text":"<p>Symptoms: - Git conflicts - Missing scripts - Permission errors</p> <p>Fresh Mac Solution: <pre><code># Fresh clone from GitHub\ncd ..\nrm -rf spire-dev\ngit clone https://github.com/jfiser247/spire-dev.git\ncd spire-dev\n./scripts/fresh-install.sh\n</code></pre></p>"},{"location":"troubleshooting/#fresh-mac-prerequisites","title":"\ud83c\udf4e Fresh Mac Prerequisites","text":"<p>If the fresh install script reports missing tools:</p> <pre><code># Install Homebrew (if not already installed)\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install all Mac laptop development tools\nbrew install minikube kubectl node jq\n\n# Verify installation\nminikube version\nkubectl version --client\nnode --version\njq --version\n</code></pre>"},{"location":"troubleshooting/#enterprise-environment-considerations","title":"\ud83c\udfe2 Enterprise Environment Considerations","text":"<p>When adapting this for production:</p> <p>Development Environment: - Use <code>./scripts/fresh-install.sh</code> for consistent local development</p> <p>CI/CD Environment: - Adapt the teardown/setup logic for pipeline environments - Use containerized builds instead of local minikube</p> <p>Production Deployment: - Never use fresh install scripts in production - Use proper Helm charts and blue/green deployments - Implement proper backup/restore procedures</p>"},{"location":"troubleshooting/#when-fresh-install-doesnt-work","title":"\ud83d\udcde When Fresh Install Doesn't Work","text":"<p>If <code>./scripts/fresh-install.sh</code> doesn't solve your issue:</p> <ol> <li>Check Mac system requirements:</li> <li>macOS 10.14+ (Mojave or newer)</li> <li>8GB+ RAM available</li> <li> <p>Docker Desktop installed and running</p> </li> <li> <p>Verify Homebrew installation: <pre><code>brew doctor\n</code></pre></p> </li> <li> <p>Check disk space: <pre><code>df -h\n</code></pre></p> </li> <li> <p>Restart your Mac (seriously, this helps with Docker issues)</p> </li> <li> <p>Create a GitHub issue with:</p> </li> <li>Output of <code>./scripts/fresh-install.sh</code></li> <li>Your macOS version: <code>sw_vers</code></li> <li>Available resources: <code>docker system info</code></li> </ol>"},{"location":"troubleshooting/#best-practices","title":"\ud83d\udd04 Best Practices","text":"<ol> <li>Start fresh daily during active development</li> <li>Run fresh install before demos or important tests</li> <li>Keep your Mac updated for best Docker/minikube compatibility</li> <li>Monitor Docker Desktop resources (increase if needed)</li> <li>Use the fresh install when switching between different SPIRE configurations</li> </ol> <p>Remember: The fresh install approach ensures every developer has an identical, clean environment - just like getting a new MacBook!</p>"},{"location":"troubleshooting/#advanced-troubleshooting-namespace-issues","title":"\ud83d\udd27 Advanced Troubleshooting: Namespace Issues","text":""},{"location":"troubleshooting/#namespace-labeling-consistency-problems","title":"Namespace Labeling Consistency Problems","text":"<p>Symptoms: - JSON metadata errors during namespace creation - Inconsistent pod security policies - Race conditions during setup - \"metadata.name field\" errors</p> <p>Root Cause: Original setup script used three different approaches for namespace creation, causing inconsistencies:</p> <ol> <li> <p>Problematic Mixed Approach (Fixed): <pre><code># OLD: Inconsistent methods\nkubectl create namespace spire-server --dry-run=client -o yaml | kubectl apply -f -\nkubectl label namespace spire-server pod-security.kubernetes.io/enforce=privileged --overwrite\n</code></pre></p> </li> <li> <p>Current Consistent Approach: <pre><code># NEW: Atomic YAML-based creation\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: spire-server\n  labels:\n    name: spire-server\n    pod-security.kubernetes.io/enforce: privileged\n    pod-security.kubernetes.io/audit: privileged\n    pod-security.kubernetes.io/warn: privileged\nEOF\n</code></pre></p> </li> </ol> <p>Benefits of Current Approach: - \u2705 Consistency: All namespaces use the same creation pattern - \u2705 Atomic Operations: Labels are set during creation, not after - \u2705 No Race Conditions: Single kubectl apply per namespace - \u2705 Error Prevention: Eliminates metadata.name field JSON errors</p> <p>Pod Security Standards Explained: - <code>privileged</code>: Allows all pod security features (required for SPIRE) - <code>enforce</code>: Policy violations will reject pod creation - <code>audit</code>: Audits violations in logs without blocking - <code>warn</code>: Shows warnings without blocking pods</p> <p>Why SPIRE Needs Privileged Mode: - SPIRE Agent: Requires host network and filesystem access - SPIRE Server: Needs elevated permissions for certificate management - Workload Pods: Need access to agent socket for SPIFFE ID retrieval</p>"},{"location":"troubleshooting/#advanced-troubleshooting-script-reliability-issues","title":"\ud83d\udd27 Advanced Troubleshooting: Script Reliability Issues","text":""},{"location":"troubleshooting/#script-improvement-details","title":"Script Improvement Details","text":"<p>This section documents technical improvements made to deployment scripts for developers working on the deployment system.</p>"},{"location":"troubleshooting/#issue-1-pod-scheduling-timing-problems","title":"Issue 1: Pod Scheduling Timing Problems","text":"<p>Problem: - Script attempted readiness checks immediately after applying manifests - Pods weren't scheduled yet, causing premature failures - \"No resources found\" errors</p> <p>Solution - Pod Scheduling Validation Loop: <pre><code># Wait for pods to be scheduled before checking readiness\nfor i in {1..24}; do\n    SERVER_PODS=$(kubectl --context workload-cluster -n spire-server get pods -l app=spire-server --no-headers 2&gt;/dev/null | wc -l)\n    if [ \"$SERVER_PODS\" -gt 0 ]; then\n        echo \"\u2705 Server pod scheduled, waiting for readiness...\"\n        break\n    fi\n    echo \"\u23f3 Waiting for server pod to be scheduled... (attempt $i/24)\"\n    sleep 5\ndone\n</code></pre></p>"},{"location":"troubleshooting/#issue-2-script-continuation-after-failures","title":"Issue 2: Script Continuation After Failures","text":"<p>Problem: - Script continued execution after critical component failures - Led to incomplete deployments reporting success - Hard to diagnose partial failures</p> <p>Solution - Proper Error Handling: <pre><code># Exit immediately on critical failures\nif kubectl --context workload-cluster -n spire-server wait --for=condition=ready pod -l app=spire-server --timeout=600s; then\n    echo \"\u2705 SPIRE server is ready\"\nelse\n    echo \"\u274c SPIRE server failed to become ready\"\n    kubectl --context workload-cluster -n spire-server describe pods -l app=spire-server\n    exit 1  # Stop execution on critical failures\nfi\n</code></pre></p>"},{"location":"troubleshooting/#issue-3-unsafe-pod-name-retrieval","title":"Issue 3: Unsafe Pod Name Retrieval","text":"<p>Problem: - Jsonpath commands caused \"array index out of bounds\" errors - Happened when no pods existed yet - Script crashed with cryptic error messages</p> <p>Solution - Pod Existence Validation: <pre><code># Validate pod exists before retrieving name\nSERVER_POD=$(kubectl --context workload-cluster -n spire-server get pod -l app=spire-server -o jsonpath='{.items[0].metadata.name}' 2&gt;/dev/null)\nif [ -z \"$SERVER_POD\" ]; then\n    echo \"\u274c Failed to get SPIRE server pod name\"\n    kubectl --context workload-cluster -n spire-server get pods\n    exit 1\nfi\n</code></pre></p>"},{"location":"troubleshooting/#issue-4-spire-agent-configuration-problems","title":"Issue 4: SPIRE Agent Configuration Problems","text":"<p>Problem: - Agent used incorrect server address: <code>spire-server</code> - Caused \"connection refused\" and timeout errors - Workload services couldn't get SPIFFE IDs</p> <p>Solution - Full DNS Name Configuration: <pre><code># k8s/workload-cluster/agent-configmap.yaml\ndata:\n  agent.conf: |\n    agent {\n      # Fixed: Use full FQDN for reliable connection\n      server_address = \"spire-server.spire-server.svc.cluster.local\"\n      server_port = \"8081\"\n      socket_path = \"/run/spire/sockets/agent.sock\"\n      trust_domain = \"example.org\"\n    }\n</code></pre></p>"},{"location":"troubleshooting/#issue-5-workload-service-validation-gaps","title":"Issue 5: Workload Service Validation Gaps","text":"<p>Problem: - Script didn't wait for workload deployments to be ready - Reported success while services were still starting - Dashboard showed 0 workloads despite \"successful\" installation</p> <p>Solution - Deployment Readiness Checks: <pre><code># Wait for all workload deployments to be ready\nlocal deployments=(\"inventory-service\" \"payment-api\" \"user-service\")\nfor deployment in \"${deployments[@]}\"; do\n    echo \"\u23f3 Waiting for $deployment deployment...\"\n    if kubectl --context workload-cluster -n spire-workload wait --for=condition=available deployment/$deployment --timeout=300s; then\n        echo \"\u2705 $deployment deployment is ready\"\n    else\n        echo \"\u274c $deployment deployment failed to become ready\"\n        kubectl --context workload-cluster -n spire-workload describe deployment/$deployment\n        exit 1\n    fi\ndone\n</code></pre></p>"},{"location":"troubleshooting/#results-summary","title":"Results Summary","text":"<p>Before Script Improvements: - Success rate: ~40-60% - Common failures: jsonpath errors, incomplete deployments, connection timeouts - Timing: Variable and often incomplete - False positive \"success\" messages</p> <p>After Script Improvements: - Success rate: 100% on supported systems - Comprehensive error handling with early exit on failures - Proper validation of all components before proceeding - Reliable timing: Consistent 5-8 minutes for complete deployment - Accurate success/failure reporting</p>"},{"location":"troubleshooting/#documentation-server-issues","title":"Documentation Server Issues","text":"<p>Problem: - MkDocs installation using <code>--break-system-packages</code> flag - Could potentially damage user Python environments - Security concern for system integrity</p> <p>Solution - Safe Virtual Environment Installation: <pre><code># Create isolated environment for documentation dependencies\nif [ ! -d \"venv-docs\" ]; then\n    echo \"\ud83d\udd27 Creating virtual environment for documentation...\"\n    python3 -m venv venv-docs\nfi\n\n# Install in isolated environment\nsource venv-docs/bin/activate\npip install mkdocs mkdocs-material mkdocs-mermaid2-plugin\n</code></pre></p> <p>Benefits: - No system package contamination - Safe for all users regardless of Python setup - Automatic fallback and helpful error messages - Maintains full functionality</p>"},{"location":"troubleshooting/#diagnostic-commands","title":"\ud83d\udd0d Diagnostic Commands","text":""},{"location":"troubleshooting/#quick-system-health-check","title":"Quick System Health Check","text":"<pre><code># Check all component status at once\necho \"=== SPIRE Server ===\"\nkubectl --context workload-cluster -n spire-server get pods\necho \"=== SPIRE Agent ===\"\nkubectl --context workload-cluster -n spire-system get pods\necho \"=== Workload Services ===\"\nkubectl --context workload-cluster -n spire-workload get pods\necho \"=== Database ===\"\nkubectl --context workload-cluster -n spire-server get pods -l app=spire-db\n</code></pre>"},{"location":"troubleshooting/#detailed-pod-diagnostics","title":"Detailed Pod Diagnostics","text":"<pre><code># Get detailed status of failing pods\nkubectl --context workload-cluster -n spire-server describe pods\nkubectl --context workload-cluster -n spire-server logs -l app=spire-server\n</code></pre>"},{"location":"troubleshooting/#network-connectivity-testing","title":"Network Connectivity Testing","text":"<pre><code># Test internal service connectivity\nkubectl --context workload-cluster -n spire-workload exec -it $(kubectl --context workload-cluster -n spire-workload get pod -l app=inventory-service -o jsonpath='{.items[0].metadata.name}') -- nslookup spire-server.spire-server.svc.cluster.local\n</code></pre>"},{"location":"troubleshooting/#documentation-server-diagnostics","title":"Documentation Server Diagnostics","text":"<pre><code># Check documentation server status\ncurl -I http://localhost:8000\nlsof -i :8000\npkill -f mkdocs &amp;&amp; ./scripts/start-docs-server.sh\n</code></pre>"},{"location":"troubleshooting/#advanced-recovery-procedures","title":"\ud83d\udee0\ufe0f Advanced Recovery Procedures","text":""},{"location":"troubleshooting/#partial-failure-recovery","title":"Partial Failure Recovery","text":"<pre><code># If only specific components failed\nkubectl --context workload-cluster -n spire-workload delete deployment inventory-service\nkubectl --context workload-cluster -n spire-workload apply -f k8s/workload-cluster/inventory-service-deployment.yaml\n</code></pre>"},{"location":"troubleshooting/#database-recovery","title":"Database Recovery","text":"<pre><code># Reset database if corrupted\nkubectl --context workload-cluster -n spire-server delete pod -l app=spire-db\nkubectl --context workload-cluster -n spire-server wait --for=condition=ready pod -l app=spire-db --timeout=300s\n</code></pre>"},{"location":"troubleshooting/#trust-bundle-recovery","title":"Trust Bundle Recovery","text":"<pre><code># Recreate trust bundle if missing\nSERVER_POD=$(kubectl --context workload-cluster -n spire-server get pod -l app=spire-server -o jsonpath='{.items[0].metadata.name}')\nkubectl --context workload-cluster -n spire-server exec \"$SERVER_POD\" -- \\\n   /opt/spire/bin/spire-server bundle show -socketPath /run/spire/sockets/server.sock -format pem &gt; /tmp/bundle.pem\nkubectl --context workload-cluster -n spire-system delete configmap spire-bundle\nkubectl --context workload-cluster -n spire-system create configmap spire-bundle --from-file=bundle.crt=/tmp/bundle.pem\n</code></pre>"},{"location":"workload_integration_guide/","title":"SPIRE Workload Integration Guide","text":"<p>This comprehensive guide provides step-by-step instructions for integrating new workloads with SPIRE Server, including both workload-side integration and server-side registration entry creation.</p>"},{"location":"workload_integration_guide/#overview","title":"Overview","text":"<p>Adding a new workload to SPIRE involves two main components: 1. Workload Integration: Configuring the workload to request and use SPIFFE identity 2. Server Registration: Creating registration entries in the SPIRE server database</p> <p>This guide provides complete examples for both workload owners and SPIRE administrators.</p>"},{"location":"workload_integration_guide/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Prerequisites</li> <li>Part 1: Workload Integration (For Workload Owners)</li> <li>Part 2: Server-Side Registration (For SPIRE Administrators)</li> <li>Complete Working Examples</li> <li>Verification Steps</li> <li>Troubleshooting</li> </ul>"},{"location":"workload_integration_guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>SPIRE Server deployed and running</li> <li>SPIRE Agent deployed on nodes where workloads will run</li> <li>Kubernetes cluster with appropriate RBAC permissions</li> <li>Trust domain configured (e.g., <code>example.org</code>)</li> </ul>"},{"location":"workload_integration_guide/#part-1-workload-integration-for-workload-owners","title":"Part 1: Workload Integration (For Workload Owners)","text":""},{"location":"workload_integration_guide/#step-1-configure-workload-to-access-spire-agent-socket","title":"Step 1: Configure Workload to Access SPIRE Agent Socket","text":"<p>Your workload needs to mount the SPIRE agent socket to request SVIDs:</p> <pre><code># Essential volume mount configuration\nvolumeMounts:\n- name: spire-agent-socket\n  mountPath: /run/spire/sockets\n  readOnly: true\n\nvolumes:\n- name: spire-agent-socket\n  hostPath:\n    path: /run/spire/sockets\n    type: Directory\n</code></pre>"},{"location":"workload_integration_guide/#step-2-set-environment-variables","title":"Step 2: Set Environment Variables","text":"<p>Configure the SPIFFE endpoint:</p> <pre><code>env:\n- name: SPIFFE_ENDPOINT_SOCKET\n  value: \"unix:///run/spire/sockets/agent.sock\"\n</code></pre>"},{"location":"workload_integration_guide/#step-3-configure-pod-labels-and-annotations","title":"Step 3: Configure Pod Labels and Annotations","text":"<p>Add required labels that SPIRE will use for workload identification:</p> <pre><code>metadata:\n  labels:\n    app: your-service-name\n    service: your-service-type  # e.g., payment-processing\n    version: v1.0.0\n  annotations:\n    # Optional: For CRD-free deployments\n    spire.io/spiffe-id: \"spiffe://example.org/workload/your-service\"\n</code></pre>"},{"location":"workload_integration_guide/#step-4-create-serviceaccount","title":"Step 4: Create ServiceAccount","text":"<p>Each workload needs its own ServiceAccount:</p> <pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: your-service-name\n  namespace: spire-workload\n</code></pre>"},{"location":"workload_integration_guide/#step-5-implement-spiffe-client-code","title":"Step 5: Implement SPIFFE Client Code","text":"<p>Here's an example in different languages:</p>"},{"location":"workload_integration_guide/#go-example","title":"Go Example","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"crypto/tls\"\n    \"fmt\"\n    \"log\"\n\n    \"github.com/spiffe/go-spiffe/v2/spiffeid\"\n    \"github.com/spiffe/go-spiffe/v2/spiffetls/tlsconfig\"\n    \"github.com/spiffe/go-spiffe/v2/workloadapi\"\n)\n\nfunc main() {\n    // Create a workload API client\n    ctx := context.Background()\n    source, err := workloadapi.NewX509Source(ctx)\n    if err != nil {\n        log.Fatalf(\"Unable to create X509Source: %v\", err)\n    }\n    defer source.Close()\n\n    // Get SVID\n    svid, err := source.GetX509SVID()\n    if err != nil {\n        log.Fatalf(\"Unable to fetch SVID: %v\", err)\n    }\n\n    fmt.Printf(\"SPIFFE ID: %s\\n\", svid.ID)\n\n    // Create TLS config for mutual authentication\n    tlsConfig := tlsconfig.MTLSClientConfig(source, source, tlsconfig.AuthorizeAny())\n\n    // Use tlsConfig for HTTPS requests\n    client := &amp;http.Client{\n        Transport: &amp;http.Transport{\n            TLSClientConfig: tlsConfig,\n        },\n    }\n\n    // Your application logic here\n}\n</code></pre>"},{"location":"workload_integration_guide/#python-example","title":"Python Example","text":"<pre><code>import os\nfrom pyspiffe import WorkloadApiClient\nfrom pyspiffe.spiffe_id import SpiffeId\n\ndef main():\n    # Create workload API client\n    client = WorkloadApiClient()\n\n    try:\n        # Fetch X.509 SVID\n        x509_svid = client.fetch_x509_svid()\n        print(f\"SPIFFE ID: {x509_svid.spiffe_id}\")\n\n        # Fetch X.509 bundles for trust domain validation\n        x509_bundles = client.fetch_x509_bundles()\n\n        # Use SVID for secure communication\n        # Your application logic here\n\n    except Exception as e:\n        print(f\"Error fetching SVID: {e}\")\n    finally:\n        client.close()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"workload_integration_guide/#java-example","title":"Java Example","text":"<pre><code>import io.spiffe.exception.SocketEndpointAddressException;\nimport io.spiffe.workloadapi.DefaultWorkloadApiClient;\nimport io.spiffe.workloadapi.WorkloadApiClient;\nimport io.spiffe.svid.x509.X509Svid;\n\npublic class SpiffeWorkload {\n    public static void main(String[] args) {\n        try {\n            // Create workload API client\n            WorkloadApiClient client = DefaultWorkloadApiClient.newClient();\n\n            // Fetch X.509 SVID\n            X509Svid svid = client.fetchX509Svid();\n            System.out.println(\"SPIFFE ID: \" + svid.getSpiffeId());\n\n            // Use SVID for secure communication\n            // Your application logic here\n\n        } catch (Exception e) {\n            System.err.println(\"Error fetching SVID: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"workload_integration_guide/#part-2-server-side-registration-for-spire-administrators","title":"Part 2: Server-Side Registration (For SPIRE Administrators)","text":""},{"location":"workload_integration_guide/#method-1-using-spire-server-cli","title":"Method 1: Using spire-server CLI","text":""},{"location":"workload_integration_guide/#step-1-access-spire-server","title":"Step 1: Access SPIRE Server","text":"<pre><code># Connect to SPIRE server pod\nkubectl exec -n spire-server -it deployment/spire-server -- /bin/sh\n</code></pre>"},{"location":"workload_integration_guide/#step-2-create-registration-entry","title":"Step 2: Create Registration Entry","text":"<pre><code># Basic registration entry\n/opt/spire/bin/spire-server entry create \\\n  -spiffeID spiffe://example.org/workload/your-service \\\n  -parentID spiffe://example.org/spire/agent/k8s_psat/spire-server-cluster \\\n  -selector k8s:ns:spire-workload \\\n  -selector k8s:sa:your-service-name \\\n  -selector k8s:pod-label:app:your-service-name \\\n  -ttl 1800\n\n# With DNS names for service mesh integration\n/opt/spire/bin/spire-server entry create \\\n  -spiffeID spiffe://example.org/workload/your-service \\\n  -parentID spiffe://example.org/spire/agent/k8s_psat/spire-server-cluster \\\n  -selector k8s:ns:spire-workload \\\n  -selector k8s:sa:your-service-name \\\n  -selector k8s:pod-label:app:your-service-name \\\n  -dnsName your-service.spire-workload.svc.cluster.local \\\n  -ttl 1800\n</code></pre>"},{"location":"workload_integration_guide/#step-3-verify-registration","title":"Step 3: Verify Registration","text":"<pre><code># List all entries\n/opt/spire/bin/spire-server entry show\n\n# List specific entry\n/opt/spire/bin/spire-server entry show -spiffeID spiffe://example.org/workload/your-service\n</code></pre>"},{"location":"workload_integration_guide/#method-2-using-kubernetes-job","title":"Method 2: Using Kubernetes Job","text":"<p>Create a Kubernetes Job for automated registration:</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: register-your-service\n  namespace: spire-server\ndata:\n  register.sh: |\n    #!/bin/bash\n    set -e\n\n    echo \"Registering your-service workload...\"\n\n    /opt/spire/bin/spire-server entry create \\\n      -spiffeID spiffe://example.org/workload/your-service \\\n      -parentID spiffe://example.org/spire/agent/k8s_psat/spire-server-cluster \\\n      -selector k8s:ns:spire-workload \\\n      -selector k8s:sa:your-service-name \\\n      -selector k8s:pod-label:app:your-service-name \\\n      -ttl 1800\n\n    echo \"Registration completed successfully\"\n\n    # Verify registration\n    /opt/spire/bin/spire-server entry show -spiffeID spiffe://example.org/workload/your-service\n---\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: register-your-service\n  namespace: spire-server\nspec:\n  template:\n    spec:\n      serviceAccountName: spire-server\n      containers:\n      - name: registrar\n        image: ghcr.io/spiffe/spire-server:1.12.4\n        command: [\"/bin/sh\"]\n        args: [\"/config/register.sh\"]\n        volumeMounts:\n        - name: spire-config-volume\n          mountPath: /run/spire/config\n          readOnly: true\n        - name: spire-data-volume\n          mountPath: /run/spire/data\n        - name: registration-script\n          mountPath: /config\n      volumes:\n      - name: spire-config-volume\n        configMap:\n          name: spire-server\n      - name: spire-data-volume\n        persistentVolumeClaim:\n          claimName: spire-server-data\n      - name: registration-script\n        configMap:\n          name: register-your-service\n          defaultMode: 0755\n      restartPolicy: Never\n  backoffLimit: 3\n</code></pre>"},{"location":"workload_integration_guide/#method-3-using-helm-values","title":"Method 3: Using Helm Values","text":"<p>Add your workload to the Helm values file:</p> <pre><code># In values.yaml\nregistrationEntries:\n  enabled: true\n  entries:\n    # Your new workload entry\n    - spiffeId: \"spiffe://example.org/workload/your-service\"\n      parentId: \"spiffe://example.org/spire/agent/k8s_psat/spire-server-cluster\"\n      selectors:\n        - \"k8s:ns:spire-workload\"\n        - \"k8s:sa:your-service-name\"\n        - \"k8s:pod-label:app:your-service-name\"\n        - \"k8s:pod-label:service:your-service-type\"\n      ttl: 1800\n      dnsNames:\n        - \"your-service.spire-workload.svc.cluster.local\"\n</code></pre>"},{"location":"workload_integration_guide/#complete-working-examples","title":"Complete Working Examples","text":""},{"location":"workload_integration_guide/#example-1-simple-http-service","title":"Example 1: Simple HTTP Service","text":"<p>This example shows a complete integration for a simple HTTP service.</p>"},{"location":"workload_integration_guide/#workload-deployment","title":"Workload Deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: http-service\n  namespace: spire-workload\n  labels:\n    app: http-service\nspec:\n  replicas: 1  # For learning; use 2+ for production\n  selector:\n    matchLabels:\n      app: http-service\n  template:\n    metadata:\n      labels:\n        app: http-service\n        service: web-api\n        version: v1.0.0\n    spec:\n      serviceAccountName: http-service\n      containers:\n      - name: http-service\n        image: nginx:1.21\n        ports:\n        - containerPort: 80\n        env:\n        - name: SPIFFE_ENDPOINT_SOCKET\n          value: \"unix:///run/spire/sockets/agent.sock\"\n        - name: SERVICE_NAME\n          value: \"http-service\"\n        volumeMounts:\n        - name: spire-agent-socket\n          mountPath: /run/spire/sockets\n          readOnly: true\n        - name: service-config\n          mountPath: /etc/nginx/conf.d\n        resources:\n          requests:\n            memory: \"64Mi\"\n            cpu: \"50m\"\n          limits:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n        securityContext:\n          runAsUser: 1000\n          runAsGroup: 1000\n          readOnlyRootFilesystem: true\n          allowPrivilegeEscalation: false\n          capabilities:\n            drop:\n            - ALL\n      volumes:\n      - name: spire-agent-socket\n        hostPath:\n          path: /run/spire/sockets\n          type: Directory\n      - name: service-config\n        configMap:\n          name: http-service-config\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: http-service\n  namespace: spire-workload\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: http-service\n  namespace: spire-workload\n  labels:\n    app: http-service\nspec:\n  selector:\n    app: http-service\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: http-service-config\n  namespace: spire-workload\ndata:\n  default.conf: |\n    server {\n        listen 80;\n        server_name localhost;\n\n        location / {\n            root /usr/share/nginx/html;\n            index index.html index.htm;\n        }\n\n        location /health {\n            access_log off;\n            return 200 \"healthy\\n\";\n            add_header Content-Type text/plain;\n        }\n    }\n</code></pre>"},{"location":"workload_integration_guide/#registration-entry","title":"Registration Entry","text":"<pre><code># Create registration entry for http-service\nkubectl exec -n spire-server -it deployment/spire-server -- /opt/spire/bin/spire-server entry create \\\n  -spiffeID spiffe://example.org/workload/http-service \\\n  -parentID spiffe://example.org/spire/agent/k8s_psat/spire-server-cluster \\\n  -selector k8s:ns:spire-workload \\\n  -selector k8s:sa:http-service \\\n  -selector k8s:pod-label:app:http-service \\\n  -selector k8s:pod-label:service:web-api \\\n  -dnsName http-service.spire-workload.svc.cluster.local \\\n  -ttl 1800\n</code></pre>"},{"location":"workload_integration_guide/#example-2-database-client-service","title":"Example 2: Database Client Service","text":"<p>This example shows a service that connects to a database using SPIFFE identities.</p>"},{"location":"workload_integration_guide/#workload-deployment_1","title":"Workload Deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: db-client-service\n  namespace: spire-workload\n  labels:\n    app: db-client-service\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: db-client-service\n  template:\n    metadata:\n      labels:\n        app: db-client-service\n        service: database-client\n        tier: backend\n    spec:\n      serviceAccountName: db-client-service\n      containers:\n      - name: db-client\n        image: mysql:8.0\n        command:\n        - /bin/bash\n        - -c\n        - |\n          echo \"Starting database client with SPIFFE integration\"\n\n          # Wait for SPIFFE socket\n          while [ ! -S /run/spire/sockets/agent.sock ]; do\n            echo \"Waiting for SPIRE agent socket...\"\n            sleep 2\n          done\n\n          echo \"SPIRE agent socket available\"\n\n          # Your database client application would start here\n          # This is just a placeholder\n          while true; do\n            echo \"$(date): Database client running with SPIFFE identity\"\n            sleep 30\n          done\n        env:\n        - name: SPIFFE_ENDPOINT_SOCKET\n          value: \"unix:///run/spire/sockets/agent.sock\"\n        - name: SERVICE_NAME\n          value: \"db-client-service\"\n        - name: DATABASE_HOST\n          value: \"mysql.database.svc.cluster.local\"\n        - name: DATABASE_PORT\n          value: \"3306\"\n        - name: DATABASE_NAME\n          value: \"app_database\"\n        volumeMounts:\n        - name: spire-agent-socket\n          mountPath: /run/spire/sockets\n          readOnly: true\n        resources:\n          requests:\n            memory: \"64Mi\"\n            cpu: \"50m\"\n          limits:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n        securityContext:\n          runAsUser: 999\n          runAsGroup: 999\n          readOnlyRootFilesystem: false\n          allowPrivilegeEscalation: false\n      volumes:\n      - name: spire-agent-socket\n        hostPath:\n          path: /run/spire/sockets\n          type: Directory\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: db-client-service\n  namespace: spire-workload\n</code></pre>"},{"location":"workload_integration_guide/#registration-entry_1","title":"Registration Entry","text":"<pre><code># Create registration entry for db-client-service\nkubectl exec -n spire-server -it deployment/spire-server -- /opt/spire/bin/spire-server entry create \\\n  -spiffeID spiffe://example.org/workload/db-client-service \\\n  -parentID spiffe://example.org/spire/agent/k8s_psat/spire-server-cluster \\\n  -selector k8s:ns:spire-workload \\\n  -selector k8s:sa:db-client-service \\\n  -selector k8s:pod-label:app:db-client-service \\\n  -selector k8s:pod-label:service:database-client \\\n  -selector k8s:pod-label:tier:backend \\\n  -ttl 3600\n</code></pre>"},{"location":"workload_integration_guide/#verification-steps","title":"Verification Steps","text":""},{"location":"workload_integration_guide/#1-verify-workload-deployment","title":"1. Verify Workload Deployment","text":"<pre><code># Check pod status\nkubectl get pods -n spire-workload -l app=your-service-name\n\n# Check pod logs\nkubectl logs -n spire-workload -l app=your-service-name\n\n# Check ServiceAccount\nkubectl get serviceaccount -n spire-workload your-service-name\n</code></pre>"},{"location":"workload_integration_guide/#2-verify-spire-registration","title":"2. Verify SPIRE Registration","text":"<pre><code># List all registration entries\nkubectl exec -n spire-server -it deployment/spire-server -- /opt/spire/bin/spire-server entry show\n\n# Check specific entry\nkubectl exec -n spire-server -it deployment/spire-server -- /opt/spire/bin/spire-server entry show \\\n  -spiffeID spiffe://example.org/workload/your-service\n\n# Check agent entries\nkubectl exec -n spire-server -it deployment/spire-server -- /opt/spire/bin/spire-server agent list\n</code></pre>"},{"location":"workload_integration_guide/#3-verify-svid-issuance","title":"3. Verify SVID Issuance","text":"<pre><code># Check if workload can fetch SVID\nkubectl exec -n spire-workload -it deployment/your-service -- \\\n  /bin/sh -c 'ls -la /run/spire/sockets/'\n\n# Test SPIFFE endpoint (if spiffe-helper is available)\nkubectl exec -n spire-workload -it deployment/your-service -- \\\n  /usr/bin/spiffe-helper -config /opt/spiffe-helper.conf\n</code></pre>"},{"location":"workload_integration_guide/#4-test-mutual-authentication","title":"4. Test Mutual Authentication","text":"<p>Create a test pod to verify mutual TLS:</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: spiffe-test\n  namespace: spire-workload\nspec:\n  serviceAccountName: your-service-name\n  containers:\n  - name: test\n    image: curlimages/curl:latest\n    command: [\"/bin/sh\", \"-c\", \"sleep 3600\"]\n    env:\n    - name: SPIFFE_ENDPOINT_SOCKET\n      value: \"unix:///run/spire/sockets/agent.sock\"\n    volumeMounts:\n    - name: spire-agent-socket\n      mountPath: /run/spire/sockets\n      readOnly: true\n  volumes:\n  - name: spire-agent-socket\n    hostPath:\n      path: /run/spire/sockets\n      type: Directory\n</code></pre>"},{"location":"workload_integration_guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"workload_integration_guide/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"workload_integration_guide/#1-no-spire-agent-socket-found","title":"1. \"No SPIRE agent socket found\"","text":"<p>Symptoms: - Workload cannot find <code>/run/spire/sockets/agent.sock</code> - Error: <code>connection refused</code> or <code>no such file or directory</code></p> <p>Solutions: - Verify SPIRE agent is running: <code>kubectl get pods -n spire-system -l app=spire-agent</code> - Check volume mount configuration in workload pod - Ensure hostPath is correct: <code>/run/spire/sockets</code> - Verify node has SPIRE agent deployed (DaemonSet)</p>"},{"location":"workload_integration_guide/#2-registration-entry-not-found","title":"2. \"Registration entry not found\"","text":"<p>Symptoms: - Workload cannot obtain SVID - Error: <code>no identity issued</code></p> <p>Solutions: - Verify registration entry exists: <code>spire-server entry show</code> - Check selectors match pod labels exactly - Verify parentID matches agent SPIFFE ID - Check TTL hasn't expired</p>"},{"location":"workload_integration_guide/#3-permission-denied-accessing-socket","title":"3. \"Permission denied accessing socket\"","text":"<p>Symptoms: - Socket exists but workload cannot access it - Permission errors in logs</p> <p>Solutions: - Check pod security context - Verify user/group IDs - Ensure socket permissions are correct - Check SELinux/AppArmor policies</p>"},{"location":"workload_integration_guide/#4-invalid-spiffe-id-format","title":"4. \"Invalid SPIFFE ID format\"","text":"<p>Symptoms: - Registration fails with format error</p> <p>Solutions: - Verify SPIFFE ID follows format: <code>spiffe://trust-domain/path</code> - Ensure trust domain matches server configuration - Check for invalid characters in path</p>"},{"location":"workload_integration_guide/#5-agent-not-attested","title":"5. \"Agent not attested\"","text":"<p>Symptoms: - Agent shows as not attested - Workloads cannot get identities</p> <p>Solutions: - Check agent configuration matches server - Verify node attestation is working - Check agent logs for attestation errors - Ensure proper RBAC permissions</p>"},{"location":"workload_integration_guide/#debug-commands","title":"Debug Commands","text":"<pre><code># Check SPIRE server logs\nkubectl logs -n spire-server deployment/spire-server\n\n# Check SPIRE agent logs\nkubectl logs -n spire-system daemonset/spire-agent\n\n# Check workload logs\nkubectl logs -n spire-workload deployment/your-service\n\n# Describe pod for configuration issues\nkubectl describe pod -n spire-workload -l app=your-service\n\n# Check events\nkubectl get events -n spire-workload --sort-by='.lastTimestamp'\n</code></pre>"},{"location":"workload_integration_guide/#best-practices","title":"Best Practices","text":""},{"location":"workload_integration_guide/#security-considerations","title":"Security Considerations","text":"<ol> <li>Principle of Least Privilege: Only grant minimal required selectors</li> <li>TTL Management: Use appropriate TTL values based on workload requirements</li> <li>Namespace Isolation: Deploy workloads in dedicated namespaces</li> <li>ServiceAccount Separation: Use unique ServiceAccounts per workload</li> <li>Regular Rotation: Monitor and manage certificate rotation</li> </ol>"},{"location":"workload_integration_guide/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Cache Configuration: Configure appropriate cache sizes</li> <li>Batch Operations: Register multiple entries in batches when possible</li> <li>Resource Limits: Set appropriate resource limits for workloads</li> <li>Monitoring: Implement monitoring for SVID renewal and usage</li> </ol>"},{"location":"workload_integration_guide/#operational-guidelines","title":"Operational Guidelines","text":"<ol> <li>Documentation: Document all workload integrations and their purposes</li> <li>Naming Conventions: Use consistent naming for services and SPIFFE IDs</li> <li>Automation: Automate registration processes where possible</li> <li>Testing: Test workload integration in development environments first</li> <li>Backup: Regularly backup registration entries and configurations</li> </ol>"},{"location":"workload_integration_guide/#conclusion","title":"Conclusion","text":"<p>This guide provides comprehensive instructions for both workload owners and SPIRE administrators to successfully integrate new workloads with SPIRE. Follow the appropriate sections based on your role and use the provided examples as templates for your specific use cases.</p> <p>For additional support or questions, refer to the SPIFFE/SPIRE official documentation or consult your organization's SPIRE administrators.</p>"}]}